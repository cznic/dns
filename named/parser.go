// Copyright (c) 2011 CZ.NIC z.s.p.o. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// blame: jnml, labs.nic.cz

// WARNING: If this file is parser.go then DO NOT EDIT.
// parser.go is generated by goyacc from parser.y (see the Makefile).

package named

import (
	"fmt"
	"github.com/cznic/dns/rr"
	"github.com/cznic/strutil"
	"io/ioutil"
	"math"
	"net"
	"strings"
)

func todo(msg string) {
	panic(fmt.Errorf("TODO:" + msg))
}

type yySymType struct {
	yys                        int
	acl_name                   *AclName
	address_match_list         AddressMatchList
	address_match_list_element AddressMatchListElement
	alg                        SessionKeyAlg
	alg_list                   []SessionKeyAlg
	class                      ZoneClass
	data                       []byte
	dialup                     DialupOption
	dnskey                     *rr.DNSKEY
	dual_stack_server          DualStackServer
	dual_stack_server_list     []DualStackServer
	dual_stack_servers         DualStackServers
	exclude                    []string
	flag                       bool
	ip                         net.IP
	ip_and_opt_port            IPAndPort
	ip_port                    IPPort
	ips                        IPs
	listen_on                  ListenOn
	managedKey                 *ManagedKey
	managedKeys                []*ManagedKey
	masters                    Masters
	masters_item               Master
	masters_items              []Master
	order_spec                 OrderSpec
	order_specs                []OrderSpec
	ordering                   Ordering
	pip_port                   *IPPort
	port_list                  []uint16
	sizeSpec                   SizeSpec
	str                        string
	typ                        rr.Type
	u16                        uint16
	u64                        uint64
	wfi                        WarnFailIgnore
	zone                       *Zone
}

const tCLASS_CHAOSNET = 57346
const tCLASS_HESOID = 57347
const tCLASS_INTERNET = 57348
const tA = 57349
const tAAAA = 57350
const tCNAME = 57351
const tDNSKEY = 57352
const tDS = 57353
const tHINFO = 57354
const tMB = 57355
const tMD = 57356
const tMF = 57357
const tMG = 57358
const tMINFO = 57359
const tMR = 57360
const tMX = 57361
const tNS = 57362
const tNSEC = 57363
const tNSEC3 = 57364
const tNSEC3PARAM = 57365
const tNULL = 57366
const tPTR = 57367
const tRRSIG = 57368
const tSOA = 57369
const tTXT = 57370
const tWKS = 57371
const tACACHE_CLEANING_INTERVAL = 57372
const tACACHE_ENABLE = 57373
const tADD_FROM_AUTH = 57374
const tADD_FROM_CACHE = 57375
const tALLOW = 57376
const tALLOW_NOTIFY = 57377
const tALLOW_QUERY = 57378
const tALLOW_QUERY_CACHE = 57379
const tALLOW_QUERY_CACHE_ON = 57380
const tALLOW_QUERY_ON = 57381
const tALLOW_RECURSION = 57382
const tALLOW_RECURSION_ON = 57383
const tALLOW_UPDATE = 57384
const tALLOW_UPDATE_FWD = 57385
const tALLOW_V6_SYNTHESIS = 57386
const tALLOW_XFER = 57387
const tALSO_NOTIFY = 57388
const tALT_XFER_SRC = 57389
const tALT_XFER_SRCV6 = 57390
const tANY = 57391
const tAUTH_NXDOMAIN = 57392
const tAUTO = 57393
const tAUTO_DNSSEC = 57394
const tAVOID_V4_UDP_PORTS = 57395
const tAVOID_V6_UDP_PORTS = 57396
const tBINDKEYS_FILE = 57397
const tBLACKHOLE = 57398
const tCHECK_DUP_RECS = 57399
const tCHECK_INTEGRITY = 57400
const tCHECK_MX = 57401
const tCHECK_MX_CNAME = 57402
const tCHECK_NAMES = 57403
const tCHECK_SIBLING = 57404
const tCHECK_SRV_CNAME = 57405
const tCHECK_WILDCARD = 57406
const tCLASS = 57407
const tCLEANING_INTERVAL = 57408
const tCLIENTS_PER_QUERY = 57409
const tCORESIZE = 57410
const tCREATE = 57411
const tCYCLIC = 57412
const tDATABASE = 57413
const tDATASIZE = 57414
const tDEALLOCATE_ON_EXIT = 57415
const tDEFAULT = 57416
const tDELEGATION_ONLY = 57417
const tDIALUP = 57418
const tDIRECTORY = 57419
const tDISABLE_ALGORITHMS = 57420
const tDISABLE_EMPTY_ZONE = 57421
const tDNSSEC_ACCEPT_EXPIRED = 57422
const tDNSSEC_DNSKEY_KSKONLY = 57423
const tDNSSEC_ENABLE = 57424
const tDNSSEC_LOOKASIDE = 57425
const tDNSSEC_MUST_BE_SECURE = 57426
const tDNSSEC_SECURE2INSECURE = 57427
const tDNSSEC_VALIDATION = 57428
const tDUAL_STACK_SERVERS = 57429
const tDUMP_FILE = 57430
const tEDNS_UDP_SIZE = 57431
const tEMPTY_CONTACT = 57432
const tEMPTY_SERVER = 57433
const tEMPTY_ZONES_ENABLE = 57434
const tEXCLUDE = 57435
const tEXPLICIT = 57436
const tFAIL = 57437
const tFAKE_IQUERY = 57438
const tFALSE = 57439
const tFETCH_GLUE = 57440
const tFILE = 57441
const tFILES = 57442
const tFIRST = 57443
const tFIXED = 57444
const tFLUSH_ZONES_ON_SHUTDOWN = 57445
const tFORWARD = 57446
const tFORWARDERS = 57447
const tHAS_OLD_CLIENTS = 57448
const tHEARTBEAT_INTERVAL = 57449
const tHINT = 57450
const tHMAC_MD5 = 57451
const tHMAC_SHA1 = 57452
const tHMAC_SHA224 = 57453
const tHMAC_SHA256 = 57454
const tHMAC_SHA384 = 57455
const tHMAC_SHA512 = 57456
const tHOSTNAME = 57457
const tHOST_STATISTICS = 57458
const tHOST_STATISTICS_MAX = 57459
const tIGNORE = 57460
const tINCLUDE = 57461
const tINITIAL_KEY = 57462
const tINTERFACE_INTERVAL = 57463
const tIP = 57464
const tIXFR_BASE = 57465
const tIXFR_FROM_DIFFS = 57466
const tIXFR_TMP_FILE = 57467
const tJOURNAL = 57468
const tKEY = 57469
const tKEY_DIRECTORY = 57470
const tLAME_TTL = 57471
const tLISTEN_ON = 57472
const tLISTEN_ON_V6 = 57473
const tLOCALHOST = 57474
const tLOCALNETS = 57475
const tMAINTAIN = 57476
const tMAINTAIN_IXFR_BASE = 57477
const tMANAGED_KEYS = 57478
const tMANY_ANSWERS = 57479
const tMASTER = 57480
const tMASTERS = 57481
const tMASTER_FILE_FORMAT = 57482
const tMASTER_ONLY = 57483
const tMATCH_MAPPED_ADDRESSES = 57484
const tMAX_ACACHE_SIZE = 57485
const tMAX_CACHE_SIZE = 57486
const tMAX_CACHE_TTL = 57487
const tMAX_CLIENTS_PER_QUERY = 57488
const tMAX_IXFR_LOG_SIZE = 57489
const tMAX_JOURNAL_SIZE = 57490
const tMAX_NCACHE_TTL = 57491
const tMAX_REFRESH_TIME = 57492
const tMAX_RETRY_TIME = 57493
const tMAX_UDP_SIZE = 57494
const tMAX_XFER_IDLE_IN = 57495
const tMAX_XFER_IDLE_OUT = 57496
const tMAX_XFER_TIME_IN = 57497
const tMAX_XFER_TIME_OUT = 57498
const tMEMSTATS = 57499
const tMEMSTATS_FILE = 57500
const tMINIMAL_RESPONSES = 57501
const tMIN_REFRESH_TIME = 57502
const tMIN_RETRY_TIME = 57503
const tMIN_ROOTS = 57504
const tMULTIPLE_CNAMES = 57505
const tMULTI_MASTER = 57506
const tNAME = 57507
const tNAMEX_XFER = 57508
const tNO = 57509
const tNONE = 57510
const tNOTIFY = 57511
const tNOTIFY_DELAY = 57512
const tNOTIFY_PASSIVE = 57513
const tNOTIFY_SOURCE = 57514
const tNOTIFY_SOURCE_V6 = 57515
const tNOTIFY_TO_SOA = 57516
const tOFF = 57517
const tONE_ANSWER = 57518
const tONLY = 57519
const tOPTIONS = 57520
const tORDER = 57521
const tPASSIVE = 57522
const tPID_FILE = 57523
const tPORT = 57524
const tPREFERRED_GLUE = 57525
const tPROVIDE_IXFR = 57526
const tPUBKEY = 57527
const tQUERYLOG = 57528
const tQUERY_SRC = 57529
const tQUERY_SRC_V6 = 57530
const tRANDOM = 57531
const tRANDOM_DEVICE = 57532
const tRANGE = 57533
const tRAW = 57534
const tRECURSING_FILE = 57535
const tRECURSION = 57536
const tRECURSIVE_CLIENTS = 57537
const tREFRESH = 57538
const tREQUEST_IXFR = 57539
const tRESERVED_SOCKETS = 57540
const tRESPONSE = 57541
const tRFC2308_TYPE1 = 57542
const tROOT_DELEGATION_ONLY = 57543
const tRRSET_ORDER = 57544
const tSERIAL_QUERIES = 57545
const tSERIAL_QUERY_RATE = 57546
const tSERVER_ID = 57547
const tSESSION_KEYALG = 57548
const tSESSION_KEYFILE = 57549
const tSESSION_KEYNAME = 57550
const tSIG_SIGNING_NODES = 57551
const tSIG_SIGNING_SIGNATURES = 57552
const tSIG_SIGNING_TYPE = 57553
const tSIG_VALIDITY_INTERVAL = 57554
const tSLAVE = 57555
const tSORTLIST = 57556
const tSTACK_SIZE = 57557
const tSTATISTICS_INTERVAL = 57558
const tSTATS_FILE = 57559
const tTCP_CLIENTS = 57560
const tTCP_LISTEN_QUEUE = 57561
const tTEXT = 57562
const tTKEY_DHKEY = 57563
const tTKEY_DOMAIN = 57564
const tTOPOLOGY = 57565
const tTREAT_CR_AS_SPACE = 57566
const tTRUE = 57567
const tTRUST_ANCHOR = 57568
const tTRY_TCP_REFRESH = 57569
const tTYPE = 57570
const tUNLIMITED = 57571
const tUPDATE_CHECK_KSK = 57572
const tUPDATE_POLICY = 57573
const tUSE_ALT_XFER_SRC = 57574
const tUSE_ID_POOL = 57575
const tUSE_IXFR = 57576
const tVERSION = 57577
const tWARN = 57578
const tXFERS_IN = 57579
const tXFERS_OUT = 57580
const tXFERS_PER_NS = 57581
const tXFER_FMT = 57582
const tXFER_SOURCE = 57583
const tXFER_SOURCE_V6 = 57584
const tYES = 57585
const tZERO_NO_SOA_TTL = 57586
const tZERO_NO_SOA_TTL_CACHE = 57587
const tZONE = 57588
const tZONE_STATS = 57589
const tQSTR = 57590
const tDECADIC = 57591

var yyToknames = []string{
	"tCLASS_CHAOSNET",
	"tCLASS_HESOID",
	"tCLASS_INTERNET",
	"tA",
	"tAAAA",
	"tCNAME",
	"tDNSKEY",
	"tDS",
	"tHINFO",
	"tMB",
	"tMD",
	"tMF",
	"tMG",
	"tMINFO",
	"tMR",
	"tMX",
	"tNS",
	"tNSEC",
	"tNSEC3",
	"tNSEC3PARAM",
	"tNULL",
	"tPTR",
	"tRRSIG",
	"tSOA",
	"tTXT",
	"tWKS",
	"tACACHE_CLEANING_INTERVAL",
	"tACACHE_ENABLE",
	"tADD_FROM_AUTH",
	"tADD_FROM_CACHE",
	"tALLOW",
	"tALLOW_NOTIFY",
	"tALLOW_QUERY",
	"tALLOW_QUERY_CACHE",
	"tALLOW_QUERY_CACHE_ON",
	"tALLOW_QUERY_ON",
	"tALLOW_RECURSION",
	"tALLOW_RECURSION_ON",
	"tALLOW_UPDATE",
	"tALLOW_UPDATE_FWD",
	"tALLOW_V6_SYNTHESIS",
	"tALLOW_XFER",
	"tALSO_NOTIFY",
	"tALT_XFER_SRC",
	"tALT_XFER_SRCV6",
	"tANY",
	"tAUTH_NXDOMAIN",
	"tAUTO",
	"tAUTO_DNSSEC",
	"tAVOID_V4_UDP_PORTS",
	"tAVOID_V6_UDP_PORTS",
	"tBINDKEYS_FILE",
	"tBLACKHOLE",
	"tCHECK_DUP_RECS",
	"tCHECK_INTEGRITY",
	"tCHECK_MX",
	"tCHECK_MX_CNAME",
	"tCHECK_NAMES",
	"tCHECK_SIBLING",
	"tCHECK_SRV_CNAME",
	"tCHECK_WILDCARD",
	"tCLASS",
	"tCLEANING_INTERVAL",
	"tCLIENTS_PER_QUERY",
	"tCORESIZE",
	"tCREATE",
	"tCYCLIC",
	"tDATABASE",
	"tDATASIZE",
	"tDEALLOCATE_ON_EXIT",
	"tDEFAULT",
	"tDELEGATION_ONLY",
	"tDIALUP",
	"tDIRECTORY",
	"tDISABLE_ALGORITHMS",
	"tDISABLE_EMPTY_ZONE",
	"tDNSSEC_ACCEPT_EXPIRED",
	"tDNSSEC_DNSKEY_KSKONLY",
	"tDNSSEC_ENABLE",
	"tDNSSEC_LOOKASIDE",
	"tDNSSEC_MUST_BE_SECURE",
	"tDNSSEC_SECURE2INSECURE",
	"tDNSSEC_VALIDATION",
	"tDUAL_STACK_SERVERS",
	"tDUMP_FILE",
	"tEDNS_UDP_SIZE",
	"tEMPTY_CONTACT",
	"tEMPTY_SERVER",
	"tEMPTY_ZONES_ENABLE",
	"tEXCLUDE",
	"tEXPLICIT",
	"tFAIL",
	"tFAKE_IQUERY",
	"tFALSE",
	"tFETCH_GLUE",
	"tFILE",
	"tFILES",
	"tFIRST",
	"tFIXED",
	"tFLUSH_ZONES_ON_SHUTDOWN",
	"tFORWARD",
	"tFORWARDERS",
	"tHAS_OLD_CLIENTS",
	"tHEARTBEAT_INTERVAL",
	"tHINT",
	"tHMAC_MD5",
	"tHMAC_SHA1",
	"tHMAC_SHA224",
	"tHMAC_SHA256",
	"tHMAC_SHA384",
	"tHMAC_SHA512",
	"tHOSTNAME",
	"tHOST_STATISTICS",
	"tHOST_STATISTICS_MAX",
	"tIGNORE",
	"tINCLUDE",
	"tINITIAL_KEY",
	"tINTERFACE_INTERVAL",
	"tIP",
	"tIXFR_BASE",
	"tIXFR_FROM_DIFFS",
	"tIXFR_TMP_FILE",
	"tJOURNAL",
	"tKEY",
	"tKEY_DIRECTORY",
	"tLAME_TTL",
	"tLISTEN_ON",
	"tLISTEN_ON_V6",
	"tLOCALHOST",
	"tLOCALNETS",
	"tMAINTAIN",
	"tMAINTAIN_IXFR_BASE",
	"tMANAGED_KEYS",
	"tMANY_ANSWERS",
	"tMASTER",
	"tMASTERS",
	"tMASTER_FILE_FORMAT",
	"tMASTER_ONLY",
	"tMATCH_MAPPED_ADDRESSES",
	"tMAX_ACACHE_SIZE",
	"tMAX_CACHE_SIZE",
	"tMAX_CACHE_TTL",
	"tMAX_CLIENTS_PER_QUERY",
	"tMAX_IXFR_LOG_SIZE",
	"tMAX_JOURNAL_SIZE",
	"tMAX_NCACHE_TTL",
	"tMAX_REFRESH_TIME",
	"tMAX_RETRY_TIME",
	"tMAX_UDP_SIZE",
	"tMAX_XFER_IDLE_IN",
	"tMAX_XFER_IDLE_OUT",
	"tMAX_XFER_TIME_IN",
	"tMAX_XFER_TIME_OUT",
	"tMEMSTATS",
	"tMEMSTATS_FILE",
	"tMINIMAL_RESPONSES",
	"tMIN_REFRESH_TIME",
	"tMIN_RETRY_TIME",
	"tMIN_ROOTS",
	"tMULTIPLE_CNAMES",
	"tMULTI_MASTER",
	"tNAME",
	"tNAMEX_XFER",
	"tNO",
	"tNONE",
	"tNOTIFY",
	"tNOTIFY_DELAY",
	"tNOTIFY_PASSIVE",
	"tNOTIFY_SOURCE",
	"tNOTIFY_SOURCE_V6",
	"tNOTIFY_TO_SOA",
	"tOFF",
	"tONE_ANSWER",
	"tONLY",
	"tOPTIONS",
	"tORDER",
	"tPASSIVE",
	"tPID_FILE",
	"tPORT",
	"tPREFERRED_GLUE",
	"tPROVIDE_IXFR",
	"tPUBKEY",
	"tQUERYLOG",
	"tQUERY_SRC",
	"tQUERY_SRC_V6",
	"tRANDOM",
	"tRANDOM_DEVICE",
	"tRANGE",
	"tRAW",
	"tRECURSING_FILE",
	"tRECURSION",
	"tRECURSIVE_CLIENTS",
	"tREFRESH",
	"tREQUEST_IXFR",
	"tRESERVED_SOCKETS",
	"tRESPONSE",
	"tRFC2308_TYPE1",
	"tROOT_DELEGATION_ONLY",
	"tRRSET_ORDER",
	"tSERIAL_QUERIES",
	"tSERIAL_QUERY_RATE",
	"tSERVER_ID",
	"tSESSION_KEYALG",
	"tSESSION_KEYFILE",
	"tSESSION_KEYNAME",
	"tSIG_SIGNING_NODES",
	"tSIG_SIGNING_SIGNATURES",
	"tSIG_SIGNING_TYPE",
	"tSIG_VALIDITY_INTERVAL",
	"tSLAVE",
	"tSORTLIST",
	"tSTACK_SIZE",
	"tSTATISTICS_INTERVAL",
	"tSTATS_FILE",
	"tTCP_CLIENTS",
	"tTCP_LISTEN_QUEUE",
	"tTEXT",
	"tTKEY_DHKEY",
	"tTKEY_DOMAIN",
	"tTOPOLOGY",
	"tTREAT_CR_AS_SPACE",
	"tTRUE",
	"tTRUST_ANCHOR",
	"tTRY_TCP_REFRESH",
	"tTYPE",
	"tUNLIMITED",
	"tUPDATE_CHECK_KSK",
	"tUPDATE_POLICY",
	"tUSE_ALT_XFER_SRC",
	"tUSE_ID_POOL",
	"tUSE_IXFR",
	"tVERSION",
	"tWARN",
	"tXFERS_IN",
	"tXFERS_OUT",
	"tXFERS_PER_NS",
	"tXFER_FMT",
	"tXFER_SOURCE",
	"tXFER_SOURCE_V6",
	"tYES",
	"tZERO_NO_SOA_TTL",
	"tZERO_NO_SOA_TTL_CACHE",
	"tZONE",
	"tZONE_STATS",
	"tQSTR",
	"tDECADIC",
}
var yyStatenames = []string{}

const yyEofCode = 1
const yyErrCode = 2
const yyMaxDepth = 200

var yyExca = []int{
	-1, 1,
	1, -1,
	-2, 0,
}

const yyNprod = 309
const yyPrivate = 57344

var yyTokenNames []string
var yyStates []string

const yyLast = 1097

var yyAct = []int{

	683, 418, 41, 658, 702, 429, 645, 371, 446, 600,
	26, 558, 445, 31, 770, 409, 19, 417, 732, 25,
	447, 447, 406, 420, 731, 35, 42, 213, 372, 373,
	374, 375, 376, 377, 404, 697, 234, 695, 556, 559,
	42, 480, 469, 42, 42, 403, 384, 366, 360, 241,
	239, 337, 238, 217, 217, 232, 231, 230, 425, 210,
	229, 228, 227, 226, 225, 425, 224, 223, 222, 221,
	37, 30, 22, 425, 14, 219, 220, 425, 448, 448,
	614, 565, 564, 635, 631, 209, 778, 777, 772, 271,
	273, 237, 771, 407, 278, 279, 259, 246, 336, 760,
	759, 252, 448, 254, 758, 405, 757, 425, 262, 283,
	756, 750, 749, 274, 275, 276, 747, 745, 280, 281,
	425, 744, 743, 216, 216, 288, 289, 290, 742, 735,
	294, 421, 734, 298, 733, 729, 422, 302, 421, 561,
	307, 427, 428, 422, 308, 309, 421, 312, 427, 428,
	421, 422, 272, 562, 425, 422, 427, 428, 727, 726,
	427, 428, 343, 725, 706, 330, 40, 332, 333, 235,
	335, 779, 205, 724, 341, 755, 693, 426, 347, 348,
	421, 215, 215, 352, 426, 422, 355, 722, 357, 721,
	427, 428, 426, 421, 719, 717, 426, 716, 422, 214,
	214, 715, 560, 427, 428, 218, 218, 425, 208, 385,
	714, 425, 713, 712, 711, 710, 393, 394, 395, 396,
	397, 709, 400, 401, 402, 708, 426, 421, 654, 705,
	704, 692, 422, 217, 691, 440, 689, 427, 428, 426,
	430, 431, 432, 433, 434, 435, 436, 437, 438, 439,
	441, 260, 687, 442, 656, 651, 425, 272, 650, 451,
	419, 242, 424, 768, 272, 649, 605, 419, 425, 424,
	767, 258, 272, 426, 303, 419, 272, 424, 707, 419,
	421, 424, 698, 648, 421, 422, 425, 643, 639, 422,
	427, 428, 638, 637, 427, 428, 633, 630, 425, 629,
	628, 612, 609, 216, 608, 425, 272, 476, 32, 419,
	607, 424, 696, 606, 599, 598, 597, 596, 595, 272,
	594, 579, 419, 593, 424, 690, 426, 592, 591, 421,
	426, 590, 247, 248, 422, 589, 253, 588, 587, 427,
	428, 421, 586, 585, 582, 580, 422, 578, 577, 304,
	576, 427, 428, 272, 575, 408, 536, 537, 424, 421,
	574, 215, 573, 572, 422, 571, 546, 547, 570, 427,
	428, 421, 568, 567, 566, 426, 422, 563, 421, 214,
	555, 427, 428, 422, 569, 218, 390, 426, 427, 428,
	554, 553, 552, 551, 550, 549, 425, 548, 545, 544,
	543, 542, 581, 583, 584, 426, 272, 541, 389, 419,
	272, 424, 688, 419, 540, 424, 636, 426, 601, 610,
	603, 539, 538, 602, 426, 604, 535, 534, 616, 533,
	532, 531, 610, 610, 610, 610, 610, 610, 610, 610,
	610, 610, 617, 613, 530, 529, 528, 527, 526, 525,
	524, 523, 522, 610, 425, 272, 634, 632, 419, 521,
	424, 627, 632, 425, 520, 519, 518, 272, 517, 421,
	419, 425, 424, 626, 422, 425, 516, 641, 515, 427,
	428, 642, 514, 647, 513, 272, 646, 388, 419, 512,
	424, 625, 511, 510, 425, 509, 508, 272, 507, 42,
	419, 425, 424, 624, 272, 506, 369, 419, 505, 424,
	623, 456, 457, 458, 504, 426, 503, 502, 501, 500,
	499, 498, 497, 496, 495, 494, 493, 421, 492, 491,
	490, 489, 422, 488, 487, 486, 421, 427, 428, 485,
	484, 422, 483, 482, 421, 481, 427, 428, 421, 422,
	479, 478, 477, 422, 427, 428, 474, 473, 427, 428,
	472, 471, 470, 468, 467, 466, 465, 421, 464, 655,
	657, 610, 422, 426, 421, 463, 462, 427, 428, 422,
	461, 460, 426, 610, 427, 428, 459, 455, 454, 453,
	426, 452, 450, 443, 426, 272, 416, 447, 419, 415,
	424, 622, 414, 694, 610, 413, 610, 211, 207, 200,
	18, 17, 399, 426, 368, 367, 365, 364, 363, 610,
	426, 362, 3, 361, 356, 272, 42, 354, 338, 331,
	328, 327, 326, 325, 324, 323, 322, 321, 718, 7,
	320, 319, 4, 720, 317, 316, 315, 647, 723, 306,
	646, 728, 301, 272, 297, 448, 419, 300, 424, 621,
	299, 295, 272, 730, 285, 419, 277, 424, 620, 256,
	272, 249, 255, 419, 272, 424, 619, 419, 212, 424,
	618, 5, 202, 764, 762, 754, 700, 682, 653, 272,
	412, 383, 398, 272, 382, 380, 419, 379, 424, 611,
	272, 378, 370, 419, 353, 424, 752, 351, 342, 334,
	329, 305, 287, 746, 286, 748, 284, 270, 240, 25,
	16, 694, 12, 10, 204, 264, 475, 266, 244, 269,
	444, 311, 251, 685, 296, 21, 783, 36, 268, 763,
	761, 765, 766, 773, 776, 775, 250, 739, 610, 8,
	610, 245, 40, 741, 267, 703, 737, 774, 559, 310,
	391, 740, 42, 359, 2, 684, 9, 292, 345, 346,
	738, 769, 411, 751, 13, 780, 781, 782, 33, 43,
	45, 46, 47, 48, 784, 49, 50, 51, 52, 55,
	53, 54, 56, 57, 58, 59, 60, 61, 62, 392,
	63, 265, 410, 64, 65, 66, 67, 68, 69, 70,
	71, 72, 73, 74, 75, 615, 76, 77, 78, 736,
	39, 24, 79, 80, 1, 753, 81, 82, 83, 84,
	85, 86, 87, 88, 89, 90, 91, 92, 93, 94,
	95, 96, 97, 293, 701, 34, 98, 203, 99, 6,
	100, 15, 686, 112, 101, 197, 102, 103, 561, 206,
	557, 38, 233, 272, 11, 104, 105, 106, 23, 243,
	115, 107, 562, 114, 109, 29, 28, 27, 110, 111,
	198, 199, 20, 113, 652, 116, 358, 282, 644, 201,
	118, 263, 119, 120, 121, 122, 123, 124, 125, 126,
	127, 129, 131, 132, 133, 134, 135, 117, 136, 137,
	128, 130, 138, 140, 139, 699, 141, 640, 257, 142,
	143, 560, 144, 145, 146, 236, 423, 0, 0, 344,
	0, 147, 148, 149, 150, 0, 151, 152, 153, 0,
	154, 0, 0, 156, 155, 157, 0, 158, 159, 0,
	160, 161, 162, 163, 171, 172, 173, 174, 175, 165,
	166, 167, 164, 0, 168, 177, 108, 176, 169, 170,
	449, 178, 179, 180, 181, 0, 0, 188, 0, 0,
	189, 0, 190, 191, 192, 193, 0, 184, 185, 186,
	187, 182, 183, 0, 194, 195, 0, 196, 261, 0,
	0, 0, 0, 0, 44, 0, 0, 339, 340, 372,
	373, 374, 375, 376, 377, 349, 350, 0, 0, 291,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 313,
	314, 0, 0, 0, 318, 386, 387, 659, 660, 661,
	662, 663, 664, 665, 666, 667, 668, 669, 670, 671,
	672, 673, 674, 675, 676, 677, 678, 679, 680, 681,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 381,
}
var yyPact = []int{

	503, 503, -1000, 475, 474, -1000, -1000, -179, 472, -1000,
	361, 360, 553, -181, 471, 871, -1000, -1000, -1000, -182,
	-1000, 59, -1000, -229, -1000, 617, -183, -1000, -1000, -1000,
	504, -1000, -1000, 750, -1000, 359, 433, 496, -82, -1000,
	358, -42, 553, -1000, 357, 429, -44, -44, -44, -184,
	-185, -186, -187, -189, -190, -191, -192, -193, -196, -197,
	-198, -86, -86, -44, -201, -203, 470, -204, 633, -44,
	633, 633, 533, -44, 633, -44, 423, 420, 22, 22,
	-44, 558, 469, 441, 441, -44, -44, -44, 615, 441,
	-44, -44, 553, 468, 415, 466, 464, -44, -44, -44,
	22, 666, -44, 412, 486, -44, 411, 408, 403, 136,
	463, 400, -44, -1000, -1000, -1000, -44, -44, 539, -44,
	22, 22, 397, 396, 395, 22, 392, 391, 388, 387,
	386, 385, 384, 383, 382, 381, 462, -44, 380, -44,
	-44, 461, -43, 379, -86, -86, -44, 460, 59, 761,
	-44, -44, -86, -86, 459, -44, 456, 378, -44, 375,
	-44, 670, -205, 374, 372, 369, 368, 367, -206, 366,
	365, 257, 454, 900, 453, 449, 447, 22, 446, 443,
	-207, -44, -86, -86, 238, 159, 137, 623, -44, -44,
	-44, -44, -44, 444, -44, -44, -44, -208, -148, -160,
	-1000, -1000, 106, -239, 664, -1000, -1000, -1000, -1000, 442,
	-1000, -1000, 355, 352, -1000, -1000, -1000, -1000, -1000, 349,
	346, 452, 452, 452, 452, 452, 452, 452, 452, 452,
	452, 452, 640, 553, -1000, -1000, 553, 343, 406, 406,
	342, 452, 341, -1000, -1000, -1000, 339, 338, 337, 633,
	633, 633, 336, 331, 330, 326, 325, 318, -1000, -1000,
	-1000, 316, 315, 314, -1000, -1000, -1000, -1000, -1000, -1000,
	313, -211, -1000, 312, 311, 310, 307, 306, 500, -44,
	302, 301, 300, -212, 295, 293, 292, 290, 289, 285,
	284, 283, 281, 280, 279, 278, 276, 275, 274, 273,
	272, 271, 270, 269, 268, 267, 266, 264, 258, 255,
	248, 246, 245, 243, 242, 239, 234, 232, 228, 226,
	218, 216, 215, 214, 209, 202, 201, 200, 199, 198,
	197, 196, 195, 194, 181, 180, 179, 177, 176, 553,
	553, 172, 171, 164, 157, 151, 150, 149, 148, 553,
	553, 147, 145, 144, 143, 142, 141, 140, 130, -215,
	693, 127, -168, 124, 123, 122, 452, 118, 115, 113,
	112, 110, -1000, -1000, -1000, -1000, -1000, -1000, 104, 100,
	98, 97, 72, 95, 452, 94, 553, 553, 93, 92,
	88, 87, 85, 81, 78, 77, 73, 70, 68, 67,
	66, 65, 64, -1000, 59, 452, 59, 452, 17, 63,
	60, 54, 52, -1000, -1000, -1000, -1000, 445, 51, 105,
	-1000, -172, 441, -1000, 452, -1000, -1000, -1000, -1000, -1000,
	426, 422, 414, 405, 347, 256, 249, 237, 219, 207,
	50, 49, 47, -1000, -170, -1000, 46, -147, -1000, -171,
	-1000, 162, -1000, -1000, -1000, -1000, 43, 42, 38, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 900,
	-1000, -1000, -1000, -1000, -1000, 441, 37, -1000, -1000, -1000,
	377, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 33, 15, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 8, 5, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 440, -26, 4, 871,
	1040, 439, 663, -1000, -1000, 2, -1000, -1000, -1000, 158,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -14,
	-1000, 71, -1000, -16, -19, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-78, -216, 58, -218, 28, 438, -1000, -1000, 656, -1000,
	-20, -21, -1000, -1000, -85, -1000, -1000, 24, -25, -29,
	-35, -36, -37, -38, -40, -49, -53, -55, -1000, -1000,
	-1000, -56, -1000, -1000, -147, -61, -63, -1000, -1000, -1000,
	-81, -87, -91, -1000, -96, -115, 553, -1000, -1000, -1000,
	-1000, -1000, -230, -116, -118, -121, -1000, 591, 582, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 574, -1000, -1000, -1000, -1000, -1000, -122, -1000,
	-128, -1000, -1000, -129, -133, 452, -134, 452, -138, -139,
	-1000, 656, -1000, 437, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -79, -1000,
	-140, -1000, -1000, -144, -146, -1000, -1000, -1000, -150, -1000,
	-1000, -1000, -151, -1000, -1000, -1000, 1040, 436, 663, 435,
	663, 663, -1000, -1000, -1000, -1000, 16, -1000, 9, -1000,
	-1000, -1000, -1000, -242, -158, -162, -1000, -1000, -1000, -1000,
	-1000, 578, 566, -1000, 565, -1000, -1000, -163, -164, -1000,
	-1000, -1000, -1000, -77, 663, 663, 663, -1000, -1000, 557,
	-1000, -1000, -1000, 663, -1000,
}
var yyPgo = []int{

	0, 926, 17, 1, 23, 7, 917, 10, 915, 891,
	889, 6, 888, 887, 886, 884, 27, 862, 9, 883,
	13, 882, 16, 2, 873, 870, 821, 868, 864, 820,
	861, 0, 11, 860, 730, 12, 918, 5, 4, 851,
	3, 8, 261, 849, 847, 844, 825, 824, 764, 815,
	779, 778, 774, 773, 771,
}
var yyR1 = []int{

	0, 47, 47, 1, 1, 1, 1, 1, 2, 2,
	3, 3, 5, 5, 5, 5, 5, 5, 6, 6,
	7, 7, 7, 7, 4, 4, 4, 4, 4, 8,
	9, 9, 9, 9, 9, 9, 10, 37, 13, 12,
	12, 11, 11, 14, 14, 15, 15, 38, 19, 17,
	17, 18, 18, 20, 23, 49, 24, 24, 25, 25,
	26, 27, 27, 28, 29, 29, 29, 30, 30, 50,
	50, 50, 50, 50, 50, 50, 50, 50, 50, 50,
	50, 50, 50, 50, 50, 50, 50, 50, 50, 50,
	50, 50, 50, 50, 50, 50, 50, 50, 50, 50,
	50, 50, 50, 50, 50, 50, 50, 50, 50, 50,
	50, 50, 50, 50, 50, 50, 50, 50, 50, 50,
	50, 50, 50, 50, 50, 50, 50, 50, 50, 50,
	50, 50, 50, 50, 50, 50, 50, 50, 50, 50,
	50, 50, 50, 50, 50, 50, 50, 50, 50, 50,
	50, 50, 50, 50, 50, 50, 50, 50, 50, 50,
	50, 50, 50, 50, 50, 50, 50, 50, 50, 50,
	50, 50, 50, 50, 50, 50, 50, 50, 50, 50,
	50, 50, 50, 50, 50, 50, 50, 50, 50, 50,
	50, 50, 50, 50, 50, 50, 50, 50, 50, 50,
	50, 50, 50, 50, 50, 50, 50, 50, 50, 50,
	50, 50, 50, 50, 50, 50, 50, 50, 50, 50,
	50, 50, 50, 50, 50, 50, 50, 50, 50, 50,
	50, 50, 50, 50, 50, 50, 51, 51, 31, 31,
	31, 32, 32, 32, 32, 32, 32, 32, 32, 33,
	33, 21, 22, 22, 34, 34, 35, 35, 36, 36,
	36, 48, 48, 52, 48, 48, 48, 40, 40, 40,
	40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
	40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
	41, 42, 42, 42, 16, 16, 16, 16, 16, 43,
	39, 44, 44, 45, 45, 46, 46, 53, 54,
}
var yyR2 = []int{

	0, 1, 2, 1, 1, 1, 1, 1, 2, 3,
	2, 1, 1, 1, 1, 1, 1, 1, 2, 3,
	0, 1, 1, 1, 3, 1, 2, 1, 3, 1,
	1, 1, 1, 1, 1, 1, 5, 1, 4, 2,
	3, 2, 1, 0, 4, 2, 3, 3, 5, 1,
	1, 0, 3, 1, 2, 1, 7, 5, 7, 5,
	3, 1, 2, 5, 2, 2, 4, 1, 2, 3,
	3, 3, 3, 5, 5, 5, 5, 5, 5, 5,
	5, 5, 5, 5, 7, 4, 4, 3, 5, 5,
	3, 5, 3, 3, 3, 3, 4, 4, 4, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 6,
	3, 3, 3, 3, 3, 5, 4, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 1, 1, 1, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 4, 4,
	3, 3, 3, 3, 3, 3, 3, 3, 4, 4,
	3, 3, 3, 3, 3, 3, 3, 3, 5, 3,
	3, 4, 3, 3, 3, 5, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 4, 3, 5, 3, 4,
	4, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 0, 2, 1, 1,
	1, 8, 6, 6, 4, 6, 4, 4, 2, 2,
	3, 2, 0, 1, 1, 2, 2, 4, 1, 1,
	1, 3, 3, 0, 6, 1, 5, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 7,
	1, 4, 5, 0, 2, 0, 2, 1, 1,
}
var yyChk = []int{

	-1000, -47, -48, 119, 139, 178, -43, 136, 246, -48,
	248, -28, 248, -52, 253, -39, 248, 250, 250, -22,
	-21, 182, 253, -27, -26, 248, -7, 6, 5, 4,
	253, -20, 249, -51, -26, 254, 120, 253, -30, -29,
	248, -23, 122, -50, 254, 30, 31, 32, 33, 35,
	36, 37, 38, 40, 41, 39, 42, 43, 44, 45,
	46, 47, 48, 50, 53, 54, 55, 56, 57, 58,
	59, 60, 61, 62, 63, 64, 66, 67, 68, 72,
	73, 76, 77, 78, 79, 80, 81, 82, 83, 84,
	85, 86, 87, 88, 89, 90, 91, 92, 96, 98,
	100, 104, 106, 107, 115, 116, 117, 121, 216, 124,
	128, 129, 103, -19, -24, -25, 135, 157, 140, 142,
	143, 144, 145, 146, 147, 148, 149, 150, 160, 151,
	161, 152, 153, 154, 155, 156, 158, 159, 162, 164,
	163, 166, 169, 170, 172, 173, 174, 181, 182, 183,
	184, 186, 187, 188, 190, 194, 193, 195, 197, 198,
	200, 201, 202, 203, 212, 209, 210, 211, 214, 218,
	219, 204, 205, 206, 207, 208, 217, 215, 221, 222,
	223, 224, 241, 242, 237, 238, 239, 240, 227, 230,
	232, 233, 234, 235, 244, 245, 247, 105, 130, 131,
	250, -10, 249, -44, 228, 254, -29, 250, 250, 127,
	-22, 250, 249, -16, 243, 225, 167, 97, 249, -16,
	-16, 253, 253, 253, 253, 253, 253, 253, 253, 253,
	253, 253, 253, -17, 122, 255, -17, -16, 253, 253,
	248, 253, -42, 236, 95, 118, -16, -42, -42, 138,
	213, 199, -16, -42, -16, 249, 249, -36, 249, 74,
	229, -36, -16, -9, 167, 243, 169, 196, 180, 171,
	248, -37, 248, -37, -16, -16, -16, 51, -37, -37,
	-16, -16, -13, -22, 248, 249, 248, 248, -16, -16,
	-16, -36, 101, 177, -16, 249, 248, 168, -16, 249,
	249, 249, -16, 138, 213, 248, 249, -16, -16, -16,
	220, 192, -16, -36, -36, 249, 249, 249, -36, 249,
	249, 249, 249, 249, 249, 249, 249, 249, 249, 248,
	-16, 249, -16, -16, 248, -16, 141, 94, 249, -17,
	-17, -16, 248, -20, 168, 7, 8, -16, -16, -17,
	-17, 248, -16, 248, 249, -16, 249, -16, -14, 93,
	253, 249, 249, 249, 249, 249, 253, 249, 249, 249,
	248, -5, 109, 110, 111, 112, 113, 114, 248, 248,
	248, -36, 248, 248, 253, -16, -17, -17, 249, 249,
	249, 137, 176, -16, -16, -16, -16, -16, 248, 168,
	-16, -16, -16, 253, 182, 253, 182, 253, 249, 254,
	138, 108, 248, 250, 250, 250, 250, -2, -3, 251,
	-4, 122, 127, -1, 253, 49, 168, 132, 133, -37,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-23, -22, -22, 250, -34, -35, -41, 191, 249, -34,
	250, -2, 250, 250, 250, 250, -42, -42, -42, 250,
	250, 250, 250, 250, 250, 250, 250, 250, 250, 253,
	250, 250, 250, 250, 250, 226, -16, 250, 250, 250,
	253, 250, 250, 250, 250, 250, 250, 250, 250, 250,
	250, 250, 250, 250, 250, 250, 250, 250, 250, 250,
	250, 250, 250, 250, 250, 250, 250, 250, 250, 250,
	250, 250, 250, 250, 250, 250, 250, 250, 250, 250,
	250, 250, 250, 250, 250, 250, 250, 250, 250, 250,
	250, 250, 250, 250, 250, 250, -22, -22, 250, 250,
	250, 250, 250, 250, 250, 250, -22, -22, 250, 250,
	250, 250, 250, 250, 250, 250, 253, -33, -32, 65,
	228, 165, 179, 250, 250, 249, 250, 250, 250, -2,
	250, 250, 250, 250, 250, 250, 250, 250, 250, 249,
	250, -2, 250, -22, -22, 250, 250, 250, 250, 250,
	250, 250, 250, 250, 250, 250, 250, 250, 250, 250,
	-18, -20, -2, -20, -2, 249, 250, 250, 250, 250,
	-3, 254, 250, -4, 252, -49, -37, -2, 254, 254,
	254, 254, 254, 254, 254, 254, 254, 254, 250, 250,
	250, 254, -35, 250, -41, 254, 254, 250, 250, 250,
	-6, -5, -37, 250, -12, -11, -37, -23, 250, 250,
	250, 250, -15, 248, 254, -32, 250, -7, -40, 7,
	8, 9, 10, 11, 12, 13, 14, 15, 16, 17,
	18, 19, 20, 21, 22, 23, 24, 25, 26, 27,
	28, 29, 248, -31, 102, 70, 189, 250, 254, 250,
	254, 250, 250, 254, -23, 253, 254, 253, 254, -8,
	248, -45, -38, 99, 250, 250, 249, 254, 250, 250,
	250, 250, 250, 250, 250, 250, 250, 250, -18, 250,
	-41, 250, 250, -5, 254, 250, 250, 254, -11, 250,
	-22, 254, 248, 250, 250, 250, 228, 165, 179, 165,
	179, 179, 250, 250, 250, 250, -2, 250, -2, 250,
	250, -53, -38, -46, 248, 254, 250, 250, 250, 250,
	250, -40, 248, -31, 248, -31, -31, 254, 254, -54,
	256, 250, 250, 165, 179, 179, 179, 250, 250, 248,
	-31, -31, -31, 179, -31,
}
var yyDef = []int{

	0, -2, 1, 0, 0, 263, 265, 0, 0, 2,
	0, 0, 252, 0, 0, 20, 300, 261, 262, 0,
	253, 0, 236, 0, 61, 0, 0, 21, 22, 23,
	0, 251, 53, 0, 62, 0, 0, 0, 0, 67,
	0, 0, 252, 237, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 252, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 144, 145, 146, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 43, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	266, 60, 0, 0, 0, 63, 68, 64, 65, 0,
	54, 264, 0, 0, 294, 295, 296, 297, 298, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 252, 49, 50, 252, 0, 0, 0,
	0, 0, 0, 291, 292, 293, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 258, 259,
	260, 0, 0, 0, 30, 31, 32, 33, 34, 35,
	0, 0, 37, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 252,
	252, 0, 0, 0, 0, 0, 0, 0, 0, 252,
	252, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 12, 13, 14, 15, 16, 17, 0, 0,
	0, 0, 0, 0, 0, 0, 252, 252, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 51, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 69, 70, 71, 72, 0, 0, 0,
	11, 25, 0, 27, 0, 3, 4, 5, 6, 7,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 87, 0, 254, 0, 0, 290, 0,
	90, 0, 92, 93, 94, 95, 0, 0, 0, 99,
	100, 101, 102, 103, 104, 105, 106, 107, 108, 0,
	110, 111, 112, 113, 114, 0, 0, 117, 118, 119,
	0, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 0, 0, 180, 181,
	182, 183, 184, 185, 186, 187, 0, 0, 190, 191,
	192, 193, 194, 195, 196, 197, 0, 0, 0, 20,
	0, 0, 0, 199, 200, 0, 202, 203, 204, 0,
	206, 207, 208, 209, 210, 211, 212, 213, 214, 0,
	216, 0, 218, 0, 0, 221, 222, 223, 224, 225,
	226, 227, 228, 229, 230, 231, 232, 233, 234, 235,
	0, 0, 0, 0, 0, 0, 299, 303, 0, 66,
	0, 0, 8, 10, 0, 26, 55, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 51, 85,
	86, 0, 255, 256, 0, 0, 0, 96, 97, 98,
	0, 0, 0, 116, 0, 0, 252, 42, 178, 179,
	188, 189, 0, 0, 0, 0, 249, 0, 0, 267,
	268, 269, 270, 271, 272, 273, 274, 275, 276, 277,
	278, 279, 280, 281, 282, 283, 284, 285, 286, 287,
	288, 289, 0, 248, 238, 239, 240, 201, 0, 215,
	0, 219, 220, 0, 0, 0, 0, 0, 0, 0,
	29, 301, 305, 0, 9, 73, 24, 28, 74, 75,
	76, 77, 78, 79, 80, 81, 82, 83, 0, 88,
	0, 89, 91, 0, 0, 18, 115, 38, 0, 39,
	41, 44, 0, 45, 198, 250, 0, 0, 0, 0,
	0, 0, 205, 217, 48, 52, 0, 57, 0, 59,
	36, 304, 307, 302, 0, 0, 257, 19, 109, 40,
	46, 0, 0, 244, 0, 246, 247, 0, 0, 306,
	308, 47, 84, 0, 0, 0, 0, 56, 58, 0,
	242, 243, 245, 0, 241,
}
var yyTok1 = []int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 251, 3, 3, 3, 3, 3, 3,
	3, 3, 255, 3, 3, 3, 3, 252, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 250,
	3, 3, 3, 3, 256, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 253, 3, 254,
}
var yyTok2 = []int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249,
}
var yyTok3 = []int{
	0,
}

/*	parser for yacc output	*/

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c > 0 && c <= len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return fmt.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return fmt.Sprintf("state-%v", s)
}

func yylex1(lex yyLexer, lval *yySymType) int {
	c := 0
	char := lex.Lex(lval)
	if char <= 0 {
		c = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		c = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			c = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		c = yyTok3[i+0]
		if c == char {
			c = yyTok3[i+1]
			goto out
		}
	}

out:
	if c == 0 {
		c = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		fmt.Printf("lex %U %s\n", uint(char), yyTokname(c))
	}
	return c
}

func yyParse(yylex *lex) int {
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, yyMaxDepth)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yychar := -1
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		fmt.Printf("char %v in %v\n", yyTokname(yychar), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yychar < 0 {
		yychar = yylex1(yylex, &yylval)
	}
	yyn += yychar
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yychar { /* valid shift */
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yychar < 0 {
			yychar = yylex1(yylex, &yylval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yychar {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error("syntax error")
			Nerrs++
			if yyDebug >= 1 {
				fmt.Printf("%s", yyStatname(yystate))
				fmt.Printf("saw %s\n", yyTokname(yychar))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift onn "error", pop stack */
				if yyDebug >= 2 {
					fmt.Printf("error recovery pops state %d, uncovers %d\n",
						yyS[yyp].yys, yyS[yyp-1].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				fmt.Printf("error recovery discards %s\n", yyTokname(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}
			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		fmt.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 3:
		{
			yyVAL.acl_name = NewAclName(AclNameAny, "")
		}
	case 4:
		{
			yyVAL.acl_name = NewAclName(AclNameNone, "")
		}
	case 5:
		{
			yyVAL.acl_name = NewAclName(AclNameLocalhost, "")
		}
	case 6:
		{
			yyVAL.acl_name = NewAclName(AclNameLocalnets, "")
		}
	case 7:
		{
			yyVAL.acl_name = NewAclName(AclNameDomainName, yyS[yypt-0].str)
		}
	case 8:
		{
			yyVAL.address_match_list = append(yyVAL.address_match_list, yyS[yypt-1].address_match_list_element)
		}
	case 9:
		{
			yyVAL.address_match_list = append(yyVAL.address_match_list, yyS[yypt-1].address_match_list_element)
		}
	case 10:
		{
			yyVAL.address_match_list_element.Neg = true
		}
	case 11:
		yyVAL.address_match_list_element = yyS[yypt-0].address_match_list_element
	case 12:
		{
			yyVAL.alg = SessionKeyAlg_HMAC_MD5
		}
	case 13:
		{
			yyVAL.alg = SessionKeyAlg_HMAC_SHA1
		}
	case 14:
		{
			yyVAL.alg = SessionKeyAlg_HMAC_SHA224
		}
	case 15:
		{
			yyVAL.alg = SessionKeyAlg_HMAC_SHA256
		}
	case 16:
		{
			yyVAL.alg = SessionKeyAlg_HMAC_SHA384
		}
	case 17:
		{
			yyVAL.alg = SessionKeyAlg_HMAC_SHA512
		}
	case 18:
		{
			yyVAL.alg_list = []SessionKeyAlg{yyS[yypt-1].alg}
		}
	case 19:
		{
			yyVAL.alg_list = append(yyVAL.alg_list, yyS[yypt-1].alg)
		}
	case 20:
		{
			yyVAL.class = ZoneClassInternet
		}
	case 21:
		{
			yyVAL.class = ZoneClassInternet
		}
	case 22:
		{
			yyVAL.class = ZoneClassHesiod
		}
	case 23:
		{
			yyVAL.class = ZoneClassChaosnet
		}
	case 24:
		{
			todo("address_match_list_element2a")
		}
	case 25:
		{
			todo("address_match_list_element2b")
		}
	case 26:
		{
			todo("address_match_list_element2c")
		}
	case 27:
		{
			yyVAL.address_match_list_element.Item = yyS[yypt-0].acl_name
		}
	case 28:
		{
			todo("address_match_list_element2e")
		}
	case 29:
		{
			if data, err := strutil.Base64Decode([]byte(yyS[yypt-0].str)); err != nil {
				panic(err)
			} else {
				yyVAL.data = data
			}
		}
	case 30:
		{
			yyVAL.dialup = DialupNo
		}
	case 31:
		{
			yyVAL.dialup = DialupYes
		}
	case 32:
		{
			yyVAL.dialup = DialupNotify
		}
	case 33:
		{
			yyVAL.dialup = DialupRefresh
		}
	case 34:
		{
			yyVAL.dialup = DialupPassive
		}
	case 35:
		{
			yyVAL.dialup = DialupNotifyPassive
		}
	case 36:
		{
			if yyS[yypt-3].u64 != 3 {
				panic(fmt.Errorf(`DNSKEY invalid protocol number "%d", must be "3"`, yyS[yypt-3].u64))
			}

			yyVAL.dnskey = rr.NewDNSKEY(uint16(yyS[yypt-4].u64), rr.AlgorithmType(yyS[yypt-2].u64), yyS[yypt-1].data)
		}
	case 37:
		yyVAL.str = yyS[yypt-0].str
	case 38:
		{
			yyVAL.dual_stack_servers = DualStackServers{yyS[yypt-3].pip_port, yyS[yypt-1].dual_stack_server_list}
		}
	case 39:
		{
			yyVAL.dual_stack_server_list = []DualStackServer{yyS[yypt-1].dual_stack_server}
		}
	case 40:
		{
			yyVAL.dual_stack_server_list = append(yyS[yypt-2].dual_stack_server_list, yyS[yypt-1].dual_stack_server)
		}
	case 41:
		{
			yyVAL.dual_stack_server = DualStackServer{yyS[yypt-1].str, nil, yyS[yypt-0].pip_port}
		}
	case 42:
		{
			yyVAL.dual_stack_server = DualStackServer{"", yyS[yypt-0].ip_and_opt_port.IP, yyS[yypt-0].ip_and_opt_port.Port}
		}
	case 43:
		{
			yyVAL.exclude = []string{}
		}
	case 44:
		{
			yyVAL.exclude = yyS[yypt-1].exclude
		}
	case 45:
		{
			yyVAL.exclude = []string{yyS[yypt-1].str}
		}
	case 46:
		{
			yyVAL.exclude = append(yyS[yypt-2].exclude, yyS[yypt-1].str)
		}
	case 47:
		{
			yyVAL.str = yyS[yypt-1].str
		}
	case 48:
		{
			yyVAL.ips = yyS[yypt-2].ips
		}
	case 49:
		yyVAL.ip = yyS[yypt-0].ip
	case 50:
		{
			yyVAL.ip = nil
		}
	case 51:
		{
			yyVAL.ips = nil
		}
	case 52:
		{
			yyVAL.ips = append(yyVAL.ips, yyS[yypt-1].ip_and_opt_port)
		}
	case 53:
		{
			if yyS[yypt-0].u64 > math.MaxUint16 {
				panic(fmt.Errorf("invalid port number %d", yyS[yypt-0].u64))
			}
			yyVAL.ip_port = IPPort(yyS[yypt-0].u64)
		}
	case 54:
		{
			yyVAL.ip_and_opt_port = IPAndPort{yyS[yypt-1].ip, yyS[yypt-0].pip_port}
		}
	case 56:
		{
			yyVAL.listen_on = ListenOn{NewIPPort(yyS[yypt-4].ip_port), yyS[yypt-2].address_match_list}
		}
	case 57:
		{
			yyVAL.listen_on = ListenOn{nil, yyS[yypt-2].address_match_list}
		}
	case 58:
		{
			yyVAL.listen_on = ListenOn{NewIPPort(yyS[yypt-4].ip_port), yyS[yypt-2].address_match_list}
		}
	case 59:
		{
			yyVAL.listen_on = ListenOn{nil, yyS[yypt-2].address_match_list}
		}
	case 60:
		{
			yyVAL.managedKey = NewManagedKey(yyS[yypt-2].str, yyS[yypt-0].dnskey)
		}
	case 61:
		{
			yyVAL.managedKeys = ManagedKeys{yyS[yypt-0].managedKey}
		}
	case 62:
		{
			yyVAL.managedKeys = append(yyVAL.managedKeys, yyS[yypt-0].managedKey)
		}
	case 63:
		{
			yyVAL.masters = Masters{yyS[yypt-4].str, yyS[yypt-3].pip_port, yyS[yypt-1].masters_items}
		}
	case 64:
		{
			yyVAL.masters_item = Master{Include: yyS[yypt-1].str}
		}
	case 65:
		{
			yyVAL.masters_item = Master{IPAndPort: yyS[yypt-1].ip_and_opt_port}
		}
	case 66:
		{
			yyVAL.masters_item = Master{IPAndPort: yyS[yypt-3].ip_and_opt_port, Key: yyS[yypt-1].str}
		}
	case 67:
		{
			yyVAL.masters_items = []Master{yyS[yypt-0].masters_item}
		}
	case 68:
		{
			yyVAL.masters_items = append(yyS[yypt-1].masters_items, yyS[yypt-0].masters_item)
		}
	case 69:
		{
			yylex.conf.Options.ACacheCleaningInterval = int(yyS[yypt-1].u64)
		}
	case 70:
		{
			yylex.conf.Options.ACacheEnable = yyS[yypt-1].flag
		}
	case 71:
		{
			yylex.conf.Options.AdditionalFromAuth = yyS[yypt-1].flag
		}
	case 72:
		{
			yylex.conf.Options.AdditionalFromCache = yyS[yypt-1].flag
		}
	case 73:
		{
			yylex.conf.Options.AllowNotify = yyS[yypt-2].address_match_list
		}
	case 74:
		{
			yylex.conf.Options.AllowQuery = yyS[yypt-2].address_match_list
		}
	case 75:
		{
			yylex.conf.Options.AllowQueryCache = yyS[yypt-2].address_match_list
		}
	case 76:
		{
			yylex.conf.Options.AllowQueryCacheOn = yyS[yypt-2].address_match_list
		}
	case 77:
		{
			yylex.conf.Options.AllowRecursion = yyS[yypt-2].address_match_list
		}
	case 78:
		{
			yylex.conf.Options.AllowRecursionOn = yyS[yypt-2].address_match_list
		}
	case 79:
		{
			yylex.conf.Options.AllowQueryOn = yyS[yypt-2].address_match_list
		}
	case 80:
		{
			yylex.conf.Options.AllowUpdate = yyS[yypt-2].address_match_list
		}
	case 81:
		{
			yylex.conf.Options.AllowUpdateForwarding = yyS[yypt-2].address_match_list
		}
	case 82:
		{
			yylex.conf.Options.AllowV6Synthesis = yyS[yypt-2].address_match_list
		}
	case 83:
		{
			yylex.conf.Options.AllowTransfer = yyS[yypt-2].address_match_list
		}
	case 84:
		{
			yylex.conf.Options.AlsoNotify = append(IPs{yyS[yypt-4].ip_and_opt_port}, yyS[yypt-2].ips...)
		}
	case 85:
		{
			ip := yyS[yypt-2].ip
			if ip != nil && ip.To4() == nil {
				yylex.Error(fmt.Sprintf("invalid IP address %q", ip))
			}
			yylex.conf.Options.AltTransferSource = &IPAndPort{ip, yyS[yypt-1].pip_port}
		}
	case 86:
		{
			ip := yyS[yypt-2].ip
			if ip != nil && ip.To16() == nil {
				yylex.Error(fmt.Sprintf("invalid IP address %q", ip))
			}
			yylex.conf.Options.AltTransferSourceV6 = &IPAndPort{ip, yyS[yypt-1].pip_port}
		}
	case 87:
		{
			yylex.conf.Options.AuthNXDomain = yyS[yypt-1].flag
		}
	case 88:
		{
			yylex.conf.Options.AvoidV4UdpPorts = yyS[yypt-2].port_list
		}
	case 89:
		{
			yylex.conf.Options.AvoidV6UdpPorts = yyS[yypt-2].port_list
		}
	case 90:
		{
			yylex.conf.Options.BindKeysFile = yyS[yypt-1].str
		}
	case 91:
		{
			yylex.conf.Options.Blackhole = yyS[yypt-2].address_match_list
		}
	case 92:
		{
			yylex.conf.Options.CheckDupRecs = yyS[yypt-1].wfi
		}
	case 93:
		{
			yylex.conf.Options.CheckIntegrity = yyS[yypt-1].flag
		}
	case 94:
		{
			yylex.conf.Options.CheckMx = yyS[yypt-1].wfi
		}
	case 95:
		{
			yylex.conf.Options.CheckMxCname = yyS[yypt-1].wfi
		}
	case 96:
		{
			yylex.conf.Options.CheckNamesMaster = yyS[yypt-1].wfi
		}
	case 97:
		{
			yylex.conf.Options.CheckNamesSlave = yyS[yypt-1].wfi
		}
	case 98:
		{
			yylex.conf.Options.CheckNamesResponse = yyS[yypt-1].wfi
		}
	case 99:
		{
			yylex.conf.Options.CheckSibling = yyS[yypt-1].flag
		}
	case 100:
		{
			yylex.conf.Options.CheckSrvCname = yyS[yypt-1].wfi
		}
	case 101:
		{
			yylex.conf.Options.CheckWildcard = yyS[yypt-1].flag
		}
	case 102:
		{
			yylex.conf.Options.CleaningInterval = int(yyS[yypt-1].u64)
		}
	case 103:
		{
			yylex.conf.Options.ClientsPerQuery = int(yyS[yypt-1].u64)
		}
	case 104:
		{
			yylex.conf.Options.Coresize = yyS[yypt-1].sizeSpec
		}
	case 105:
		{
			yylex.conf.Options.Datasize = yyS[yypt-1].sizeSpec
		}
	case 106:
		{
			yylex.conf.Options.DeallocateOnExit = yyS[yypt-1].flag
		}
	case 107:
		{
			yylex.conf.Options.Dialup = yyS[yypt-1].dialup
		}
	case 108:
		{
			yylex.conf.Options.Directory = yyS[yypt-1].str
		}
	case 109:
		{
			yylex.conf.Options.DisableAlgorithms = append(yylex.conf.Options.DisableAlgorithms, DisabledAlgorithms{yyS[yypt-4].str, yyS[yypt-2].alg_list})
		}
	case 110:
		{
			yylex.conf.Options.DisableEmptyZone = append(yylex.conf.Options.DisableEmptyZone, yyS[yypt-1].str)
		}
	case 111:
		{
			yylex.conf.Options.DNSSecAcceptExpired = yyS[yypt-1].flag
		}
	case 112:
		{
			yylex.conf.Options.DNSSecDnsKeyKskOnly = yyS[yypt-1].flag
		}
	case 113:
		{
			yylex.conf.Options.DNSSecEnable = yyS[yypt-1].flag
		}
	case 114:
		{
			yylex.conf.Options.DNSSecLookaside = append(yylex.conf.Options.DNSSecLookaside, DNSSecDelegation{})
		}
	case 115:
		{
			yylex.conf.Options.DNSSecLookaside = append(yylex.conf.Options.DNSSecLookaside, DNSSecDelegation{yyS[yypt-3].str, yyS[yypt-1].str})
		}
	case 116:
		{
			yylex.conf.Options.DNSSecMustBeSecure = append(yylex.conf.Options.DNSSecMustBeSecure, DNSSecMustBeSecured{yyS[yypt-2].str, yyS[yypt-1].flag})
		}
	case 117:
		{
			yylex.conf.Options.DNSSecSecure2Insecure = yyS[yypt-1].flag
		}
	case 118:
		{
			yylex.conf.Options.DNSSecValidation = yyS[yypt-1].flag
		}
	case 119:
		{
			yylex.conf.Options.DualStackServers = yyS[yypt-1].dual_stack_servers
		}
	case 120:
		{
			yylex.conf.Options.DumpFile = yyS[yypt-1].str
		}
	case 121:
		{
			x := yyS[yypt-1].u64
			switch {
			case x < 1024:
				x = 1024
			case x > 4096:
				x = 4096
			}
			yylex.conf.Options.EdnsUdpSize = int(x)
		}
	case 122:
		{
			yylex.conf.Options.EmptyContact = yyS[yypt-1].str
		}
	case 123:
		{
			yylex.conf.Options.EmptyServer = yyS[yypt-1].str
		}
	case 124:
		{
			yylex.conf.Options.EmptyZonesEnable = yyS[yypt-1].flag
		}
	case 125:
		{
			yylex.conf.Options.FakeIQuery = yyS[yypt-1].flag
		}
	case 126:
		{
			yylex.conf.Options.FetchGlue = yyS[yypt-1].flag
		}
	case 127:
		{
			yylex.conf.Options.Files = yyS[yypt-1].sizeSpec
		}
	case 128:
		{
			yylex.conf.Options.Forward = ForwardFirst
		}
	case 129:
		{
			yylex.conf.Options.Forward = ForwardOnly
		}
	case 130:
		{
			yylex.conf.Options.HasOldClients = yyS[yypt-1].flag
		}
	case 131:
		{
			x := yyS[yypt-1].u64
			switch {
			case x > 40320:
				x = 40320
			}
			yylex.conf.Options.HeartbeatInterval = int(x)
		}
	case 132:
		{
			yylex.conf.Options.Hostname = yyS[yypt-1].str
		}
	case 133:
		{
			yylex.conf.Options.Hostname = ""
		}
	case 134:
		{
			yylex.conf.Options.HostStatistics = yyS[yypt-1].flag
		}
	case 135:
		{
			yylex.conf.Options.HostStatisticsMax = yyS[yypt-1].u64
		}
	case 136:
		{
			x := yyS[yypt-1].u64
			switch {
			case x > 40320:
				x = 40320
			}
			yylex.conf.Options.InterfaceInterval = int(x)
		}
	case 137:
		{
			x := yyS[yypt-1].u64
			switch {
			case x > 40320:
				x = 40320
			}
			yylex.conf.Options.StatisticsInterval = int(x)
		}
	case 138:
		{
			switch yyS[yypt-1].flag {
			case false:
				yylex.conf.Options.IxfrFromDiffs = IxfrFromDiffsNo
			case true:
				yylex.conf.Options.IxfrFromDiffs = IxfrFromDiffsYes
			}
		}
	case 139:
		{
			yylex.conf.Options.IxfrFromDiffs = IxfrFromDiffsMaster
		}
	case 140:
		{
			yylex.conf.Options.IxfrFromDiffs = IxfrFromDiffsSlave
		}
	case 141:
		{
			yylex.conf.Options.KeyDirectory = yyS[yypt-1].str
		}
	case 142:
		{
			x := yyS[yypt-1].u64
			switch {
			case x > 1800:
				x = 1800
			}
			yylex.conf.Options.LameTtl = int(x)
		}
	case 143:
		{
			yylex.conf.Options.FlushZonesOnShutdown = yyS[yypt-1].flag
		}
	case 144:
		{
			yylex.conf.Options.Forwarders = append(yylex.conf.Options.Forwarders, yyS[yypt-0].ips...)
		}
	case 145:
		{
			yylex.conf.Options.ListenOn = append(yylex.conf.Options.ListenOn, yyS[yypt-0].listen_on)
		}
	case 146:
		{
			yylex.conf.Options.ListenOnV6 = append(yylex.conf.Options.ListenOnV6, yyS[yypt-0].listen_on)
		}
	case 147:
		{
			yylex.conf.Options.MaintainIxfrBase = yyS[yypt-1].flag
		}
	case 148:
		{
			yylex.conf.Options.MemStats = yyS[yypt-1].flag
		}
	case 149:
		{
			yylex.conf.Options.MasterFileFormat = MasterFileFormatText
		}
	case 150:
		{
			yylex.conf.Options.MasterFileFormat = MasterFileFormatRaw
		}
	case 151:
		{
			yylex.conf.Options.MatchMappedAddresses = yyS[yypt-1].flag
		}
	case 152:
		{
			yylex.conf.Options.MaxACacheSize = yyS[yypt-1].sizeSpec
		}
	case 153:
		{
			x := yyS[yypt-1].sizeSpec
			switch {
			case x == SizeSpecDefault || x > 0 && x < 1<<21:
				x = 1 << 21
			case x == SizeSpecUnlimited:
				x = math.MaxUint32
			}
			yylex.conf.Options.MaxCacheSize = x
		}
	case 154:
		{
			yylex.conf.Options.MaxCacheTtl = int(yyS[yypt-1].u64)
		}
	case 155:
		{
			yylex.conf.Options.MaxClientsPerQuery = int(yyS[yypt-1].u64)
		}
	case 156:
		{
			yylex.conf.Options.MaxIxfrLogSize = yyS[yypt-1].u64
		}
	case 157:
		{
			yylex.conf.Options.MaxJournalSize = yyS[yypt-1].sizeSpec
		}
	case 158:
		{
			x := yyS[yypt-1].u64
			switch {
			case x > 3600*24*7:
				x = 3600 * 24 * 7
			}
			yylex.conf.Options.MaxNCacheTtl = int(x)
		}
	case 159:
		{
			yylex.conf.Options.MaxRefreshTime = yyS[yypt-1].u64
		}
	case 160:
		{
			yylex.conf.Options.MinRefreshTime = yyS[yypt-1].u64
		}
	case 161:
		{
			yylex.conf.Options.MaxRetryTime = yyS[yypt-1].u64
		}
	case 162:
		{
			yylex.conf.Options.MinRetryTime = yyS[yypt-1].u64
		}
	case 163:
		{
			x := yyS[yypt-1].u64
			switch {
			case x < 512:
				x = 512
			case x > 4096:
				x = 4096
			}
			yylex.conf.Options.MaxUdpSize = int(x)
		}
	case 164:
		{
			x := yyS[yypt-1].u64
			switch {
			case x > 40320:
				x = 40320
			}
			yylex.conf.Options.MaxXferIdleIn = int(x)
		}
	case 165:
		{
			x := yyS[yypt-1].u64
			switch {
			case x > 40320:
				x = 40320
			}
			yylex.conf.Options.MaxXferIdleOut = int(x)
		}
	case 166:
		{
			x := yyS[yypt-1].u64
			switch {
			case x > 40320:
				x = 40320
			}
			yylex.conf.Options.MaxXferTimeIn = int(x)
		}
	case 167:
		{
			x := yyS[yypt-1].u64
			switch {
			case x > 40320:
				x = 40320
			}
			yylex.conf.Options.MaxXferTimeOut = int(x)
		}
	case 168:
		{
			yylex.conf.Options.MemStatsFile = yyS[yypt-1].str
		}
	case 169:
		{
			yylex.conf.Options.MinimalResponses = yyS[yypt-1].flag
		}
	case 170:
		{
			yylex.conf.Options.MinRoots = int(yyS[yypt-1].u64)
		}
	case 171:
		{
			yylex.conf.Options.MultiMaster = yyS[yypt-1].flag
		}
	case 172:
		{
			yylex.conf.Options.MultipleCnames = yyS[yypt-1].flag
		}
	case 173:
		{
			yylex.conf.Options.NamedXfer = yyS[yypt-1].str
		}
	case 174:
		{
			switch yyS[yypt-1].flag {
			case false:
				yylex.conf.Options.Notify = NotifyNo
			case true:
				yylex.conf.Options.Notify = NotifyYes
			}
		}
	case 175:
		{
			yylex.conf.Options.Notify = NotifyMasterOnly
		}
	case 176:
		{
			yylex.conf.Options.Notify = NotifyExplicit
		}
	case 177:
		{
			yylex.conf.Options.NotifyDelay = int(yyS[yypt-1].u64)
		}
	case 178:
		{
			ip := yyS[yypt-2].ip
			if ip != nil && ip.To4() == nil {
				yylex.Error(fmt.Sprintf("invalid IP address %q", ip))
			}
			yylex.conf.Options.NotifySource = &IPAndPort{ip, yyS[yypt-1].pip_port}
		}
	case 179:
		{
			ip := yyS[yypt-2].ip
			if ip != nil && ip.To16() == nil {
				yylex.Error(fmt.Sprintf("invalid IP address %q", ip))
			}
			yylex.conf.Options.NotifySourceV6 = &IPAndPort{ip, yyS[yypt-1].pip_port}
		}
	case 180:
		{
			yylex.conf.Options.NotifyToSoa = yyS[yypt-1].flag
		}
	case 181:
		{
			yylex.conf.Options.PIDFile = yyS[yypt-1].str
		}
	case 182:
		{
			yylex.conf.Options.Port = yyS[yypt-1].ip_port
		}
	case 184:
		{
			x := rr.TYPE_A
			yylex.conf.Options.PreferredGlue = &x
		}
	case 185:
		{
			x := rr.TYPE_AAAA
			yylex.conf.Options.PreferredGlue = &x
		}
	case 186:
		{
			v := yyS[yypt-1].flag
			yylex.conf.Options.ProvideIxfr = &v
		}
	case 187:
		{
			v := yyS[yypt-1].flag
			yylex.conf.Options.Querylog = &v
		}
	case 188:
		{
			ip := yyS[yypt-2].ip
			if ip != nil && ip.To4() == nil {
				yylex.Error(fmt.Sprintf("invalid IP address %q", ip))
			}
			yylex.conf.Options.QuerySource = &IPAndPort{ip, yyS[yypt-1].pip_port}
		}
	case 189:
		{
			ip := yyS[yypt-2].ip
			if ip != nil && ip.To16() == nil {
				yylex.Error(fmt.Sprintf("invalid IP address %q", ip))
			}
			yylex.conf.Options.QuerySourceV6 = &IPAndPort{ip, yyS[yypt-1].pip_port}
		}
	case 190:
		{
			yylex.conf.Options.RandomDevice = yyS[yypt-1].str
		}
	case 191:
		{
			yylex.conf.Options.Recursion = yyS[yypt-1].flag
		}
	case 192:
		{
			yylex.conf.Options.RecursingFile = yyS[yypt-1].str
		}
	case 193:
		{
			yylex.conf.Options.RecursiveClients = int(yyS[yypt-1].u64)
		}
	case 194:
		{
			v := yyS[yypt-1].flag
			yylex.conf.Options.RequestIxfr = &v
		}
	case 195:
		{
			x := yyS[yypt-1].u64
			switch {
			case x < 128:
				x = 128
			}
			yylex.conf.Options.ReservedSockets = int(yyS[yypt-1].u64)
		}
	case 196:
		{
			yylex.conf.Options.Rfc2308Type1 = yyS[yypt-1].flag
		}
	case 197:
		{
			ex := yyS[yypt-1].exclude
			yylex.conf.Options.RootDelegationOnly = &ex
		}
	case 198:
		{
			yylex.conf.Options.RRSetOrder = yyS[yypt-2].order_specs
		}
	case 199:
		{
			yylex.conf.Options.SerialQueries = yyS[yypt-1].u64
		}
	case 200:
		{
			x := yyS[yypt-1].u64
			switch {
			case x > 3660:
				x = 3660
			}
			yylex.conf.Options.SigValidityIntervalBase = int(x)
			yylex.conf.Options.SigValidityIntervalExpireHours = int(x) * 24 / 4
		}
	case 201:
		{
			x := yyS[yypt-2].u64
			switch {
			case x > 3660:
				x = 3660
			}
			yylex.conf.Options.SigValidityIntervalBase = int(x)
			x2 := yyS[yypt-1].u64
			if x > 7 {
				x2 *= 24
			}
			yylex.conf.Options.SigValidityIntervalExpireHours = int(x2)
		}
	case 202:
		{
			yylex.conf.Options.SigSigningNodes = int(yyS[yypt-1].u64)
		}
	case 203:
		{
			yylex.conf.Options.SigSigningSignatures = int(yyS[yypt-1].u64)
		}
	case 204:
		{
			yylex.conf.Options.SigSigningType = int(yyS[yypt-1].u64)
		}
	case 205:
		{
			yylex.conf.Options.Sortlist = yyS[yypt-2].address_match_list
		}
	case 206:
		{
			yylex.conf.Options.TcpClients = int(yyS[yypt-1].u64)
		}
	case 207:
		{
			x := yyS[yypt-1].u64
			switch {
			case x < 3:
				x = 3
			}
			yylex.conf.Options.TcpListenQueue = int(x)
		}
	case 208:
		{
			yylex.conf.Options.SerialQueryRate = int(yyS[yypt-1].u64)
		}
	case 209:
		{
			yylex.conf.Options.ServerId = yyS[yypt-1].str
		}
	case 210:
		{
			yylex.conf.Options.SessionKeyAlg = yyS[yypt-1].alg
		}
	case 211:
		{
			yylex.conf.Options.SessionKeyFile = yyS[yypt-1].str
		}
	case 212:
		{
			yylex.conf.Options.SessionKeyName = yyS[yypt-1].str
		}
	case 213:
		{
			yylex.conf.Options.StatsFile = yyS[yypt-1].str
		}
	case 214:
		{
			yylex.conf.Options.Stacksize = yyS[yypt-1].sizeSpec
		}
	case 215:
		{
			yylex.conf.Options.TDHKeyName, yylex.conf.Options.TDHKeyTag = yyS[yypt-2].str, yyS[yypt-1].u64
		}
	case 216:
		{
			yylex.conf.Options.TKeyDomain = yyS[yypt-1].str
		}
	case 217:
		{
			yylex.conf.Options.Topology = yyS[yypt-2].address_match_list
		}
	case 218:
		{
			yylex.conf.Options.TreatCrAsSpace = yyS[yypt-1].flag
		}
	case 219:
		{
			ip := yyS[yypt-2].ip
			if ip != nil && ip.To4() == nil {
				yylex.Error(fmt.Sprintf("invalid IP address %q", ip))
			}
			yylex.conf.Options.TransferSource = &IPAndPort{ip, yyS[yypt-1].pip_port}
		}
	case 220:
		{
			ip := yyS[yypt-2].ip
			if ip != nil && ip.To16() == nil {
				yylex.Error(fmt.Sprintf("invalid IP address %q", ip))
			}
			yylex.conf.Options.TransferSourceV6 = &IPAndPort{ip, yyS[yypt-1].pip_port}
		}
	case 221:
		{
			yylex.conf.Options.TransfersIn = int(yyS[yypt-1].u64)
		}
	case 222:
		{
			yylex.conf.Options.TransfersOut = int(yyS[yypt-1].u64)
		}
	case 223:
		{
			yylex.conf.Options.TransfersPerNS = int(yyS[yypt-1].u64)
		}
	case 224:
		{
			yylex.conf.Options.TransferFormat = TransferFormatManyAnswers
		}
	case 225:
		{
			yylex.conf.Options.TransferFormat = TransferFormatOneAnswer
		}
	case 226:
		{
			yylex.conf.Options.TryTcpRefresh = yyS[yypt-1].flag
		}
	case 227:
		{
			yylex.conf.Options.UpdateCheckKsk = yyS[yypt-1].flag
		}
	case 228:
		{
			yylex.conf.Options.UseAltTransferSource = yyS[yypt-1].flag
		}
	case 229:
		{
			yylex.conf.Options.UseIdPool = yyS[yypt-1].flag
		}
	case 230:
		{
			yylex.conf.Options.UseIxfr = yyS[yypt-1].flag
		}
	case 231:
		{
			yylex.conf.Options.Version = yyS[yypt-1].str
		}
	case 232:
		{
			yylex.conf.Options.Version = ""
		}
	case 233:
		{
			yylex.conf.Options.ZeroNoSoaTtl = yyS[yypt-1].flag
		}
	case 234:
		{
			yylex.conf.Options.ZeroNoSoaTtlCache = yyS[yypt-1].flag
		}
	case 235:
		{
			yylex.conf.Options.ZoneStats = yyS[yypt-1].flag
		}
	case 238:
		{
			yyVAL.ordering = OrderingFixed
		}
	case 239:
		{
			yyVAL.ordering = OrderingCyclic
		}
	case 240:
		{
			yyVAL.ordering = OrderingRandom
		}
	case 241:
		{
			cls, typ, name := yyS[yypt-6].class, yyS[yypt-4].typ, yyS[yypt-2].str
			yyVAL.order_spec = OrderSpec{&cls, &typ, &name, yyS[yypt-0].ordering}
		}
	case 242:
		{
			cls, typ := yyS[yypt-4].class, yyS[yypt-2].typ
			yyVAL.order_spec = OrderSpec{&cls, &typ, nil, yyS[yypt-0].ordering}
		}
	case 243:
		{
			cls, name := yyS[yypt-4].class, yyS[yypt-2].str
			yyVAL.order_spec = OrderSpec{&cls, nil, &name, yyS[yypt-0].ordering}
		}
	case 244:
		{
			cls := yyS[yypt-2].class
			yyVAL.order_spec = OrderSpec{&cls, nil, nil, yyS[yypt-0].ordering}
		}
	case 245:
		{
			typ, name := yyS[yypt-4].typ, yyS[yypt-2].str
			yyVAL.order_spec = OrderSpec{nil, &typ, &name, yyS[yypt-0].ordering}
		}
	case 246:
		{
			typ := yyS[yypt-2].typ
			yyVAL.order_spec = OrderSpec{nil, &typ, nil, yyS[yypt-0].ordering}
		}
	case 247:
		{
			name := yyS[yypt-2].str
			yyVAL.order_spec = OrderSpec{nil, nil, &name, yyS[yypt-0].ordering}
		}
	case 248:
		{
			yyVAL.order_spec = OrderSpec{nil, nil, nil, yyS[yypt-0].ordering}
		}
	case 249:
		{
			yyVAL.order_specs = []OrderSpec{yyS[yypt-1].order_spec}
		}
	case 250:
		{
			yyVAL.order_specs = append(yyS[yypt-2].order_specs, yyS[yypt-1].order_spec)
		}
	case 251:
		{
			yyVAL.pip_port = NewIPPort(yyS[yypt-0].ip_port)
		}
	case 252:
		{
			yyVAL.pip_port = nil
		}
	case 253:
		yyVAL.pip_port = yyS[yypt-0].pip_port
	case 254:
		yyVAL.port_list = yyS[yypt-0].port_list
	case 255:
		{
			yyVAL.port_list = append(yyVAL.port_list, yyS[yypt-0].port_list...)
		}
	case 256:
		{
			yyVAL.port_list = []uint16{yyS[yypt-1].u16, yyS[yypt-1].u16}
		}
	case 257:
		{
			yyVAL.port_list = []uint16{yyS[yypt-2].u16, yyS[yypt-1].u16}
		}
	case 258:
		{
			yyVAL.sizeSpec = SizeSpec(yyS[yypt-0].u64)
		}
	case 259:
		{
			yyVAL.sizeSpec = SizeSpecDefault
		}
	case 260:
		{
			yyVAL.sizeSpec = SizeSpecUnlimited
		}
	case 261:
		{
			buf, err := ioutil.ReadFile(yyS[yypt-1].str)
			if err != nil {
				panic(err)
			}
			yylex.include(yyS[yypt-1].str, strings.NewReader(string(buf)))
		}
	case 262:
		{
			yylex.conf.Masters = append(yylex.conf.Masters, yyS[yypt-1].masters)
		}
	case 263:
		{
			if yylex.sawOptions {
				panic(fmt.Errorf(`"options" statement may appear only once in a configuration file`))
			}

			yylex.sawOptions = true
		}
	case 265:
		{
			yylex.conf.Zones = append(yylex.conf.Zones, yyS[yypt-0].zone)
		}
	case 266:
		{
			yylex.conf.ManagedKeys = append(yylex.conf.ManagedKeys, yyS[yypt-2].managedKeys...)
		}
	case 267:
		{
			yyVAL.typ = rr.TYPE_A
		}
	case 268:
		{
			yyVAL.typ = rr.TYPE_AAAA
		}
	case 269:
		{
			yyVAL.typ = rr.TYPE_CNAME
		}
	case 270:
		{
			yyVAL.typ = rr.TYPE_DNSKEY
		}
	case 271:
		{
			yyVAL.typ = rr.TYPE_DS
		}
	case 272:
		{
			yyVAL.typ = rr.TYPE_HINFO
		}
	case 273:
		{
			yyVAL.typ = rr.TYPE_MB
		}
	case 274:
		{
			yyVAL.typ = rr.TYPE_MD
		}
	case 275:
		{
			yyVAL.typ = rr.TYPE_MF
		}
	case 276:
		{
			yyVAL.typ = rr.TYPE_MG
		}
	case 277:
		{
			yyVAL.typ = rr.TYPE_MINFO
		}
	case 278:
		{
			yyVAL.typ = rr.TYPE_MR
		}
	case 279:
		{
			yyVAL.typ = rr.TYPE_MX
		}
	case 280:
		{
			yyVAL.typ = rr.TYPE_NS
		}
	case 281:
		{
			yyVAL.typ = rr.TYPE_NSEC
		}
	case 282:
		{
			yyVAL.typ = rr.TYPE_NSEC3
		}
	case 283:
		{
			yyVAL.typ = rr.TYPE_NSEC3PARAM
		}
	case 284:
		{
			yyVAL.typ = rr.TYPE_NULL
		}
	case 285:
		{
			yyVAL.typ = rr.TYPE_PTR
		}
	case 286:
		{
			yyVAL.typ = rr.TYPE_RRSIG
		}
	case 287:
		{
			yyVAL.typ = rr.TYPE_SOA
		}
	case 288:
		{
			yyVAL.typ = rr.TYPE_TXT
		}
	case 289:
		{
			yyVAL.typ = rr.TYPE_WKS
		}
	case 290:
		{
			x := yyS[yypt-0].u64
			if x < 0 || x > math.MaxUint32 {
				yylex.Error(fmt.Sprintf("Number out of range %d", x))
			}
			yyVAL.u16 = uint16(x)
		}
	case 291:
		{
			yyVAL.wfi = WarnFailIgnore_Warn
		}
	case 292:
		{
			yyVAL.wfi = WarnFailIgnore_Fail
		}
	case 293:
		{
			yyVAL.wfi = WarnFailIgnore_Ignore
		}
	case 294:
		{
			yyVAL.flag = true
		}
	case 295:
		{
			yyVAL.flag = true
		}
	case 296:
		{
			yyVAL.flag = false
		}
	case 297:
		{
			yyVAL.flag = false
		}
	case 298:
		{
			switch yyS[yypt-0].u64 {
			default:
				panic(fmt.Errorf(`expected "1" or "0"`))
			case 0, 1:
				yyVAL.flag = yyS[yypt-0].u64 != 0
			}
		}
	case 299:
		{
			yyVAL.zone = yyS[yypt-2].zone
			yyVAL.zone.Name = yyS[yypt-5].str
			yyVAL.zone.Class = yyS[yypt-4].class
		}
	case 300:
		yyVAL.str = yyS[yypt-0].str
	case 301:
		{
			yyVAL.zone = yyS[yypt-0].zone
			yyVAL.zone.Type = ZoneTypeMaster
		}
	case 302:
		{
			yyVAL.zone = yyS[yypt-0].zone
			yyVAL.zone.File = yyS[yypt-1].str
			yyVAL.zone.Type = ZoneTypeHint
		}
	case 303:
		{
			yyVAL.zone = NewZone(yylex.conf.Options)
		}
	case 304:
		{
			// nop
		}
	case 305:
		{
			yyVAL.zone = NewZone(yylex.conf.Options)
		}
	case 306:
		{
			// nop
		}
	case 307:
		{
			yyS[yypt-1].zone.File = yyS[yypt-0].str
		}
	case 308:
		{
			todo("hint_zone_item")
		}
	}
	goto yystack /* stack new state and value */
}
