// Copyright (c) 2011 CZ.NIC z.s.p.o. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// blame: jnml, labs.nic.cz

// WARNING: If this file is parser.go then DO NOT EDIT.
// parser.go is generated by goyacc from parser.y (see the Makefile).

package zone

import (
	"fmt"
	"github.com/cznic/dns"
	"github.com/cznic/dns/rr"
	"github.com/cznic/strutil"
	"math"
	"net"
)

type rrHead struct {
	ttl   int32
	class rr.Class
}

type yySymType struct {
	yys    int
	alg    rr.AlgorithmType
	class  rr.Class
	data   []byte
	str    string
	u64    uint64
	int    int
	float  float64
	uint   uint
	ip     net.IP
	rrh    rrHead
	rrData dns.Wirer
	rr     *rr.RR
	typ    rr.Type
	types  []rr.Type
}

const tA = 57346
const tA6 = 57347
const tAAAA = 57348
const tAFSDB = 57349
const tAPL = 57350
const tATMA = 57351
const tBACKSLASH_HASH = 57352
const tBLANK_START = 57353
const tCDS = 57354
const tCERT = 57355
const tCNAME = 57356
const tDHCID = 57357
const tDLR_TTL = 57358
const tDNAME = 57359
const tDNSKEY = 57360
const tDNS_PORT = 57361
const tDS = 57362
const tEID = 57363
const tGID = 57364
const tGPOS = 57365
const tHINFO = 57366
const tHIP = 57367
const tIPSECKEY = 57368
const tISDN = 57369
const tKEY = 57370
const tKX = 57371
const tLOC = 57372
const tMB = 57373
const tMD = 57374
const tMF = 57375
const tMG = 57376
const tMINFO = 57377
const tMR = 57378
const tMX = 57379
const tNAPTR = 57380
const tNIMLOC = 57381
const tNINFO = 57382
const tNS = 57383
const tNSAP = 57384
const tNSAP_PTR = 57385
const tNSEC = 57386
const tNSEC3 = 57387
const tNSEC3PARAM = 57388
const tNULL = 57389
const tNXT = 57390
const tPTR = 57391
const tPX = 57392
const tRKEY = 57393
const tRP = 57394
const tRRSIG = 57395
const tRT = 57396
const tSIG = 57397
const tSMTP_PORT = 57398
const tSOA = 57399
const tSPF = 57400
const tSRV = 57401
const tSSHFP = 57402
const tTALINK = 57403
const tTCP_PROTO = 57404
const tTKEY = 57405
const tTSIG = 57406
const tTXT = 57407
const tUDP_PROTO = 57408
const tUID = 57409
const tUINFO = 57410
const tUNSPEC = 57411
const tWKS = 57412
const tX25 = 57413
const tHEX = 57414
const t0xHEX = 57415
const tBASE32EXT = 57416
const tBASE64 = 57417
const tDOMAIN_NAME = 57418
const tSRV_DOMAIN = 57419
const tQSTR = 57420
const tFLOAT = 57421
const tCLASS = 57422
const tIPV4 = 57423
const tIPV6 = 57424
const tDECADIC = 57425

var yyToknames = []string{
	"tA",
	"tA6",
	"tAAAA",
	"tAFSDB",
	"tAPL",
	"tATMA",
	"tBACKSLASH_HASH",
	"tBLANK_START",
	"tCDS",
	"tCERT",
	"tCNAME",
	"tDHCID",
	"tDLR_TTL",
	"tDNAME",
	"tDNSKEY",
	"tDNS_PORT",
	"tDS",
	"tEID",
	"tGID",
	"tGPOS",
	"tHINFO",
	"tHIP",
	"tIPSECKEY",
	"tISDN",
	"tKEY",
	"tKX",
	"tLOC",
	"tMB",
	"tMD",
	"tMF",
	"tMG",
	"tMINFO",
	"tMR",
	"tMX",
	"tNAPTR",
	"tNIMLOC",
	"tNINFO",
	"tNS",
	"tNSAP",
	"tNSAP_PTR",
	"tNSEC",
	"tNSEC3",
	"tNSEC3PARAM",
	"tNULL",
	"tNXT",
	"tPTR",
	"tPX",
	"tRKEY",
	"tRP",
	"tRRSIG",
	"tRT",
	"tSIG",
	"tSMTP_PORT",
	"tSOA",
	"tSPF",
	"tSRV",
	"tSSHFP",
	"tTALINK",
	"tTCP_PROTO",
	"tTKEY",
	"tTSIG",
	"tTXT",
	"tUDP_PROTO",
	"tUID",
	"tUINFO",
	"tUNSPEC",
	"tWKS",
	"tX25",
	"tHEX",
	"t0xHEX",
	"tBASE32EXT",
	"tBASE64",
	"tDOMAIN_NAME",
	"tSRV_DOMAIN",
	"tQSTR",
	"tFLOAT",
	"tCLASS",
	"tIPV4",
	"tIPV6",
	"tDECADIC",
}
var yyStatenames = []string{}

const yyEofCode = 1
const yyErrCode = 2
const yyMaxDepth = 200

var yyExca = []int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 379,
	1, 103,
	11, 103,
	16, 103,
	76, 103,
	77, 103,
	84, 103,
	85, 103,
	-2, 168,
}

const yyNprod = 271
const yyPrivate = 57344

var yyTokenNames []string
var yyStates []string

const yyLast = 394

var yyAct = []int{

	320, 116, 344, 353, 362, 140, 24, 294, 17, 269,
	259, 333, 334, 260, 307, 299, 300, 16, 266, 267,
	354, 336, 331, 329, 380, 187, 188, 189, 190, 192,
	191, 349, 107, 193, 194, 195, 196, 345, 197, 198,
	348, 199, 200, 201, 202, 203, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 117, 204, 214, 215, 216,
	217, 218, 219, 220, 221, 222, 223, 224, 226, 225,
	227, 228, 230, 231, 229, 232, 233, 119, 234, 235,
	236, 237, 238, 364, 239, 240, 241, 160, 242, 243,
	244, 245, 246, 25, 295, 7, 18, 18, 154, 255,
	4, 153, 106, 143, 315, 284, 251, 359, 337, 304,
	254, 253, 252, 151, 155, 156, 148, 147, 390, 389,
	161, 378, 163, 368, 341, 311, 309, 303, 292, 287,
	159, 173, 174, 162, 282, 278, 166, 271, 249, 184,
	183, 182, 177, 175, 247, 172, 171, 170, 178, 179,
	169, 168, 167, 158, 256, 157, 350, 371, 258, 250,
	5, 6, 176, 340, 109, 377, 317, 23, 3, 8,
	318, 181, 13, 262, 375, 261, 273, 346, 316, 268,
	270, 15, 285, 276, 19, 67, 150, 68, 69, 27,
	146, 145, 274, 275, 70, 71, 279, 347, 72, 73,
	152, 74, 376, 313, 100, 101, 144, 387, 102, 75,
	76, 77, 78, 79, 80, 81, 82, 83, 84, 85,
	248, 280, 86, 87, 88, 142, 89, 90, 91, 141,
	92, 93, 386, 94, 95, 96, 97, 2, 98, 9,
	185, 99, 14, 21, 139, 277, 103, 138, 137, 136,
	135, 104, 105, 370, 134, 133, 132, 131, 286, 281,
	369, 130, 272, 129, 283, 128, 127, 126, 125, 288,
	124, 123, 165, 122, 296, 290, 305, 306, 297, 12,
	11, 10, 270, 263, 302, 120, 291, 308, 319, 118,
	323, 289, 325, 310, 115, 312, 114, 113, 314, 322,
	361, 257, 327, 112, 111, 324, 110, 1, 351, 326,
	293, 328, 330, 264, 335, 301, 164, 342, 121, 343,
	338, 339, 363, 379, 186, 149, 321, 26, 22, 20,
	66, 65, 64, 60, 356, 352, 108, 59, 358, 58,
	57, 56, 55, 355, 54, 357, 53, 366, 365, 180,
	52, 51, 50, 49, 48, 47, 46, 45, 44, 43,
	42, 41, 40, 39, 38, 37, 36, 372, 63, 374,
	373, 62, 61, 35, 382, 383, 381, 384, 34, 33,
	32, 31, 30, 29, 28, 385, 265, 388, 332, 298,
	391, 392, 367, 360,
}
var yyPact = []int{

	84, 84, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	14, -1000, -1000, -1000, 13, -1000, -1000, -1000, -1000, -1000,
	-1000, 13, -1000, 181, 22, 14, -1000, 105, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -28, -1000, -28, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 39, 38, -1000, -1000, 35, -1000, -1000, -1000, -1000,
	20, 16, -28, -28, 79, 77, 4, -1000, -28, 4,
	-28, -1000, 4, 76, 75, 74, 71, 70, 69, -28,
	-28, 67, 89, 66, 4, 4, 161, 65, -28, 63,
	-1000, 21, -28, -1000, 62, 4, 27, 34, 33, 32,
	18, -1000, -28, -1000, -1000, -1000, -28, -1000, -1000, 4,
	-1000, 4, 4, -1000, -70, 4, 4, -1000, -1000, -1000,
	-1000, 61, -1000, -1000, -28, -1000, -1000, -1000, 4, 4,
	-1000, -28, -1000, -1000, 59, 4, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 4, 58,
	4, 26, -1000, -1000, -1000, -1000, -28, 53, 4, -1000,
	-1000, 4, -1000, 52, 11, 14, -1000, -1000, 4, -75,
	4, -1000, 51, 31, -28, -28, -1000, 50, -1000, 4,
	49, 4, -1000, -1000, 25, 104, -28, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 11, -63, -64, -81, -1000, -1000,
	-1000, -1000, -65, -1000, 30, -1000, -1000, -1000, 91, 48,
	14, -1000, 14, -46, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -44, 81, -1000, -1000, -1000, -1000, 11, -67, 4,
	-67, 4, -1000, -1000, -1000, -1000, -28, 29, -1000, -1000,
	-1000, -1000, 0, 0, -46, -1000, -1000, 47, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 83, 0, -1000, -1000, 0, -46, 146, -1000, 45,
	-60, -1000, -28, -28, -46, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -46, -1000, 43, 42, -1000, -1000,
	-1000, -1000, -1000,
}
var yyPgo = []int{

	0, 10, 393, 0, 14, 392, 6, 8, 389, 388,
	386, 384, 383, 382, 381, 380, 379, 378, 373, 372,
	371, 368, 366, 365, 364, 363, 362, 361, 360, 359,
	358, 357, 356, 355, 354, 353, 352, 351, 350, 349,
	346, 344, 342, 341, 340, 339, 337, 336, 333, 332,
	331, 330, 172, 329, 328, 327, 167, 326, 325, 5,
	324, 323, 322, 318, 316, 9, 315, 314, 313, 312,
	311, 7, 4, 13, 1, 2, 310, 309, 308, 307,
	237, 306, 304, 303, 301, 300, 299, 297, 296, 294,
	291, 289, 287, 286, 285, 283, 281, 280, 279, 3,
	273, 272, 271, 270, 268, 267, 266, 265, 263, 262,
	261, 260, 257, 256, 255, 254, 253, 250, 249, 248,
	247, 245, 244, 243, 242, 240, 232, 229, 225, 221,
	220, 207, 206, 203, 200, 197, 191, 190, 186, 182,
	178, 177, 174,
}
var yyR1 = []int{

	0, 79, 79, 81, 11, 82, 12, 83, 84, 13,
	1, 85, 2, 3, 86, 57, 57, 87, 14, 88,
	15, 89, 16, 90, 17, 91, 18, 62, 72, 92,
	4, 93, 22, 94, 95, 23, 80, 96, 80, 97,
	80, 98, 80, 80, 80, 24, 76, 76, 77, 77,
	78, 78, 71, 70, 70, 68, 99, 99, 69, 69,
	10, 10, 10, 100, 63, 101, 64, 8, 8, 9,
	9, 65, 65, 66, 66, 67, 67, 102, 25, 103,
	26, 104, 27, 105, 28, 106, 29, 107, 30, 108,
	109, 31, 110, 111, 32, 112, 33, 113, 34, 114,
	35, 115, 116, 36, 117, 37, 118, 38, 39, 39,
	119, 40, 120, 121, 41, 122, 42, 123, 53, 55,
	124, 52, 54, 54, 54, 54, 54, 54, 54, 54,
	54, 54, 54, 54, 54, 54, 54, 54, 54, 54,
	54, 54, 54, 54, 54, 54, 54, 54, 54, 54,
	54, 54, 54, 54, 54, 54, 54, 54, 54, 54,
	54, 56, 56, 56, 56, 125, 126, 43, 127, 59,
	61, 61, 61, 60, 60, 60, 60, 60, 60, 60,
	60, 60, 60, 60, 60, 60, 60, 60, 60, 60,
	60, 60, 60, 60, 60, 60, 60, 60, 60, 60,
	60, 60, 60, 60, 60, 60, 60, 60, 60, 60,
	60, 60, 60, 60, 60, 60, 60, 60, 60, 60,
	60, 60, 60, 60, 60, 60, 60, 60, 60, 60,
	60, 60, 60, 128, 129, 44, 130, 131, 45, 132,
	133, 46, 134, 135, 47, 136, 48, 6, 49, 58,
	58, 137, 19, 20, 21, 21, 73, 74, 7, 75,
	138, 139, 141, 50, 140, 140, 142, 142, 5, 5,
	51,
}
var yyR2 = []int{

	0, 1, 2, 0, 3, 0, 3, 0, 0, 5,
	1, 0, 2, 2, 0, 2, 2, 0, 6, 0,
	3, 0, 3, 0, 6, 0, 6, 1, 1, 0,
	2, 0, 6, 0, 0, 5, 1, 0, 3, 0,
	3, 0, 3, 2, 2, 5, 0, 2, 0, 2,
	0, 1, 3, 0, 2, 4, 0, 1, 0, 2,
	0, 1, 1, 0, 4, 0, 4, 1, 1, 1,
	1, 0, 2, 0, 2, 0, 2, 0, 3, 0,
	3, 0, 3, 0, 3, 0, 4, 0, 3, 0,
	0, 5, 0, 0, 9, 0, 3, 0, 3, 0,
	3, 0, 0, 9, 0, 6, 0, 3, 3, 1,
	0, 3, 0, 0, 6, 0, 4, 0, 2, 2,
	0, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 1, 1, 0, 0, 12, 0, 2,
	1, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 0, 5, 0, 0, 12, 0,
	0, 10, 0, 0, 7, 0, 5, 1, 2, 0,
	2, 0, 5, 3, 2, 3, 1, 1, 1, 1,
	0, 0, 0, 7, 1, 1, 1, 1, 0, 2,
	2,
}
var yyChk = []int{

	-1000, -79, -80, 84, 16, 76, 77, 11, 85, -80,
	-96, -97, -98, -52, -124, -52, -6, -7, 83, -52,
	-53, -123, -54, -56, -6, 80, -55, -56, -11, -12,
	-13, -14, -15, -16, -17, -18, -22, -23, -24, -25,
	-26, -27, -28, -29, -30, -31, -32, -33, -34, -35,
	-36, -37, -38, -40, -41, -42, -43, -44, -45, -46,
	-48, -19, -20, -21, -49, -50, -51, 4, 6, 7,
	13, 14, 17, 18, 20, 28, 29, 30, 31, 32,
	33, 34, 35, 36, 37, 38, 41, 42, 43, 45,
	46, 47, 49, 50, 52, 53, 54, 55, 57, 60,
	23, 24, 27, 65, 70, 71, 80, -6, -47, 59,
	-81, -82, -83, -87, -88, -89, -74, 83, -91, -74,
	-94, -63, -100, -102, -103, -104, -105, -106, -107, -108,
	-110, -112, -113, -114, -115, -117, -118, -119, -120, -122,
	-59, -127, -128, -59, -132, -136, -137, 78, 78, -58,
	-138, 78, -134, 81, 82, -74, -74, 76, 76, -73,
	83, -74, -73, -74, -64, -101, -73, 76, 76, 76,
	76, 76, 76, -74, -74, 76, 73, 76, -73, -73,
	-39, 10, 76, -74, 76, -125, -60, 4, 5, 6,
	7, 9, 8, 12, 13, 14, 15, 17, 18, 20,
	21, 22, 23, 24, 35, 25, 26, 27, 28, 29,
	30, 31, 32, 33, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 48, 47, 49, 50, 53,
	51, 52, 54, 55, 57, 58, 59, 60, 61, 63,
	64, 65, 67, 68, 69, 70, 71, -74, -130, 76,
	-73, 79, 78, 78, 78, 81, -74, -84, -74, -1,
	-73, -73, -1, -95, -68, -10, 88, 89, -73, -65,
	-73, 76, -109, -74, -73, -73, -74, -121, 76, -1,
	-129, -1, 76, -73, 79, -139, -74, 76, -1, -90,
	-73, -93, 76, -76, -71, 83, -7, -65, -8, 90,
	91, -66, -73, 76, 78, -74, -74, -4, -92, 76,
	-73, 76, -73, -133, -4, 79, -140, 62, 66, -74,
	-3, -57, -86, -3, -4, -3, -77, -71, -70, 86,
	-69, 86, -9, 92, 93, -67, 86, 78, -4, -4,
	72, 76, -6, -6, -75, 83, -141, -135, 84, 75,
	75, -78, -71, -99, 87, -73, -99, -73, -74, 78,
	-2, -85, -72, -62, 83, -72, -75, -5, 76, -111,
	-116, 74, -72, -72, -75, -142, 56, 19, 76, -61,
	84, -59, -74, -74, -75, -59, -126, -131, -75, 76,
	76, -3, -3,
}
var yyDef = []int{

	0, -2, 1, 36, 37, 39, 41, 120, 120, 2,
	0, 120, 117, 43, 0, 44, 38, 247, 258, 40,
	42, 0, 121, 0, 163, 164, 118, 0, 122, 123,
	124, 125, 126, 127, 128, 129, 130, 131, 132, 133,
	134, 135, 136, 137, 138, 139, 140, 141, 142, 143,
	144, 145, 146, 147, 148, 149, 150, 151, 152, 153,
	154, 155, 156, 157, 158, 159, 160, 3, 5, 7,
	17, 19, 21, 0, 25, 0, 33, 63, 77, 79,
	81, 83, 85, 87, 89, 92, 95, 97, 99, 101,
	104, 106, 110, 112, 115, 168, 233, 168, 239, 245,
	251, 0, 0, 249, 260, 0, 161, 162, 119, 242,
	0, 0, 0, 0, 0, 0, 0, 257, 0, 0,
	0, 65, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	165, 0, 0, 236, 0, 0, 0, 0, 254, 248,
	0, 270, 0, 4, 6, 8, 0, 20, 22, 0,
	256, 0, 0, 34, 60, 0, 71, 78, 80, 82,
	84, 0, 88, 90, 0, 96, 98, 100, 0, 0,
	107, 109, 111, 113, 0, 0, 169, 173, 174, 175,
	176, 177, 178, 179, 180, 181, 182, 183, 184, 185,
	186, 187, 188, 189, 190, 191, 192, 193, 194, 195,
	196, 197, 198, 199, 200, 201, 202, 203, 204, 205,
	206, 207, 208, 209, 210, 211, 212, 213, 214, 215,
	216, 217, 218, 219, 220, 221, 222, 223, 224, 225,
	226, 227, 228, 229, 230, 231, 232, 234, 0, 0,
	0, 0, 253, 255, 250, 261, 0, 0, 0, 23,
	10, 0, 31, 0, 46, 0, 61, 62, 71, 0,
	73, 86, 0, 0, 0, 0, 29, 0, 116, 0,
	0, 0, 240, 29, 0, 0, 0, 9, 14, 14,
	29, 14, 35, 45, 48, 53, 58, 0, 64, 67,
	68, 72, 75, 91, 0, 29, 29, 108, 0, 0,
	0, 235, 0, 0, 246, 252, 262, 264, 265, 243,
	18, 0, 0, 24, 26, 32, 47, 50, 56, 0,
	56, 0, 66, 69, 70, 74, 0, 0, 11, 105,
	30, 114, 0, 0, 0, 259, 268, 0, 13, 16,
	15, 49, 51, 52, 57, 54, 55, 59, 76, 93,
	102, 0, 0, 28, 27, 0, 0, 263, 244, 0,
	168, 12, 0, 0, 0, 269, 266, 267, 94, -2,
	170, 171, 166, 237, 0, 172, 0, 0, 241, 14,
	14, 167, 238,
}
var yyTok1 = []int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	84, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 88, 3, 89, 86, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 85, 3, 3, 3, 3, 92,
	3, 3, 3, 3, 3, 3, 3, 3, 90, 3,
	3, 3, 3, 91, 3, 3, 3, 93, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 87,
}
var yyTok2 = []int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83,
}
var yyTok3 = []int{
	0,
}

/*	parser for yacc output	*/

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c > 0 && c <= len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return fmt.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return fmt.Sprintf("state-%v", s)
}

func yylex1(lex yyLexer, lval *yySymType) int {
	c := 0
	char := lex.Lex(lval)
	if char <= 0 {
		c = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		c = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			c = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		c = yyTok3[i+0]
		if c == char {
			c = yyTok3[i+1]
			goto out
		}
	}

out:
	if c == 0 {
		c = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		fmt.Printf("lex %U %s\n", uint(char), yyTokname(c))
	}
	return c
}

func yyParse(yylex *lex) int {
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, yyMaxDepth)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yychar := -1
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		fmt.Printf("char %v in %v\n", yyTokname(yychar), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yychar < 0 {
		yychar = yylex1(yylex, &yylval)
	}
	yyn += yychar
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yychar { /* valid shift */
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yychar < 0 {
			yychar = yylex1(yylex, &yylval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yychar {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error("syntax error")
			Nerrs++
			if yyDebug >= 1 {
				fmt.Printf("%s", yyStatname(yystate))
				fmt.Printf("saw %s\n", yyTokname(yychar))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					fmt.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				fmt.Printf("error recovery discards %s\n", yyTokname(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}
			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		fmt.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 3:
		{
			yylex.begin(sc_IPV4)
		}
	case 4:
		{
			yyVAL.rrData = &rr.A{yyS[yypt-0].ip}
		}
	case 5:
		{
			yylex.begin(sc_IPV6)
		}
	case 6:
		{
			yyVAL.rrData = &rr.AAAA{yyS[yypt-0].ip}
		}
	case 7:
		{
			yylex.begin(sc_NUM)
		}
	case 8:
		{
			yylex.begin(sc_DOMAIN)
		}
	case 9:
		{
			yyVAL.rrData = &rr.AFSDB{uint16(yyS[yypt-2].uint), yyS[yypt-0].str}
		}
	case 10:
		{
			yyVAL.alg = rr.AlgorithmType(yyS[yypt-0].uint)
		}
	case 11:
		{
			yylex.begin(sc_BASE32EXT)
		}
	case 12:
		{
			yylex.begin(sc_INITIAL)
			if data, err := strutil.Base32ExtDecode([]byte(yyS[yypt-0].str)); err != nil {
				yylex.Error(err.Error())
			} else {
				yyVAL.data = data
			}
		}
	case 13:
		{
			yylex.begin(sc_INITIAL)
			if data, err := strutil.Base64Decode([]byte(yyS[yypt-1].str)); err != nil {
				yylex.Error(err.Error())
			} else {
				yyVAL.data = data
			}
		}
	case 14:
		{
			yylex.begin(sc_BASE64)
		}
	case 15:
		{
			yyVAL.str = yyS[yypt-0].str
		}
	case 16:
		{
			yyVAL.str += yyS[yypt-0].str
		}
	case 17:
		{
			yylex.begin(sc_NUM)
		}
	case 18:
		{
			yyVAL.rrData = &rr.CERT{rr.CertType(yyS[yypt-3].uint), uint16(yyS[yypt-2].uint), yyS[yypt-1].alg, yyS[yypt-0].data}
		}
	case 19:
		{
			yylex.begin(sc_DOMAIN)
		}
	case 20:
		{
			yyVAL.rrData = &rr.CNAME{yyS[yypt-0].str}
		}
	case 21:
		{
			yylex.begin(sc_DOMAIN)
		}
	case 22:
		{
			yyVAL.rrData = &rr.DNAME{yyS[yypt-0].str}
		}
	case 23:
		{
			if yyS[yypt-1].uint != 3 {
				yylex.Error(`protocol must be "3"`)
			}
		}
	case 24:
		{
			yyVAL.rrData = &rr.DNSKEY{uint16(yyS[yypt-4].uint), byte(yyS[yypt-3].uint), yyS[yypt-2].alg, yyS[yypt-0].data}
		}
	case 25:
		{
			yylex.begin(sc_NUM)
		}
	case 26:
		{
			if yyS[yypt-1].uint != 1 || len(yyS[yypt-0].data) != 20 {
				yylex.Error(`digest type must be "1" and digest must be exactly 20 bytes (40 hex chars)`)
			} else {
				yyVAL.rrData = &rr.DS{uint16(yyS[yypt-3].uint), rr.AlgorithmType(yyS[yypt-2].uint), rr.HashAlgorithm(yyS[yypt-1].uint), yyS[yypt-0].data}
			}
		}
	case 27:
		{
			if t, err := dns.String2Seconds(yyS[yypt-0].str); err != nil {
				yylex.Error(err.Error())
			} else {
				yyVAL.u64 = uint64(t)
			}
		}
	case 28:
		{
			yyVAL.uint = uint(yyS[yypt-0].u64)
		}
	case 29:
		{
			yylex.begin(sc_HEX)
		}
	case 30:
		{
			yyVAL.data = yyS[yypt-0].data
		}
	case 31:
		{
			if yyS[yypt-1].uint != 3 {
				yylex.Error(`protocol must be "3"`)
			}
		}
	case 32:
		{
			yyVAL.rrData = &rr.KEY{uint16(yyS[yypt-4].uint), byte(yyS[yypt-3].uint), yyS[yypt-2].alg, yyS[yypt-0].data}
		}
	case 33:
		{
			yylex.begin(sc_NUM)
		}
	case 34:
		{
			yylex.begin(sc_DOMAIN)
		}
	case 35:
		{
			yyVAL.rrData = &rr.KX{uint16(yyS[yypt-2].uint), yyS[yypt-0].str}
		}
	case 36:
		{
			yylex.begin(sc_INITIAL)
		}
	case 37:
		{
			yylex.begin(sc_NUM)
		}
	case 39:
		{
			yylex.begin(sc_RRHEAD)
		}
	case 40:
		{
			yyS[yypt-0].rr.Name = yyS[yypt-2].str
			if !yylex.rrHandler(yyS[yypt-0].rr) {
				goto ret0
			}
		}
	case 41:
		{
			yylex.begin(sc_RRHEAD)
		}
	case 42:
		{
			yyS[yypt-0].rr.Name = yyS[yypt-2].str
			if !yylex.rrHandler(yyS[yypt-0].rr) {
				goto ret0
			}
		}
	case 43:
		{
			if !yylex.rrHandler(yyS[yypt-0].rr) {
				goto ret0
			}
		}
	case 44:
		{
			yyS[yypt-0].rr.Name = "@"
			if !yylex.rrHandler(yyS[yypt-0].rr) {
				goto ret0
			}
		}
	case 45:
		{
			yyVAL.rrData = &rr.LOC{0, byte(yyS[yypt-0].uint >> 16), byte(yyS[yypt-0].uint >> 8), byte(yyS[yypt-0].uint), uint32(yyS[yypt-3].u64), uint32(yyS[yypt-2].u64), uint32(yyS[yypt-1].u64)}
		}
	case 46:
		{
			yyVAL.uint = uint((*rr.LOC)(nil).EncPrec(100))<<16 | uint((*rr.LOC)(nil).EncPrec(1000000))<<8 | uint((*rr.LOC)(nil).EncPrec(1000))

		}
	case 47:
		{
			yyVAL.uint = uint((*rr.LOC)(nil).EncPrec(yyS[yypt-1].u64))<<16 | yyS[yypt-0].uint
		}
	case 48:
		{
			yyVAL.uint = uint((*rr.LOC)(nil).EncPrec(1000000))<<8 | uint((*rr.LOC)(nil).EncPrec(1000))
		}
	case 49:
		{
			yyVAL.uint = uint((*rr.LOC)(nil).EncPrec(yyS[yypt-1].u64))<<8 | yyS[yypt-0].uint
		}
	case 50:
		{
			yyVAL.uint = uint((*rr.LOC)(nil).EncPrec(1000))
		}
	case 51:
		{
			yyVAL.uint = uint((*rr.LOC)(nil).EncPrec(yyS[yypt-0].u64))
		}
	case 52:
		{
			yyVAL.u64 = 100*yyS[yypt-2].u64 + yyS[yypt-1].u64
		}
	case 53:
		{
			yyVAL.u64 = 0
		}
	case 54:
		{
			for yyVAL.u64 = uint64(yyS[yypt-0].uint); yyVAL.u64 != 0 && yyVAL.u64 < 10; yyVAL.u64 *= 10 {
			}
		}
	case 55:
		{
			x := (int64(yyS[yypt-1].u64) + 100*int64(yyS[yypt-2].int)) * int64(yyS[yypt-3].int)
			yyVAL.u64 = uint64(x + 10000000)
		}
	case 58:
		{
			yyVAL.u64 = 0
		}
	case 59:
		{
			for yyVAL.u64 = uint64(yyS[yypt-0].uint); yyVAL.u64 != 0 && yyVAL.u64 < 10; yyVAL.u64 *= 10 {
			}
		}
	case 60:
		{
			yyVAL.int = 1
		}
	case 61:
		{
			yyVAL.int = 1
		}
	case 62:
		{
			yyVAL.int = -1
		}
	case 63:
		{
			yylex.begin(sc_NUM)
		}
	case 64:
		{
			ts := yyS[yypt-1].u64 % 60000
			m := (yyS[yypt-1].u64 / 60000) % 60
			yyVAL.u64 = uint64((*rr.LOC)(nil).EncDMTS(int(yyS[yypt-2].uint), int(m), int(ts), yyS[yypt-0].int != 0))
		}
	case 65:
		{
			yylex.begin(sc_NUM)
		}
	case 66:
		{
			ts := yyS[yypt-1].u64 % 60000
			m := (yyS[yypt-1].u64 / 60000) % 60
			yyVAL.u64 = uint64((*rr.LOC)(nil).EncDMTS(int(yyS[yypt-2].uint), int(m), int(ts), yyS[yypt-0].int != 0))
		}
	case 67:
		{
			yyVAL.int = 1
		}
	case 68:
		{
			yyVAL.int = 0
		}
	case 69:
		{
			yyVAL.int = 1
		}
	case 70:
		{
			yyVAL.int = 0
		}
	case 71:
		{
			yyVAL.u64 = 0
		}
	case 72:
		{
			yyVAL.u64 = 60000*uint64(yyS[yypt-1].uint) + yyS[yypt-0].u64
		}
	case 73:
		{
			yyVAL.u64 = 0
		}
	case 74:
		{
			yyVAL.u64 = 1000*uint64(yyS[yypt-1].uint) + yyS[yypt-0].u64
		}
	case 75:
		{
			yyVAL.u64 = 0
		}
	case 76:
		{
			for yyVAL.u64 = uint64(yyS[yypt-0].uint); yyVAL.u64 != 0 && yyVAL.u64 < 100; yyVAL.u64 *= 10 {
			}
		}
	case 77:
		{
			yylex.begin(sc_DOMAIN)
		}
	case 78:
		{
			yyVAL.rrData = &rr.MB{yyS[yypt-0].str}
		}
	case 79:
		{
			yylex.begin(sc_DOMAIN)
		}
	case 80:
		{
			yyVAL.rrData = &rr.MD{yyS[yypt-0].str}
		}
	case 81:
		{
			yylex.begin(sc_DOMAIN)
		}
	case 82:
		{
			yyVAL.rrData = &rr.MF{yyS[yypt-0].str}
		}
	case 83:
		{
			yylex.begin(sc_DOMAIN)
		}
	case 84:
		{
			yyVAL.rrData = &rr.MG{yyS[yypt-0].str}
		}
	case 85:
		{
			yylex.begin(sc_DOMAIN)
		}
	case 86:
		{
			yyVAL.rrData = &rr.MINFO{yyS[yypt-1].str, yyS[yypt-0].str}
		}
	case 87:
		{
			yylex.begin(sc_DOMAIN)
		}
	case 88:
		{
			yyVAL.rrData = &rr.MR{yyS[yypt-0].str}
		}
	case 89:
		{
			yylex.begin(sc_NUM)
		}
	case 90:
		{
			yylex.begin(sc_DOMAIN)
		}
	case 91:
		{
			yyVAL.rrData = &rr.MX{uint16(yyS[yypt-2].uint), yyS[yypt-0].str}
		}
	case 92:
		{
			yylex.begin(sc_NUM)
		}
	case 93:
		{
			yylex.begin(sc_ANY_DOMAIN)
		}
	case 94:
		{
			yyVAL.rrData = &rr.NAPTR{uint16(yyS[yypt-6].uint), uint16(yyS[yypt-5].uint), yyS[yypt-4].str, yyS[yypt-3].str, yyS[yypt-2].str, yyS[yypt-0].str}
		}
	case 95:
		{
			yylex.begin(sc_DOMAIN)
		}
	case 96:
		{
			yyVAL.rrData = &rr.NS{yyS[yypt-0].str}
		}
	case 97:
		{
			yylex.begin(sc_0XHEX)
		}
	case 98:
		{
			yyVAL.rrData = &rr.NSAP{yyS[yypt-0].data}
		}
	case 99:
		{
			yylex.begin(sc_DOMAIN)
		}
	case 100:
		{
			yyVAL.rrData = &rr.NSAP_PTR{yyS[yypt-0].str}
		}
	case 101:
		{
			yylex.begin(sc_NUM)
		}
	case 102:
		{
			yylex.begin(sc_TYPE)
		}
	case 103:
		{
			yyVAL.rrData = &rr.NSEC3{rr.NSEC3PARAM{rr.HashAlgorithm(yyS[yypt-6].uint), byte(yyS[yypt-5].uint), uint16(yyS[yypt-4].uint), yyS[yypt-3].data}, yyS[yypt-2].data, rr.TypesEncode(yyS[yypt-0].types)}
		}
	case 104:
		{
			yylex.begin(sc_NUM)
		}
	case 105:
		{
			yyVAL.rrData = &rr.NSEC3PARAM{rr.HashAlgorithm(yyS[yypt-3].uint), byte(yyS[yypt-2].uint), uint16(yyS[yypt-1].uint), yyS[yypt-0].data}
		}
	case 106:
		{
			yylex.begin(sc_NUM)
		}
	case 107:
		{
			yyVAL.rrData = yyS[yypt-0].rrData
		}
	case 108:
		{
			if int(yyS[yypt-1].uint) != len(yyS[yypt-0].data) {
				yylex.Error(fmt.Sprintf("mismatched data len: %d != %d", yyS[yypt-1].uint, len(yyS[yypt-0].data)))
			}
			yyVAL.rrData = &rr.NULL{yyS[yypt-0].data}
		}
	case 109:
		{
			yyVAL.rrData = &rr.NULL{[]byte{}}
		}
	case 110:
		{
			yylex.begin(sc_DOMAIN)
		}
	case 111:
		{
			yyVAL.rrData = &rr.PTR{yyS[yypt-0].str}
		}
	case 112:
		{
			yylex.begin(sc_NUM)
		}
	case 113:
		{
			yylex.begin(sc_DOMAIN)
		}
	case 114:
		{
			yyVAL.rrData = &rr.PX{uint16(yyS[yypt-3].uint), yyS[yypt-1].str, yyS[yypt-0].str}
		}
	case 115:
		{
			yylex.begin(sc_DOMAIN)
		}
	case 116:
		{
			yyVAL.rrData = &rr.RP{yyS[yypt-1].str, yyS[yypt-0].str}
		}
	case 117:
		{
			yylex.begin(sc_RRHEAD)
		}
	case 118:
		{
			yyVAL.rr = yyS[yypt-0].rr
		}
	case 119:
		{
			yyVAL.rr = &rr.RR{"", rr.TYPE_SRV, yyS[yypt-1].rrh.class, yyS[yypt-1].rrh.ttl, yyS[yypt-0].rrData}
		}
	case 120:
		{
			yylex.begin(sc_RRHEAD)
		}
	case 121:
		{
			yyVAL.rr = yyS[yypt-0].rr
		}
	case 122:
		{
			yyVAL.rr = &rr.RR{"", rr.TYPE_A, yyS[yypt-1].rrh.class, yyS[yypt-1].rrh.ttl, yyS[yypt-0].rrData}
		}
	case 123:
		{
			yyVAL.rr = &rr.RR{"", rr.TYPE_AAAA, yyS[yypt-1].rrh.class, yyS[yypt-1].rrh.ttl, yyS[yypt-0].rrData}
		}
	case 124:
		{
			yyVAL.rr = &rr.RR{"", rr.TYPE_AFSDB, yyS[yypt-1].rrh.class, yyS[yypt-1].rrh.ttl, yyS[yypt-0].rrData}
		}
	case 125:
		{
			yyVAL.rr = &rr.RR{"", rr.TYPE_CERT, yyS[yypt-1].rrh.class, yyS[yypt-1].rrh.ttl, yyS[yypt-0].rrData}
		}
	case 126:
		{
			yyVAL.rr = &rr.RR{"", rr.TYPE_CNAME, yyS[yypt-1].rrh.class, yyS[yypt-1].rrh.ttl, yyS[yypt-0].rrData}
		}
	case 127:
		{
			yyVAL.rr = &rr.RR{"", rr.TYPE_DNAME, yyS[yypt-1].rrh.class, yyS[yypt-1].rrh.ttl, yyS[yypt-0].rrData}
		}
	case 128:
		{
			yyVAL.rr = &rr.RR{"", rr.TYPE_DNSKEY, yyS[yypt-1].rrh.class, yyS[yypt-1].rrh.ttl, yyS[yypt-0].rrData}
		}
	case 129:
		{
			yyVAL.rr = &rr.RR{"", rr.TYPE_DS, yyS[yypt-1].rrh.class, yyS[yypt-1].rrh.ttl, yyS[yypt-0].rrData}
		}
	case 130:
		{
			yyVAL.rr = &rr.RR{"", rr.TYPE_KEY, yyS[yypt-1].rrh.class, yyS[yypt-1].rrh.ttl, yyS[yypt-0].rrData}
		}
	case 131:
		{
			yyVAL.rr = &rr.RR{"", rr.TYPE_KX, yyS[yypt-1].rrh.class, yyS[yypt-1].rrh.ttl, yyS[yypt-0].rrData}
		}
	case 132:
		{
			yyVAL.rr = &rr.RR{"", rr.TYPE_LOC, yyS[yypt-1].rrh.class, yyS[yypt-1].rrh.ttl, yyS[yypt-0].rrData}
		}
	case 133:
		{
			yyVAL.rr = &rr.RR{"", rr.TYPE_MB, yyS[yypt-1].rrh.class, yyS[yypt-1].rrh.ttl, yyS[yypt-0].rrData}
		}
	case 134:
		{
			yyVAL.rr = &rr.RR{"", rr.TYPE_MD, yyS[yypt-1].rrh.class, yyS[yypt-1].rrh.ttl, yyS[yypt-0].rrData}
		}
	case 135:
		{
			yyVAL.rr = &rr.RR{"", rr.TYPE_MF, yyS[yypt-1].rrh.class, yyS[yypt-1].rrh.ttl, yyS[yypt-0].rrData}
		}
	case 136:
		{
			yyVAL.rr = &rr.RR{"", rr.TYPE_MG, yyS[yypt-1].rrh.class, yyS[yypt-1].rrh.ttl, yyS[yypt-0].rrData}
		}
	case 137:
		{
			yyVAL.rr = &rr.RR{"", rr.TYPE_MINFO, yyS[yypt-1].rrh.class, yyS[yypt-1].rrh.ttl, yyS[yypt-0].rrData}
		}
	case 138:
		{
			yyVAL.rr = &rr.RR{"", rr.TYPE_MR, yyS[yypt-1].rrh.class, yyS[yypt-1].rrh.ttl, yyS[yypt-0].rrData}
		}
	case 139:
		{
			yyVAL.rr = &rr.RR{"", rr.TYPE_MX, yyS[yypt-1].rrh.class, yyS[yypt-1].rrh.ttl, yyS[yypt-0].rrData}
		}
	case 140:
		{
			yyVAL.rr = &rr.RR{"", rr.TYPE_NAPTR, yyS[yypt-1].rrh.class, yyS[yypt-1].rrh.ttl, yyS[yypt-0].rrData}
		}
	case 141:
		{
			yyVAL.rr = &rr.RR{"", rr.TYPE_NS, yyS[yypt-1].rrh.class, yyS[yypt-1].rrh.ttl, yyS[yypt-0].rrData}
		}
	case 142:
		{
			yyVAL.rr = &rr.RR{"", rr.TYPE_NSAP, yyS[yypt-1].rrh.class, yyS[yypt-1].rrh.ttl, yyS[yypt-0].rrData}
		}
	case 143:
		{
			yyVAL.rr = &rr.RR{"", rr.TYPE_NSAP_PTR, yyS[yypt-1].rrh.class, yyS[yypt-1].rrh.ttl, yyS[yypt-0].rrData}
		}
	case 144:
		{
			yyVAL.rr = &rr.RR{"", rr.TYPE_NSEC3, yyS[yypt-1].rrh.class, yyS[yypt-1].rrh.ttl, yyS[yypt-0].rrData}
		}
	case 145:
		{
			yyVAL.rr = &rr.RR{"", rr.TYPE_NSEC3PARAM, yyS[yypt-1].rrh.class, yyS[yypt-1].rrh.ttl, yyS[yypt-0].rrData}
		}
	case 146:
		{
			yyVAL.rr = &rr.RR{"", rr.TYPE_NULL, yyS[yypt-1].rrh.class, yyS[yypt-1].rrh.ttl, yyS[yypt-0].rrData}
		}
	case 147:
		{
			yyVAL.rr = &rr.RR{"", rr.TYPE_PTR, yyS[yypt-1].rrh.class, yyS[yypt-1].rrh.ttl, yyS[yypt-0].rrData}
		}
	case 148:
		{
			yyVAL.rr = &rr.RR{"", rr.TYPE_PX, yyS[yypt-1].rrh.class, yyS[yypt-1].rrh.ttl, yyS[yypt-0].rrData}
		}
	case 149:
		{
			yyVAL.rr = &rr.RR{"", rr.TYPE_RP, yyS[yypt-1].rrh.class, yyS[yypt-1].rrh.ttl, yyS[yypt-0].rrData}
		}
	case 150:
		{
			yyVAL.rr = &rr.RR{"", rr.TYPE_RRSIG, yyS[yypt-1].rrh.class, yyS[yypt-1].rrh.ttl, yyS[yypt-0].rrData}
		}
	case 151:
		{
			yyVAL.rr = &rr.RR{"", rr.TYPE_RT, yyS[yypt-1].rrh.class, yyS[yypt-1].rrh.ttl, yyS[yypt-0].rrData}
		}
	case 152:
		{
			yyVAL.rr = &rr.RR{"", rr.TYPE_SIG, yyS[yypt-1].rrh.class, yyS[yypt-1].rrh.ttl, yyS[yypt-0].rrData}
		}
	case 153:
		{
			yyVAL.rr = &rr.RR{"", rr.TYPE_SOA, yyS[yypt-1].rrh.class, yyS[yypt-1].rrh.ttl, yyS[yypt-0].rrData}
		}
	case 154:
		{
			yyVAL.rr = &rr.RR{"", rr.TYPE_SSHFP, yyS[yypt-1].rrh.class, yyS[yypt-1].rrh.ttl, yyS[yypt-0].rrData}
		}
	case 155:
		{
			yyVAL.rr = &rr.RR{"", rr.TYPE_GPOS, yyS[yypt-1].rrh.class, yyS[yypt-1].rrh.ttl, yyS[yypt-0].rrData}
		}
	case 156:
		{
			yyVAL.rr = &rr.RR{"", rr.TYPE_HINFO, yyS[yypt-1].rrh.class, yyS[yypt-1].rrh.ttl, yyS[yypt-0].rrData}
		}
	case 157:
		{
			yyVAL.rr = &rr.RR{"", rr.TYPE_ISDN, yyS[yypt-1].rrh.class, yyS[yypt-1].rrh.ttl, yyS[yypt-0].rrData}
		}
	case 158:
		{
			yyVAL.rr = &rr.RR{"", rr.TYPE_TXT, yyS[yypt-1].rrh.class, yyS[yypt-1].rrh.ttl, yyS[yypt-0].rrData}
		}
	case 159:
		{
			yyVAL.rr = &rr.RR{"", rr.TYPE_WKS, yyS[yypt-1].rrh.class, yyS[yypt-1].rrh.ttl, yyS[yypt-0].rrData}
		}
	case 160:
		{
			yyVAL.rr = &rr.RR{"", rr.TYPE_X25, yyS[yypt-1].rrh.class, yyS[yypt-1].rrh.ttl, yyS[yypt-0].rrData}
		}
	case 161:
		{
			yyVAL.rrh = rrHead{int32(yyS[yypt-1].int), yyS[yypt-0].class}
		}
	case 162:
		{
			yyVAL.rrh = rrHead{int32(yyS[yypt-0].int), yyS[yypt-1].class}
		}
	case 163:
		{
			yyVAL.rrh = rrHead{int32(yyS[yypt-0].int), 0}
		}
	case 164:
		{
			yyVAL.rrh = rrHead{-1, yyS[yypt-0].class}
		}
	case 165:
		{
			yylex.begin(sc_NUM)
		}
	case 166:
		{
			yylex.begin(sc_DOMAIN)
		}
	case 167:
		{
			yyVAL.rrData = &rr.RRSIG{yyS[yypt-10].typ, yyS[yypt-8].alg, byte(yyS[yypt-7].uint), int32(yyS[yypt-6].int), uint32(yyS[yypt-5].uint), uint32(yyS[yypt-4].uint), uint16(yyS[yypt-3].uint), yyS[yypt-1].str, yyS[yypt-0].data}
		}
	case 168:
		{
			yylex.begin(sc_TYPE)
		}
	case 169:
		{
			yyVAL.typ = yyS[yypt-0].typ
		}
	case 170:
		{
			yyVAL.types = nil
			yylex.begin(sc_INITIAL)
		}
	case 171:
		{
			yyVAL.types = []rr.Type{yyS[yypt-0].typ}
		}
	case 172:
		{
			yyVAL.types = append(yyVAL.types, yyS[yypt-0].typ)
		}
	case 173:
		{
			yyVAL.typ = rr.TYPE_A
		}
	case 174:
		{
			yyVAL.typ = rr.TYPE_A6
		}
	case 175:
		{
			yyVAL.typ = rr.TYPE_AAAA
		}
	case 176:
		{
			yyVAL.typ = rr.TYPE_AFSDB
		}
	case 177:
		{
			yyVAL.typ = rr.TYPE_ATMA
		}
	case 178:
		{
			yyVAL.typ = rr.TYPE_APL
		}
	case 179:
		{
			yyVAL.typ = rr.TYPE_CDS
		}
	case 180:
		{
			yyVAL.typ = rr.TYPE_CERT
		}
	case 181:
		{
			yyVAL.typ = rr.TYPE_CNAME
		}
	case 182:
		{
			yyVAL.typ = rr.TYPE_DHCID
		}
	case 183:
		{
			yyVAL.typ = rr.TYPE_DNAME
		}
	case 184:
		{
			yyVAL.typ = rr.TYPE_DNSKEY
		}
	case 185:
		{
			yyVAL.typ = rr.TYPE_DS
		}
	case 186:
		{
			yyVAL.typ = rr.TYPE_EID
		}
	case 187:
		{
			yyVAL.typ = rr.TYPE_GID
		}
	case 188:
		{
			yyVAL.typ = rr.TYPE_GPOS
		}
	case 189:
		{
			yyVAL.typ = rr.TYPE_HINFO
		}
	case 190:
		{
			yyVAL.typ = rr.TYPE_MINFO
		}
	case 191:
		{
			yyVAL.typ = rr.TYPE_HIP
		}
	case 192:
		{
			yyVAL.typ = rr.TYPE_IPSECKEY
		}
	case 193:
		{
			yyVAL.typ = rr.TYPE_ISDN
		}
	case 194:
		{
			yyVAL.typ = rr.TYPE_KEY
		}
	case 195:
		{
			yyVAL.typ = rr.TYPE_KX
		}
	case 196:
		{
			yyVAL.typ = rr.TYPE_LOC
		}
	case 197:
		{
			yyVAL.typ = rr.TYPE_MB
		}
	case 198:
		{
			yyVAL.typ = rr.TYPE_MD
		}
	case 199:
		{
			yyVAL.typ = rr.TYPE_MF
		}
	case 200:
		{
			yyVAL.typ = rr.TYPE_MR
		}
	case 201:
		{
			yyVAL.typ = rr.TYPE_MX
		}
	case 202:
		{
			yyVAL.typ = rr.TYPE_NAPTR
		}
	case 203:
		{
			yyVAL.typ = rr.TYPE_NIMLOC
		}
	case 204:
		{
			yyVAL.typ = rr.TYPE_NINFO
		}
	case 205:
		{
			yyVAL.typ = rr.TYPE_NS
		}
	case 206:
		{
			yyVAL.typ = rr.TYPE_NSAP
		}
	case 207:
		{
			yyVAL.typ = rr.TYPE_NSAP_PTR
		}
	case 208:
		{
			yyVAL.typ = rr.TYPE_NSEC
		}
	case 209:
		{
			yyVAL.typ = rr.TYPE_NSEC3
		}
	case 210:
		{
			yyVAL.typ = rr.TYPE_NSEC3PARAM
		}
	case 211:
		{
			yyVAL.typ = rr.TYPE_NXT
		}
	case 212:
		{
			yyVAL.typ = rr.TYPE_NULL
		}
	case 213:
		{
			yyVAL.typ = rr.TYPE_PTR
		}
	case 214:
		{
			yyVAL.typ = rr.TYPE_PX
		}
	case 215:
		{
			yyVAL.typ = rr.TYPE_RRSIG
		}
	case 216:
		{
			yyVAL.typ = rr.TYPE_RKEY
		}
	case 217:
		{
			yyVAL.typ = rr.TYPE_RP
		}
	case 218:
		{
			yyVAL.typ = rr.TYPE_RT
		}
	case 219:
		{
			yyVAL.typ = rr.TYPE_SIG
		}
	case 220:
		{
			yyVAL.typ = rr.TYPE_SOA
		}
	case 221:
		{
			yyVAL.typ = rr.TYPE_SPF
		}
	case 222:
		{
			yyVAL.typ = rr.TYPE_SRV
		}
	case 223:
		{
			yyVAL.typ = rr.TYPE_SSHFP
		}
	case 224:
		{
			yyVAL.typ = rr.TYPE_TALINK
		}
	case 225:
		{
			yyVAL.typ = rr.TYPE_TKEY
		}
	case 226:
		{
			yyVAL.typ = rr.TYPE_TSIG
		}
	case 227:
		{
			yyVAL.typ = rr.TYPE_TXT
		}
	case 228:
		{
			yyVAL.typ = rr.TYPE_UID
		}
	case 229:
		{
			yyVAL.typ = rr.TYPE_UINFO
		}
	case 230:
		{
			yyVAL.typ = rr.TYPE_UNSPEC
		}
	case 231:
		{
			yyVAL.typ = rr.TYPE_WKS
		}
	case 232:
		{
			yyVAL.typ = rr.TYPE_X25
		}
	case 233:
		{
			yylex.begin(sc_NUM)
		}
	case 234:
		{
			yylex.begin(sc_DOMAIN)
		}
	case 235:
		{
			yyVAL.rrData = &rr.RT{uint16(yyS[yypt-2].uint), yyS[yypt-0].str}
		}
	case 236:
		{
			yylex.begin(sc_NUM)
		}
	case 237:
		{
			yylex.begin(sc_DOMAIN)
		}
	case 238:
		{
			yyVAL.rrData = &rr.SIG{yyS[yypt-10].typ, yyS[yypt-8].alg, byte(yyS[yypt-7].uint), int32(yyS[yypt-6].int), uint32(yyS[yypt-5].uint), uint32(yyS[yypt-4].uint), uint16(yyS[yypt-3].uint), yyS[yypt-1].str, yyS[yypt-0].data}
		}
	case 239:
		{
			yylex.begin(sc_DOMAIN)
		}
	case 240:
		{
			yylex.begin(sc_NUM)
		}
	case 241:
		{
			yyVAL.rrData = &rr.SOA{yyS[yypt-7].str, yyS[yypt-6].str, uint32(yyS[yypt-4].uint), uint32(yyS[yypt-3].uint), uint32(yyS[yypt-2].uint), uint32(yyS[yypt-1].uint), uint32(yyS[yypt-0].uint)}
		}
	case 242:
		{
			yylex.begin(sc_NUM)
		}
	case 243:
		{
			yylex.begin(sc_DOMAIN)
		}
	case 244:
		{
			yyVAL.rrData = &rr.SRV{uint16(yyS[yypt-4].uint), uint16(yyS[yypt-3].uint), uint16(yyS[yypt-2].uint), yyS[yypt-0].str}
		}
	case 245:
		{
			yylex.begin(sc_NUM)
			println(1424000)
		}
	case 246:
		{
			yyVAL.rrData = &rr.SSHFP{rr.SSHFPAlgorithm(yyS[yypt-2].uint), rr.SSHFPType(yyS[yypt-1].uint), yyS[yypt-0].data}
		}
	case 247:
		yyVAL.int = yyS[yypt-0].int
	case 248:
		{
			yyVAL.rrData = &rr.TXT{yyS[yypt-0].str}
		}
	case 249:
		{
			yyVAL.str = ""
		}
	case 250:
		{
			yyVAL.str += yyS[yypt-0].str
		}
	case 251:
		{
			yylex.begin(sc_FLOAT)
		}
	case 252:
		{
			yyVAL.rrData = &rr.GPOS{yyS[yypt-2].float, yyS[yypt-1].float, yyS[yypt-0].float}
		}
	case 253:
		{
			yyVAL.rrData = &rr.HINFO{yyS[yypt-1].str, yyS[yypt-0].str}
		}
	case 254:
		{
			yyVAL.rrData = &rr.ISDN{yyS[yypt-0].str, ""}
		}
	case 255:
		{
			yyVAL.rrData = &rr.ISDN{yyS[yypt-1].str, yyS[yypt-0].str}
		}
	case 256:
		{
			if yyS[yypt-0].u64 > math.MaxUint8 {
				yylex.Error("number out of range")
				yyVAL.uint = math.MaxUint8
			} else {
				yyVAL.uint = uint(yyS[yypt-0].u64)
			}
		}
	case 257:
		{
			if yyS[yypt-0].u64 > math.MaxUint16 {
				yylex.Error("number out of range")
				yyVAL.uint = math.MaxUint16
			} else {
				yyVAL.uint = uint(yyS[yypt-0].u64)
			}
		}
	case 258:
		{
			if yyS[yypt-0].u64 > math.MaxInt32 {
				yylex.Error("number out of range")
				yyVAL.int = math.MaxInt32
			} else {
				yyVAL.int = int(yyS[yypt-0].u64)
			}
		}
	case 259:
		{
			if yyS[yypt-0].u64 > math.MaxUint32 {
				yylex.Error("number out of range")
				yyVAL.uint = math.MaxUint32
			} else {
				yyVAL.uint = uint(yyS[yypt-0].u64)
			}
		}
	case 260:
		{
			yylex.begin(sc_IPV4)
		}
	case 261:
		{
			yylex.begin(sc_PROTO)
		}
	case 262:
		{
			yylex.begin(sc_PORT)
		}
	case 263:
		{
			x := &rr.WKS{yyS[yypt-4].ip, rr.IP_Protocol(yyS[yypt-2].int), map[rr.IP_Port]struct{}{}}
			for i, v := range yyS[yypt-0].data {
				for j := 8 * i; v != 0; j, v = j+1, v>>1 {
					if v&1 != 0 {
						x.Ports[rr.IP_Port(j)] = struct{}{}
					}
				}
			}
			yyVAL.rrData = x
		}
	case 268:
		{
			yyVAL.data = make([]byte, 128)
		}
	case 269:
		{
			i := rr.IP_Port(yyS[yypt-0].int)
			yyVAL.data[i>>3] |= 1 << uint(i&7)
		}
	case 270:
		{
			yyVAL.rrData = &rr.X25{yyS[yypt-0].str}
		}
	}
	goto yystack /* stack new state and value */
}
