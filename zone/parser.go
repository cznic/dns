// Copyright (c) 2011 CZ.NIC z.s.p.o. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// blame: jnml, labs.nic.cz

// WARNING: If this file is parser.go then DO NOT EDIT.
// parser.go is generated by goyacc from parser.y (see the Makefile).

package zone

import (
	"fmt"
	"github.com/cznic/dns"
	"github.com/cznic/dns/rr"
	"github.com/cznic/strutil"
	"math"
	"net"
)

type rrHead struct {
	ttl   int32
	class rr.Class
}

type yySymType struct {
	yys    int
	alg    rr.AlgorithmType
	class  rr.Class
	data   []byte
	str    string
	u64    uint64
	int    int
	float  float64
	uint   uint
	ip     net.IP
	rrh    rrHead
	rrData dns.Wirer
	rr     *rr.RR
	typ    rr.Type
	types  []rr.Type
}

const tA = 57346
const tA6 = 57347
const tAAAA = 57348
const tAFSDB = 57349
const tAPL = 57350
const tATMA = 57351
const tBACKSLASH_HASH = 57352
const tBLANK_START = 57353
const tCDS = 57354
const tCERT = 57355
const tCNAME = 57356
const tDHCID = 57357
const tDLR_TTL = 57358
const tDNAME = 57359
const tDNSKEY = 57360
const tDNS_PORT = 57361
const tDS = 57362
const tEID = 57363
const tGID = 57364
const tGPOS = 57365
const tHINFO = 57366
const tHIP = 57367
const tIPSECKEY = 57368
const tISDN = 57369
const tKEY = 57370
const tKX = 57371
const tLOC = 57372
const tMB = 57373
const tMD = 57374
const tMF = 57375
const tMG = 57376
const tMINFO = 57377
const tMR = 57378
const tMX = 57379
const tNAPTR = 57380
const tNIMLOC = 57381
const tNINFO = 57382
const tNS = 57383
const tNSAP = 57384
const tNSAP_PTR = 57385
const tNSEC = 57386
const tNSEC3 = 57387
const tNSEC3PARAM = 57388
const tNULL = 57389
const tNXT = 57390
const tPTR = 57391
const tPX = 57392
const tRKEY = 57393
const tRP = 57394
const tRRSIG = 57395
const tRT = 57396
const tSIG = 57397
const tSMTP_PORT = 57398
const tSOA = 57399
const tSPF = 57400
const tSRV = 57401
const tSSHFP = 57402
const tTALINK = 57403
const tTCP_PROTO = 57404
const tTKEY = 57405
const tTSIG = 57406
const tTXT = 57407
const tUDP_PROTO = 57408
const tUID = 57409
const tUINFO = 57410
const tUNSPEC = 57411
const tWKS = 57412
const tX25 = 57413
const tTYPE_X = 57414
const tHEX = 57415
const t0xHEX = 57416
const tBASE32EXT = 57417
const tBASE64 = 57418
const tDOMAIN_NAME = 57419
const tSRV_DOMAIN = 57420
const tQSTR = 57421
const tFLOAT = 57422
const tCLASS = 57423
const tIPV4 = 57424
const tIPV6 = 57425
const tDECADIC = 57426

var yyToknames = []string{
	"tA",
	"tA6",
	"tAAAA",
	"tAFSDB",
	"tAPL",
	"tATMA",
	"tBACKSLASH_HASH",
	"tBLANK_START",
	"tCDS",
	"tCERT",
	"tCNAME",
	"tDHCID",
	"tDLR_TTL",
	"tDNAME",
	"tDNSKEY",
	"tDNS_PORT",
	"tDS",
	"tEID",
	"tGID",
	"tGPOS",
	"tHINFO",
	"tHIP",
	"tIPSECKEY",
	"tISDN",
	"tKEY",
	"tKX",
	"tLOC",
	"tMB",
	"tMD",
	"tMF",
	"tMG",
	"tMINFO",
	"tMR",
	"tMX",
	"tNAPTR",
	"tNIMLOC",
	"tNINFO",
	"tNS",
	"tNSAP",
	"tNSAP_PTR",
	"tNSEC",
	"tNSEC3",
	"tNSEC3PARAM",
	"tNULL",
	"tNXT",
	"tPTR",
	"tPX",
	"tRKEY",
	"tRP",
	"tRRSIG",
	"tRT",
	"tSIG",
	"tSMTP_PORT",
	"tSOA",
	"tSPF",
	"tSRV",
	"tSSHFP",
	"tTALINK",
	"tTCP_PROTO",
	"tTKEY",
	"tTSIG",
	"tTXT",
	"tUDP_PROTO",
	"tUID",
	"tUINFO",
	"tUNSPEC",
	"tWKS",
	"tX25",
	"tTYPE_X",
	"tHEX",
	"t0xHEX",
	"tBASE32EXT",
	"tBASE64",
	"tDOMAIN_NAME",
	"tSRV_DOMAIN",
	"tQSTR",
	"tFLOAT",
	"tCLASS",
	"tIPV4",
	"tIPV6",
	"tDECADIC",
}
var yyStatenames = []string{}

const yyEofCode = 1
const yyErrCode = 2
const yyMaxDepth = 200

var yyExca = []int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 330,
	1, 109,
	11, 109,
	16, 109,
	77, 109,
	78, 109,
	85, 109,
	87, 109,
	-2, 179,
	-1, 404,
	1, 112,
	11, 112,
	16, 112,
	77, 112,
	78, 112,
	85, 112,
	87, 112,
	-2, 179,
}

const yyNprod = 283
const yyPrivate = 57344

var yyTokenNames []string
var yyStates []string

const yyLast = 417

var yyAct = []int{

	173, 121, 372, 332, 387, 330, 378, 319, 24, 17,
	292, 379, 279, 363, 280, 331, 335, 360, 361, 16,
	324, 325, 205, 206, 207, 208, 210, 209, 289, 290,
	211, 212, 213, 214, 112, 215, 216, 358, 217, 218,
	219, 220, 221, 223, 224, 225, 226, 227, 228, 229,
	230, 231, 356, 222, 232, 233, 234, 235, 236, 237,
	238, 239, 240, 241, 242, 244, 243, 245, 246, 248,
	249, 247, 250, 251, 373, 252, 253, 254, 255, 256,
	128, 257, 258, 259, 283, 260, 261, 262, 263, 264,
	265, 25, 165, 282, 18, 122, 389, 7, 171, 320,
	18, 127, 4, 150, 274, 153, 125, 126, 164, 111,
	124, 343, 308, 270, 384, 364, 329, 273, 272, 166,
	167, 271, 161, 158, 157, 172, 176, 177, 178, 412,
	411, 180, 403, 393, 369, 339, 170, 337, 328, 317,
	190, 191, 312, 179, 306, 302, 183, 294, 268, 202,
	201, 200, 195, 194, 266, 192, 189, 188, 187, 196,
	197, 186, 185, 5, 6, 276, 184, 169, 168, 278,
	269, 3, 284, 8, 396, 193, 368, 275, 345, 114,
	23, 199, 346, 2, 402, 9, 400, 281, 374, 344,
	309, 13, 285, 296, 160, 156, 155, 291, 293, 375,
	15, 300, 27, 19, 69, 163, 70, 71, 341, 154,
	409, 298, 299, 72, 73, 267, 303, 74, 75, 304,
	76, 401, 152, 104, 105, 151, 110, 106, 78, 79,
	80, 81, 82, 83, 84, 85, 86, 87, 88, 408,
	203, 89, 90, 91, 92, 93, 94, 95, 14, 96,
	97, 21, 98, 99, 100, 101, 149, 102, 301, 148,
	103, 147, 146, 145, 395, 107, 144, 297, 143, 142,
	108, 109, 141, 140, 394, 139, 295, 138, 311, 137,
	305, 136, 135, 134, 307, 133, 132, 182, 131, 12,
	310, 313, 11, 10, 286, 129, 315, 316, 321, 162,
	333, 334, 322, 336, 123, 314, 293, 120, 327, 119,
	118, 175, 386, 348, 349, 350, 277, 352, 338, 117,
	340, 116, 115, 1, 342, 347, 376, 354, 353, 318,
	355, 357, 351, 287, 365, 362, 326, 181, 130, 388,
	204, 159, 174, 26, 22, 20, 68, 370, 67, 371,
	366, 367, 66, 62, 113, 61, 60, 59, 58, 57,
	56, 55, 377, 198, 381, 383, 54, 53, 52, 51,
	50, 380, 49, 382, 48, 391, 390, 47, 46, 45,
	44, 43, 42, 41, 40, 39, 38, 37, 65, 77,
	36, 64, 397, 63, 399, 398, 35, 34, 33, 405,
	406, 404, 407, 32, 31, 30, 29, 28, 365, 288,
	410, 359, 413, 414, 323, 392, 385,
}
var yyPact = []int{

	86, 86, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	16, -1000, -1000, -1000, 10, -1000, -1000, -1000, -1000, -1000,
	-1000, 10, -1000, 200, 28, 16, -1000, 120, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 11, -1000, 24, 11, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 45, 44, -1000, -1000, 43,
	-1000, -1000, -1000, -1000, -1000, 26, 9, 11, 11, 91,
	90, 14, -1000, 11, -1000, -1000, -1000, -1000, 14, 11,
	-1000, 14, 89, 85, 84, 81, 80, 79, 11, 11,
	78, 101, 76, 75, 14, 14, 171, 74, 11, 72,
	-1000, 18, 11, -1000, 71, 14, 33, 42, 39, 38,
	22, -1000, 14, 11, -1000, -1000, -1000, 11, -1000, -1000,
	14, -1000, 14, -1000, 8, 96, -1000, -1000, -1000, 14,
	-1000, -61, 14, 14, -1000, -1000, -1000, -1000, 70, -1000,
	-1000, 11, -1000, -1000, -1000, -1000, 14, 14, -1000, 11,
	-1000, -1000, 68, 14, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 14, 67, 14,
	32, -1000, -1000, -1000, -1000, 14, 11, 65, 14, -1000,
	-1000, 14, -1000, -1000, -1000, -1000, 62, 15, 16, -1000,
	-1000, 14, -71, 14, -1000, 61, 37, -70, 11, 11,
	-1000, 60, -1000, 14, 58, 14, -1000, -1000, 31, 116,
	14, 11, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 15,
	-34, -49, -76, -1000, -1000, -1000, -1000, -73, -1000, 36,
	-1000, -1000, -1000, -1000, -1000, -1000, 103, 57, 16, -1000,
	16, -10, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 15, -77, 14, -77, 14, -1000,
	-1000, -1000, -1000, 11, 35, -1000, -1000, -1000, -1000, -1000,
	12, 12, -10, -1000, -1000, 56, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 99, 12, -1000, -1000,
	12, -10, 165, -1000, 55, -70, -1000, 11, 11, -10,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -10, 53, 52,
	-1000, -1000, -1000, -1000, -1000,
}
var yyPgo = []int{

	0, 12, 416, 0, 16, 415, 8, 9, 414, 411,
	409, 407, 406, 405, 404, 403, 398, 397, 396, 393,
	391, 390, 389, 388, 387, 386, 385, 384, 383, 382,
	381, 380, 379, 378, 377, 374, 372, 370, 369, 368,
	367, 366, 363, 361, 360, 359, 358, 357, 356, 355,
	354, 353, 352, 348, 346, 191, 345, 344, 343, 180,
	342, 341, 3, 340, 5, 339, 338, 337, 10, 336,
	335, 333, 331, 330, 7, 4, 14, 1, 2, 329,
	328, 326, 323, 183, 322, 321, 319, 316, 312, 311,
	310, 309, 307, 305, 304, 303, 299, 297, 295, 294,
	293, 292, 289, 6, 288, 287, 286, 285, 283, 282,
	281, 279, 277, 276, 275, 274, 273, 272, 269, 268,
	267, 266, 264, 263, 262, 261, 259, 258, 256, 251,
	248, 240, 239, 225, 222, 219, 215, 210, 209, 208,
	205, 199, 196, 195, 194, 190, 189, 188, 186,
}
var yyR1 = []int{

	0, 82, 82, 84, 11, 85, 12, 86, 87, 13,
	1, 88, 2, 3, 89, 60, 60, 90, 14, 91,
	15, 92, 16, 93, 17, 94, 18, 65, 75, 95,
	4, 96, 22, 21, 21, 21, 21, 97, 24, 98,
	99, 25, 83, 100, 83, 101, 83, 102, 83, 83,
	83, 26, 79, 79, 80, 80, 81, 81, 74, 73,
	73, 71, 103, 103, 72, 72, 10, 10, 10, 104,
	66, 105, 67, 8, 8, 9, 9, 68, 68, 69,
	69, 70, 70, 106, 27, 107, 28, 108, 29, 109,
	30, 110, 31, 111, 32, 112, 113, 33, 114, 115,
	34, 116, 35, 117, 36, 118, 37, 119, 120, 38,
	121, 122, 39, 123, 40, 124, 41, 42, 42, 125,
	43, 126, 127, 44, 128, 45, 129, 56, 58, 130,
	55, 57, 57, 57, 57, 57, 57, 57, 57, 57,
	57, 57, 57, 57, 57, 57, 57, 57, 57, 57,
	57, 57, 57, 57, 57, 57, 57, 57, 57, 57,
	57, 57, 57, 57, 57, 57, 57, 57, 57, 57,
	57, 57, 59, 59, 59, 59, 131, 132, 46, 133,
	62, 64, 64, 64, 63, 63, 63, 63, 63, 63,
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
	63, 63, 63, 63, 63, 134, 135, 47, 136, 137,
	48, 138, 139, 49, 140, 141, 50, 142, 51, 6,
	52, 61, 61, 143, 19, 20, 23, 23, 76, 77,
	7, 78, 144, 145, 147, 53, 146, 146, 148, 148,
	5, 5, 54,
}
var yyR2 = []int{

	0, 1, 2, 0, 3, 0, 3, 0, 0, 5,
	1, 0, 2, 2, 0, 2, 2, 0, 6, 0,
	3, 0, 3, 0, 6, 0, 6, 1, 1, 0,
	2, 0, 5, 3, 3, 3, 3, 0, 6, 0,
	0, 5, 1, 0, 3, 0, 3, 0, 3, 2,
	2, 5, 0, 2, 0, 2, 0, 1, 3, 0,
	2, 4, 0, 1, 0, 2, 0, 1, 1, 0,
	4, 0, 4, 1, 1, 1, 1, 0, 2, 0,
	2, 0, 2, 0, 3, 0, 3, 0, 3, 0,
	3, 0, 4, 0, 3, 0, 0, 5, 0, 0,
	9, 0, 3, 0, 3, 0, 3, 0, 0, 5,
	0, 0, 9, 0, 6, 0, 3, 3, 1, 0,
	3, 0, 0, 6, 0, 4, 0, 2, 2, 0,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 1, 1, 0, 0, 12, 0,
	2, 1, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 0, 5, 0, 0,
	12, 0, 0, 10, 0, 0, 7, 0, 5, 1,
	2, 0, 2, 0, 5, 3, 2, 3, 1, 1,
	1, 1, 0, 0, 0, 7, 1, 1, 1, 1,
	0, 2, 2,
}
var yyChk = []int{

	-1000, -82, -83, 85, 16, 77, 78, 11, 87, -83,
	-100, -101, -102, -55, -130, -55, -6, -7, 84, -55,
	-56, -129, -57, -59, -6, 81, -58, -59, -11, -12,
	-13, -14, -15, -16, -17, -18, -21, -24, -25, -26,
	-27, -28, -29, -30, -31, -32, -33, -34, -35, -36,
	-37, -38, -39, -40, -41, -43, -44, -45, -46, -47,
	-48, -49, -51, -19, -20, -23, -52, -53, -54, 4,
	6, 7, 13, 14, 17, 18, 20, -22, 28, 29,
	30, 31, 32, 33, 34, 35, 36, 37, 38, 41,
	42, 43, 44, 45, 46, 47, 49, 50, 52, 53,
	54, 55, 57, 60, 23, 24, 27, 65, 70, 71,
	26, 81, -6, -50, 59, -84, -85, -86, -90, -91,
	-92, -77, 84, -94, 86, 82, 83, 77, -77, -98,
	-66, -104, -106, -107, -108, -109, -110, -111, -112, -114,
	-116, -117, -118, -119, -121, -123, -124, -125, -126, -128,
	-62, -133, -134, -62, -138, -142, -143, 79, 79, -61,
	-144, 79, -96, -140, 82, 83, -77, -77, 77, 77,
	-76, 84, -77, -3, -60, -89, -3, -3, -3, -76,
	-77, -67, -105, -76, 77, 77, 77, 77, 77, 77,
	-77, -77, 77, 74, 77, 77, -76, -76, -42, 10,
	77, -77, 77, -131, -63, 4, 5, 6, 7, 9,
	8, 12, 13, 14, 15, 17, 18, 20, 21, 22,
	23, 24, 35, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 36, 37, 38, 39, 40, 41, 42, 43,
	44, 45, 46, 48, 47, 49, 50, 53, 51, 52,
	54, 55, 57, 58, 59, 60, 61, 63, 64, 65,
	67, 68, 69, 70, 71, 72, -77, -136, 77, -76,
	80, 79, 79, 79, 82, -76, -77, -87, -77, -1,
	-76, -76, 85, 76, 76, -1, -99, -71, -10, 89,
	90, -76, -68, -76, 77, -113, -77, -120, -76, -76,
	-77, -127, 77, -1, -135, -1, 77, -76, 80, -145,
	-76, -77, 77, -1, -93, -76, -97, 77, -79, -74,
	84, -7, -68, -8, 91, 92, -69, -76, 77, 79,
	-64, 85, -62, -77, -77, -4, -95, 77, -76, 77,
	-76, -139, -4, 80, -146, 62, 66, -76, -77, -3,
	-3, -4, -3, -80, -74, -73, 86, -72, 86, -9,
	93, 94, -70, 86, 79, -62, -4, -4, 73, 77,
	-6, -6, -78, 84, -147, -141, -81, -74, -103, 88,
	-76, -103, -76, -77, 79, -2, -88, -75, -65, 84,
	-75, -78, -5, 77, -115, -122, 75, -75, -75, -78,
	-148, 56, 19, 77, -64, -77, -77, -78, -132, -137,
	-78, 77, 77, -3, -3,
}
var yyDef = []int{

	0, -2, 1, 42, 43, 45, 47, 129, 129, 2,
	0, 129, 126, 49, 0, 50, 44, 259, 270, 46,
	48, 0, 130, 0, 174, 175, 127, 0, 131, 132,
	133, 134, 135, 136, 137, 138, 139, 140, 141, 142,
	143, 144, 145, 146, 147, 148, 149, 150, 151, 152,
	153, 154, 155, 156, 157, 158, 159, 160, 161, 162,
	163, 164, 165, 166, 167, 168, 169, 170, 171, 3,
	5, 7, 17, 19, 21, 0, 25, 0, 0, 39,
	69, 83, 85, 87, 89, 91, 93, 95, 98, 101,
	103, 105, 107, 110, 113, 115, 119, 121, 124, 179,
	245, 179, 251, 257, 263, 0, 0, 261, 272, 0,
	31, 172, 173, 128, 254, 0, 0, 0, 0, 0,
	0, 0, 269, 0, 14, 14, 14, 14, 0, 0,
	71, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	176, 0, 0, 248, 0, 0, 0, 0, 266, 260,
	0, 282, 0, 0, 4, 6, 8, 0, 20, 22,
	0, 268, 0, 33, 0, 0, 34, 35, 36, 0,
	40, 66, 0, 77, 84, 86, 88, 90, 0, 94,
	96, 0, 102, 104, 106, 108, 0, 0, 116, 118,
	120, 122, 0, 0, 180, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 246, 0, 0, 0,
	0, 265, 267, 262, 273, 0, 0, 0, 0, 23,
	10, 0, 13, 16, 15, 37, 0, 52, 0, 67,
	68, 77, 0, 79, 92, 0, 0, 179, 0, 0,
	29, 0, 125, 0, 0, 0, 252, 29, 0, 0,
	0, 0, 9, 14, 14, 29, 14, 41, 51, 54,
	59, 64, 0, 70, 73, 74, 78, 81, 97, 0,
	-2, 181, 182, 29, 29, 117, 0, 0, 0, 247,
	0, 0, 258, 264, 274, 276, 277, 32, 255, 18,
	24, 26, 38, 53, 56, 62, 0, 62, 0, 72,
	75, 76, 80, 0, 0, 183, 11, 114, 30, 123,
	0, 0, 0, 271, 280, 0, 55, 57, 58, 63,
	60, 61, 65, 82, 99, 111, 0, 0, 28, 27,
	0, 0, 275, 256, 0, 179, 12, 0, 0, 0,
	281, 278, 279, 100, -2, 177, 249, 0, 0, 0,
	253, 14, 14, 178, 250,
}
var yyTok1 = []int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	85, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 89, 3, 90, 86, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 87, 3, 3, 3, 3, 93,
	3, 3, 3, 3, 3, 3, 3, 3, 91, 3,
	3, 3, 3, 92, 3, 3, 3, 94, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 88,
}
var yyTok2 = []int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84,
}
var yyTok3 = []int{
	0,
}

/*	parser for yacc output	*/

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c > 0 && c <= len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return fmt.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return fmt.Sprintf("state-%v", s)
}

func yylex1(lex yyLexer, lval *yySymType) int {
	c := 0
	char := lex.Lex(lval)
	if char <= 0 {
		c = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		c = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			c = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		c = yyTok3[i+0]
		if c == char {
			c = yyTok3[i+1]
			goto out
		}
	}

out:
	if c == 0 {
		c = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		fmt.Printf("lex %U %s\n", uint(char), yyTokname(c))
	}
	return c
}

func yyParse(yylex *lex) int {
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, yyMaxDepth)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yychar := -1
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		fmt.Printf("char %v in %v\n", yyTokname(yychar), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yychar < 0 {
		yychar = yylex1(yylex, &yylval)
	}
	yyn += yychar
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yychar { /* valid shift */
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yychar < 0 {
			yychar = yylex1(yylex, &yylval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yychar {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error("syntax error")
			Nerrs++
			if yyDebug >= 1 {
				fmt.Printf("%s", yyStatname(yystate))
				fmt.Printf("saw %s\n", yyTokname(yychar))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					fmt.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				fmt.Printf("error recovery discards %s\n", yyTokname(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}
			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		fmt.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 3:
		{
			yylex.begin(sc_IPV4)
		}
	case 4:
		{
			yyVAL.rrData = &rr.A{yyS[yypt-0].ip}
		}
	case 5:
		{
			yylex.begin(sc_IPV6)
		}
	case 6:
		{
			yyVAL.rrData = &rr.AAAA{yyS[yypt-0].ip}
		}
	case 7:
		{
			yylex.begin(sc_NUM)
		}
	case 8:
		{
			yylex.begin(sc_DOMAIN)
		}
	case 9:
		{
			yyVAL.rrData = &rr.AFSDB{uint16(yyS[yypt-2].uint), yyS[yypt-0].str}
		}
	case 10:
		{
			yyVAL.alg = rr.AlgorithmType(yyS[yypt-0].uint)
		}
	case 11:
		{
			yylex.begin(sc_BASE32EXT)
		}
	case 12:
		{
			yylex.begin(sc_INITIAL)
			if data, err := strutil.Base32ExtDecode([]byte(yyS[yypt-0].str)); err != nil {
				yylex.Error(err.Error())
			} else {
				yyVAL.data = data
			}
		}
	case 13:
		{
			yylex.begin(sc_INITIAL)
			if data, err := strutil.Base64Decode([]byte(yyS[yypt-1].str)); err != nil {
				yylex.Error(err.Error())
			} else {
				yyVAL.data = data
			}
		}
	case 14:
		{
			yylex.begin(sc_BASE64)
		}
	case 15:
		{
			yyVAL.str = yyS[yypt-0].str
		}
	case 16:
		{
			yyVAL.str += yyS[yypt-0].str
		}
	case 17:
		{
			yylex.begin(sc_NUM)
		}
	case 18:
		{
			yyVAL.rrData = &rr.CERT{rr.CertType(yyS[yypt-3].uint), uint16(yyS[yypt-2].uint), yyS[yypt-1].alg, yyS[yypt-0].data}
		}
	case 19:
		{
			yylex.begin(sc_DOMAIN)
		}
	case 20:
		{
			yyVAL.rrData = &rr.CNAME{yyS[yypt-0].str}
		}
	case 21:
		{
			yylex.begin(sc_DOMAIN)
		}
	case 22:
		{
			yyVAL.rrData = &rr.DNAME{yyS[yypt-0].str}
		}
	case 23:
		{
			if yyS[yypt-1].uint != 3 {
				yylex.Error(`protocol must be "3"`)
			}
		}
	case 24:
		{
			yyVAL.rrData = &rr.DNSKEY{uint16(yyS[yypt-4].uint), byte(yyS[yypt-3].uint), yyS[yypt-2].alg, yyS[yypt-0].data}
		}
	case 25:
		{
			yylex.begin(sc_NUM)
		}
	case 26:
		{
			if yyS[yypt-1].uint != 1 || len(yyS[yypt-0].data) != 20 {
				yylex.Error(`digest type must be "1" and digest must be exactly 20 bytes (40 hex chars)`)
			} else {
				yyVAL.rrData = &rr.DS{uint16(yyS[yypt-3].uint), rr.AlgorithmType(yyS[yypt-2].uint), rr.HashAlgorithm(yyS[yypt-1].uint), yyS[yypt-0].data}
			}
		}
	case 27:
		{
			if t, err := dns.String2Seconds(yyS[yypt-0].str); err != nil {
				yylex.Error(err.Error())
			} else {
				yyVAL.u64 = uint64(t)
			}
		}
	case 28:
		{
			yyVAL.uint = uint(yyS[yypt-0].u64)
		}
	case 29:
		{
			yylex.begin(sc_HEX)
		}
	case 30:
		{
			yyVAL.data = yyS[yypt-0].data
		}
	case 31:
		{
			yylex.begin(sc_NUM)
		}
	case 32:
		{
			x := &rr.IPSECKEY{Precedence: byte(yyS[yypt-2].uint), GatewayType: rr.GatewayType(yyS[yypt-1].uint), Algorithm: rr.IPSECKEYAlgorithm(yyS[yypt-0].uint)}
			yyVAL.rrData = x
			switch x.GatewayType {
			default:
				yylex.Error("Unknown gateway type")
			case rr.GatewayNone, rr.GatewayIPV4, rr.GatewayIPV6, rr.GatewayDomain:
				// OK
			}

			switch x.Algorithm {
			default:
				yylex.Error("Unknown algorithm")
			case rr.IPSECKEYAlgorithmDSA, rr.IPSECKEYAlgorithmRSA:
				// OK
			}

			yylex.begin(sc_IPSSECKEY)
		}
	case 33:
		{
			x := yyS[yypt-2].rrData.(*rr.IPSECKEY)
			x.PublicKey = yyS[yypt-0].data
			yyVAL.rrData = x
			switch x.GatewayType {
			case rr.GatewayNone:
				// OK
			case rr.GatewayIPV4:
				yylex.Error("missing gateway IPv4 address")
			case rr.GatewayIPV6:
				yylex.Error("missing gateway IPv6 address")
			case rr.GatewayDomain:
				yylex.Error("missing gateway <domain-name>")
			}
		}
	case 34:
		{
			x := yyS[yypt-2].rrData.(*rr.IPSECKEY)
			x.Gateway = yyS[yypt-1].ip
			x.PublicKey = yyS[yypt-0].data
			yyVAL.rrData = x
			if x.GatewayType != rr.GatewayIPV4 {
				yylex.Error("expected IPv4 gateway")
			}
		}
	case 35:
		{
			x := yyS[yypt-2].rrData.(*rr.IPSECKEY)
			x.Gateway = yyS[yypt-1].ip
			x.PublicKey = yyS[yypt-0].data
			yyVAL.rrData = x
			if x.GatewayType != rr.GatewayIPV6 {
				yylex.Error("expected IPv6 gateway")
			}
		}
	case 36:
		{
			x := yyS[yypt-2].rrData.(*rr.IPSECKEY)
			x.Gateway = yyS[yypt-1].str
			x.PublicKey = yyS[yypt-0].data
			yyVAL.rrData = x
			if x.GatewayType != rr.GatewayDomain {
				println(yyS[yypt-1].str)
				yylex.Error("expected <domain-name> gateway")
			}
		}
	case 37:
		{
			if yyS[yypt-1].uint != 3 {
				yylex.Error(`protocol must be "3"`)
			}
		}
	case 38:
		{
			yyVAL.rrData = &rr.KEY{uint16(yyS[yypt-4].uint), byte(yyS[yypt-3].uint), yyS[yypt-2].alg, yyS[yypt-0].data}
		}
	case 39:
		{
			yylex.begin(sc_NUM)
		}
	case 40:
		{
			yylex.begin(sc_DOMAIN)
		}
	case 41:
		{
			yyVAL.rrData = &rr.KX{uint16(yyS[yypt-2].uint), yyS[yypt-0].str}
		}
	case 42:
		{
			yylex.begin(sc_INITIAL)
		}
	case 43:
		{
			yylex.begin(sc_NUM)
		}
	case 45:
		{
			yylex.begin(sc_RRHEAD)
		}
	case 46:
		{
			yyS[yypt-0].rr.Name = yyS[yypt-2].str
			if !yylex.rrHandler(yyS[yypt-0].rr) {
				goto ret0
			}
		}
	case 47:
		{
			yylex.begin(sc_RRHEAD)
		}
	case 48:
		{
			yyS[yypt-0].rr.Name = yyS[yypt-2].str
			if !yylex.rrHandler(yyS[yypt-0].rr) {
				goto ret0
			}
		}
	case 49:
		{
			if !yylex.rrHandler(yyS[yypt-0].rr) {
				goto ret0
			}
		}
	case 50:
		{
			yyS[yypt-0].rr.Name = "@"
			if !yylex.rrHandler(yyS[yypt-0].rr) {
				goto ret0
			}
		}
	case 51:
		{
			yyVAL.rrData = &rr.LOC{0, byte(yyS[yypt-0].uint >> 16), byte(yyS[yypt-0].uint >> 8), byte(yyS[yypt-0].uint), uint32(yyS[yypt-3].u64), uint32(yyS[yypt-2].u64), uint32(yyS[yypt-1].u64)}
		}
	case 52:
		{
			yyVAL.uint = uint((*rr.LOC)(nil).EncPrec(100))<<16 | uint((*rr.LOC)(nil).EncPrec(1000000))<<8 | uint((*rr.LOC)(nil).EncPrec(1000))

		}
	case 53:
		{
			yyVAL.uint = uint((*rr.LOC)(nil).EncPrec(yyS[yypt-1].u64))<<16 | yyS[yypt-0].uint
		}
	case 54:
		{
			yyVAL.uint = uint((*rr.LOC)(nil).EncPrec(1000000))<<8 | uint((*rr.LOC)(nil).EncPrec(1000))
		}
	case 55:
		{
			yyVAL.uint = uint((*rr.LOC)(nil).EncPrec(yyS[yypt-1].u64))<<8 | yyS[yypt-0].uint
		}
	case 56:
		{
			yyVAL.uint = uint((*rr.LOC)(nil).EncPrec(1000))
		}
	case 57:
		{
			yyVAL.uint = uint((*rr.LOC)(nil).EncPrec(yyS[yypt-0].u64))
		}
	case 58:
		{
			yyVAL.u64 = 100*yyS[yypt-2].u64 + yyS[yypt-1].u64
		}
	case 59:
		{
			yyVAL.u64 = 0
		}
	case 60:
		{
			for yyVAL.u64 = uint64(yyS[yypt-0].uint); yyVAL.u64 != 0 && yyVAL.u64 < 10; yyVAL.u64 *= 10 {
			}
		}
	case 61:
		{
			x := (int64(yyS[yypt-1].u64) + 100*int64(yyS[yypt-2].int)) * int64(yyS[yypt-3].int)
			yyVAL.u64 = uint64(x + 10000000)
		}
	case 64:
		{
			yyVAL.u64 = 0
		}
	case 65:
		{
			for yyVAL.u64 = uint64(yyS[yypt-0].uint); yyVAL.u64 != 0 && yyVAL.u64 < 10; yyVAL.u64 *= 10 {
			}
		}
	case 66:
		{
			yyVAL.int = 1
		}
	case 67:
		{
			yyVAL.int = 1
		}
	case 68:
		{
			yyVAL.int = -1
		}
	case 69:
		{
			yylex.begin(sc_NUM)
		}
	case 70:
		{
			ts := yyS[yypt-1].u64 % 60000
			m := (yyS[yypt-1].u64 / 60000) % 60
			yyVAL.u64 = uint64((*rr.LOC)(nil).EncDMTS(int(yyS[yypt-2].uint), int(m), int(ts), yyS[yypt-0].int != 0))
		}
	case 71:
		{
			yylex.begin(sc_NUM)
		}
	case 72:
		{
			ts := yyS[yypt-1].u64 % 60000
			m := (yyS[yypt-1].u64 / 60000) % 60
			yyVAL.u64 = uint64((*rr.LOC)(nil).EncDMTS(int(yyS[yypt-2].uint), int(m), int(ts), yyS[yypt-0].int != 0))
		}
	case 73:
		{
			yyVAL.int = 1
		}
	case 74:
		{
			yyVAL.int = 0
		}
	case 75:
		{
			yyVAL.int = 1
		}
	case 76:
		{
			yyVAL.int = 0
		}
	case 77:
		{
			yyVAL.u64 = 0
		}
	case 78:
		{
			yyVAL.u64 = 60000*uint64(yyS[yypt-1].uint) + yyS[yypt-0].u64
		}
	case 79:
		{
			yyVAL.u64 = 0
		}
	case 80:
		{
			yyVAL.u64 = 1000*uint64(yyS[yypt-1].uint) + yyS[yypt-0].u64
		}
	case 81:
		{
			yyVAL.u64 = 0
		}
	case 82:
		{
			for yyVAL.u64 = uint64(yyS[yypt-0].uint); yyVAL.u64 != 0 && yyVAL.u64 < 100; yyVAL.u64 *= 10 {
			}
		}
	case 83:
		{
			yylex.begin(sc_DOMAIN)
		}
	case 84:
		{
			yyVAL.rrData = &rr.MB{yyS[yypt-0].str}
		}
	case 85:
		{
			yylex.begin(sc_DOMAIN)
		}
	case 86:
		{
			yyVAL.rrData = &rr.MD{yyS[yypt-0].str}
		}
	case 87:
		{
			yylex.begin(sc_DOMAIN)
		}
	case 88:
		{
			yyVAL.rrData = &rr.MF{yyS[yypt-0].str}
		}
	case 89:
		{
			yylex.begin(sc_DOMAIN)
		}
	case 90:
		{
			yyVAL.rrData = &rr.MG{yyS[yypt-0].str}
		}
	case 91:
		{
			yylex.begin(sc_DOMAIN)
		}
	case 92:
		{
			yyVAL.rrData = &rr.MINFO{yyS[yypt-1].str, yyS[yypt-0].str}
		}
	case 93:
		{
			yylex.begin(sc_DOMAIN)
		}
	case 94:
		{
			yyVAL.rrData = &rr.MR{yyS[yypt-0].str}
		}
	case 95:
		{
			yylex.begin(sc_NUM)
		}
	case 96:
		{
			yylex.begin(sc_DOMAIN)
		}
	case 97:
		{
			yyVAL.rrData = &rr.MX{uint16(yyS[yypt-2].uint), yyS[yypt-0].str}
		}
	case 98:
		{
			yylex.begin(sc_NUM)
		}
	case 99:
		{
			yylex.begin(sc_ANY_DOMAIN)
		}
	case 100:
		{
			yyVAL.rrData = &rr.NAPTR{uint16(yyS[yypt-6].uint), uint16(yyS[yypt-5].uint), yyS[yypt-4].str, yyS[yypt-3].str, yyS[yypt-2].str, yyS[yypt-0].str}
		}
	case 101:
		{
			yylex.begin(sc_DOMAIN)
		}
	case 102:
		{
			yyVAL.rrData = &rr.NS{yyS[yypt-0].str}
		}
	case 103:
		{
			yylex.begin(sc_0XHEX)
		}
	case 104:
		{
			yyVAL.rrData = &rr.NSAP{yyS[yypt-0].data}
		}
	case 105:
		{
			yylex.begin(sc_DOMAIN)
		}
	case 106:
		{
			yyVAL.rrData = &rr.NSAP_PTR{yyS[yypt-0].str}
		}
	case 107:
		{
			yylex.begin(sc_DOMAIN)
		}
	case 108:
		{
			yylex.begin(sc_TYPE)
		}
	case 109:
		{
			yyVAL.rrData = &rr.NSEC{yyS[yypt-2].str, rr.TypesEncode(yyS[yypt-0].types)}
		}
	case 110:
		{
			yylex.begin(sc_NUM)
		}
	case 111:
		{
			yylex.begin(sc_TYPE)
		}
	case 112:
		{
			yyVAL.rrData = &rr.NSEC3{rr.NSEC3PARAM{rr.HashAlgorithm(yyS[yypt-6].uint), byte(yyS[yypt-5].uint), uint16(yyS[yypt-4].uint), yyS[yypt-3].data}, yyS[yypt-2].data, rr.TypesEncode(yyS[yypt-0].types)}
		}
	case 113:
		{
			yylex.begin(sc_NUM)
		}
	case 114:
		{
			yyVAL.rrData = &rr.NSEC3PARAM{rr.HashAlgorithm(yyS[yypt-3].uint), byte(yyS[yypt-2].uint), uint16(yyS[yypt-1].uint), yyS[yypt-0].data}
		}
	case 115:
		{
			yylex.begin(sc_NUM)
		}
	case 116:
		{
			yyVAL.rrData = yyS[yypt-0].rrData
		}
	case 117:
		{
			if int(yyS[yypt-1].uint) != len(yyS[yypt-0].data) {
				yylex.Error(fmt.Sprintf("mismatched data len: %d != %d", yyS[yypt-1].uint, len(yyS[yypt-0].data)))
			}
			yyVAL.rrData = &rr.NULL{yyS[yypt-0].data}
		}
	case 118:
		{
			yyVAL.rrData = &rr.NULL{[]byte{}}
		}
	case 119:
		{
			yylex.begin(sc_DOMAIN)
		}
	case 120:
		{
			yyVAL.rrData = &rr.PTR{yyS[yypt-0].str}
		}
	case 121:
		{
			yylex.begin(sc_NUM)
		}
	case 122:
		{
			yylex.begin(sc_DOMAIN)
		}
	case 123:
		{
			yyVAL.rrData = &rr.PX{uint16(yyS[yypt-3].uint), yyS[yypt-1].str, yyS[yypt-0].str}
		}
	case 124:
		{
			yylex.begin(sc_DOMAIN)
		}
	case 125:
		{
			yyVAL.rrData = &rr.RP{yyS[yypt-1].str, yyS[yypt-0].str}
		}
	case 126:
		{
			yylex.begin(sc_RRHEAD)
		}
	case 127:
		{
			yyVAL.rr = yyS[yypt-0].rr
		}
	case 128:
		{
			yyVAL.rr = &rr.RR{"", rr.TYPE_SRV, yyS[yypt-1].rrh.class, yyS[yypt-1].rrh.ttl, yyS[yypt-0].rrData}
		}
	case 129:
		{
			yylex.begin(sc_RRHEAD)
		}
	case 130:
		{
			yyVAL.rr = yyS[yypt-0].rr
		}
	case 131:
		{
			yyVAL.rr = &rr.RR{"", rr.TYPE_A, yyS[yypt-1].rrh.class, yyS[yypt-1].rrh.ttl, yyS[yypt-0].rrData}
		}
	case 132:
		{
			yyVAL.rr = &rr.RR{"", rr.TYPE_AAAA, yyS[yypt-1].rrh.class, yyS[yypt-1].rrh.ttl, yyS[yypt-0].rrData}
		}
	case 133:
		{
			yyVAL.rr = &rr.RR{"", rr.TYPE_AFSDB, yyS[yypt-1].rrh.class, yyS[yypt-1].rrh.ttl, yyS[yypt-0].rrData}
		}
	case 134:
		{
			yyVAL.rr = &rr.RR{"", rr.TYPE_CERT, yyS[yypt-1].rrh.class, yyS[yypt-1].rrh.ttl, yyS[yypt-0].rrData}
		}
	case 135:
		{
			yyVAL.rr = &rr.RR{"", rr.TYPE_CNAME, yyS[yypt-1].rrh.class, yyS[yypt-1].rrh.ttl, yyS[yypt-0].rrData}
		}
	case 136:
		{
			yyVAL.rr = &rr.RR{"", rr.TYPE_DNAME, yyS[yypt-1].rrh.class, yyS[yypt-1].rrh.ttl, yyS[yypt-0].rrData}
		}
	case 137:
		{
			yyVAL.rr = &rr.RR{"", rr.TYPE_DNSKEY, yyS[yypt-1].rrh.class, yyS[yypt-1].rrh.ttl, yyS[yypt-0].rrData}
		}
	case 138:
		{
			yyVAL.rr = &rr.RR{"", rr.TYPE_DS, yyS[yypt-1].rrh.class, yyS[yypt-1].rrh.ttl, yyS[yypt-0].rrData}
		}
	case 139:
		{
			yyVAL.rr = &rr.RR{"", rr.TYPE_IPSECKEY, yyS[yypt-1].rrh.class, yyS[yypt-1].rrh.ttl, yyS[yypt-0].rrData}
		}
	case 140:
		{
			yyVAL.rr = &rr.RR{"", rr.TYPE_KEY, yyS[yypt-1].rrh.class, yyS[yypt-1].rrh.ttl, yyS[yypt-0].rrData}
		}
	case 141:
		{
			yyVAL.rr = &rr.RR{"", rr.TYPE_KX, yyS[yypt-1].rrh.class, yyS[yypt-1].rrh.ttl, yyS[yypt-0].rrData}
		}
	case 142:
		{
			yyVAL.rr = &rr.RR{"", rr.TYPE_LOC, yyS[yypt-1].rrh.class, yyS[yypt-1].rrh.ttl, yyS[yypt-0].rrData}
		}
	case 143:
		{
			yyVAL.rr = &rr.RR{"", rr.TYPE_MB, yyS[yypt-1].rrh.class, yyS[yypt-1].rrh.ttl, yyS[yypt-0].rrData}
		}
	case 144:
		{
			yyVAL.rr = &rr.RR{"", rr.TYPE_MD, yyS[yypt-1].rrh.class, yyS[yypt-1].rrh.ttl, yyS[yypt-0].rrData}
		}
	case 145:
		{
			yyVAL.rr = &rr.RR{"", rr.TYPE_MF, yyS[yypt-1].rrh.class, yyS[yypt-1].rrh.ttl, yyS[yypt-0].rrData}
		}
	case 146:
		{
			yyVAL.rr = &rr.RR{"", rr.TYPE_MG, yyS[yypt-1].rrh.class, yyS[yypt-1].rrh.ttl, yyS[yypt-0].rrData}
		}
	case 147:
		{
			yyVAL.rr = &rr.RR{"", rr.TYPE_MINFO, yyS[yypt-1].rrh.class, yyS[yypt-1].rrh.ttl, yyS[yypt-0].rrData}
		}
	case 148:
		{
			yyVAL.rr = &rr.RR{"", rr.TYPE_MR, yyS[yypt-1].rrh.class, yyS[yypt-1].rrh.ttl, yyS[yypt-0].rrData}
		}
	case 149:
		{
			yyVAL.rr = &rr.RR{"", rr.TYPE_MX, yyS[yypt-1].rrh.class, yyS[yypt-1].rrh.ttl, yyS[yypt-0].rrData}
		}
	case 150:
		{
			yyVAL.rr = &rr.RR{"", rr.TYPE_NAPTR, yyS[yypt-1].rrh.class, yyS[yypt-1].rrh.ttl, yyS[yypt-0].rrData}
		}
	case 151:
		{
			yyVAL.rr = &rr.RR{"", rr.TYPE_NS, yyS[yypt-1].rrh.class, yyS[yypt-1].rrh.ttl, yyS[yypt-0].rrData}
		}
	case 152:
		{
			yyVAL.rr = &rr.RR{"", rr.TYPE_NSAP, yyS[yypt-1].rrh.class, yyS[yypt-1].rrh.ttl, yyS[yypt-0].rrData}
		}
	case 153:
		{
			yyVAL.rr = &rr.RR{"", rr.TYPE_NSAP_PTR, yyS[yypt-1].rrh.class, yyS[yypt-1].rrh.ttl, yyS[yypt-0].rrData}
		}
	case 154:
		{
			yyVAL.rr = &rr.RR{"", rr.TYPE_NSEC, yyS[yypt-1].rrh.class, yyS[yypt-1].rrh.ttl, yyS[yypt-0].rrData}
		}
	case 155:
		{
			yyVAL.rr = &rr.RR{"", rr.TYPE_NSEC3, yyS[yypt-1].rrh.class, yyS[yypt-1].rrh.ttl, yyS[yypt-0].rrData}
		}
	case 156:
		{
			yyVAL.rr = &rr.RR{"", rr.TYPE_NSEC3PARAM, yyS[yypt-1].rrh.class, yyS[yypt-1].rrh.ttl, yyS[yypt-0].rrData}
		}
	case 157:
		{
			yyVAL.rr = &rr.RR{"", rr.TYPE_NULL, yyS[yypt-1].rrh.class, yyS[yypt-1].rrh.ttl, yyS[yypt-0].rrData}
		}
	case 158:
		{
			yyVAL.rr = &rr.RR{"", rr.TYPE_PTR, yyS[yypt-1].rrh.class, yyS[yypt-1].rrh.ttl, yyS[yypt-0].rrData}
		}
	case 159:
		{
			yyVAL.rr = &rr.RR{"", rr.TYPE_PX, yyS[yypt-1].rrh.class, yyS[yypt-1].rrh.ttl, yyS[yypt-0].rrData}
		}
	case 160:
		{
			yyVAL.rr = &rr.RR{"", rr.TYPE_RP, yyS[yypt-1].rrh.class, yyS[yypt-1].rrh.ttl, yyS[yypt-0].rrData}
		}
	case 161:
		{
			yyVAL.rr = &rr.RR{"", rr.TYPE_RRSIG, yyS[yypt-1].rrh.class, yyS[yypt-1].rrh.ttl, yyS[yypt-0].rrData}
		}
	case 162:
		{
			yyVAL.rr = &rr.RR{"", rr.TYPE_RT, yyS[yypt-1].rrh.class, yyS[yypt-1].rrh.ttl, yyS[yypt-0].rrData}
		}
	case 163:
		{
			yyVAL.rr = &rr.RR{"", rr.TYPE_SIG, yyS[yypt-1].rrh.class, yyS[yypt-1].rrh.ttl, yyS[yypt-0].rrData}
		}
	case 164:
		{
			yyVAL.rr = &rr.RR{"", rr.TYPE_SOA, yyS[yypt-1].rrh.class, yyS[yypt-1].rrh.ttl, yyS[yypt-0].rrData}
		}
	case 165:
		{
			yyVAL.rr = &rr.RR{"", rr.TYPE_SSHFP, yyS[yypt-1].rrh.class, yyS[yypt-1].rrh.ttl, yyS[yypt-0].rrData}
		}
	case 166:
		{
			yyVAL.rr = &rr.RR{"", rr.TYPE_GPOS, yyS[yypt-1].rrh.class, yyS[yypt-1].rrh.ttl, yyS[yypt-0].rrData}
		}
	case 167:
		{
			yyVAL.rr = &rr.RR{"", rr.TYPE_HINFO, yyS[yypt-1].rrh.class, yyS[yypt-1].rrh.ttl, yyS[yypt-0].rrData}
		}
	case 168:
		{
			yyVAL.rr = &rr.RR{"", rr.TYPE_ISDN, yyS[yypt-1].rrh.class, yyS[yypt-1].rrh.ttl, yyS[yypt-0].rrData}
		}
	case 169:
		{
			yyVAL.rr = &rr.RR{"", rr.TYPE_TXT, yyS[yypt-1].rrh.class, yyS[yypt-1].rrh.ttl, yyS[yypt-0].rrData}
		}
	case 170:
		{
			yyVAL.rr = &rr.RR{"", rr.TYPE_WKS, yyS[yypt-1].rrh.class, yyS[yypt-1].rrh.ttl, yyS[yypt-0].rrData}
		}
	case 171:
		{
			yyVAL.rr = &rr.RR{"", rr.TYPE_X25, yyS[yypt-1].rrh.class, yyS[yypt-1].rrh.ttl, yyS[yypt-0].rrData}
		}
	case 172:
		{
			yyVAL.rrh = rrHead{int32(yyS[yypt-1].int), yyS[yypt-0].class}
		}
	case 173:
		{
			yyVAL.rrh = rrHead{int32(yyS[yypt-0].int), yyS[yypt-1].class}
		}
	case 174:
		{
			yyVAL.rrh = rrHead{int32(yyS[yypt-0].int), 0}
		}
	case 175:
		{
			yyVAL.rrh = rrHead{-1, yyS[yypt-0].class}
		}
	case 176:
		{
			yylex.begin(sc_NUM)
		}
	case 177:
		{
			yylex.begin(sc_DOMAIN)
		}
	case 178:
		{
			yyVAL.rrData = &rr.RRSIG{yyS[yypt-10].typ, yyS[yypt-8].alg, byte(yyS[yypt-7].uint), int32(yyS[yypt-6].int), uint32(yyS[yypt-5].uint), uint32(yyS[yypt-4].uint), uint16(yyS[yypt-3].uint), yyS[yypt-1].str, yyS[yypt-0].data}
		}
	case 179:
		{
			yylex.begin(sc_TYPE)
		}
	case 180:
		{
			yyVAL.typ = yyS[yypt-0].typ
		}
	case 181:
		{
			yyVAL.types = nil
			yylex.begin(sc_INITIAL)
		}
	case 182:
		{
			yyVAL.types = []rr.Type{yyS[yypt-0].typ}
		}
	case 183:
		{
			yyVAL.types = append(yyVAL.types, yyS[yypt-0].typ)
		}
	case 184:
		{
			yyVAL.typ = rr.TYPE_A
		}
	case 185:
		{
			yyVAL.typ = rr.TYPE_A6
		}
	case 186:
		{
			yyVAL.typ = rr.TYPE_AAAA
		}
	case 187:
		{
			yyVAL.typ = rr.TYPE_AFSDB
		}
	case 188:
		{
			yyVAL.typ = rr.TYPE_ATMA
		}
	case 189:
		{
			yyVAL.typ = rr.TYPE_APL
		}
	case 190:
		{
			yyVAL.typ = rr.TYPE_CDS
		}
	case 191:
		{
			yyVAL.typ = rr.TYPE_CERT
		}
	case 192:
		{
			yyVAL.typ = rr.TYPE_CNAME
		}
	case 193:
		{
			yyVAL.typ = rr.TYPE_DHCID
		}
	case 194:
		{
			yyVAL.typ = rr.TYPE_DNAME
		}
	case 195:
		{
			yyVAL.typ = rr.TYPE_DNSKEY
		}
	case 196:
		{
			yyVAL.typ = rr.TYPE_DS
		}
	case 197:
		{
			yyVAL.typ = rr.TYPE_EID
		}
	case 198:
		{
			yyVAL.typ = rr.TYPE_GID
		}
	case 199:
		{
			yyVAL.typ = rr.TYPE_GPOS
		}
	case 200:
		{
			yyVAL.typ = rr.TYPE_HINFO
		}
	case 201:
		{
			yyVAL.typ = rr.TYPE_MINFO
		}
	case 202:
		{
			yyVAL.typ = rr.TYPE_HIP
		}
	case 203:
		{
			yyVAL.typ = rr.TYPE_IPSECKEY
		}
	case 204:
		{
			yyVAL.typ = rr.TYPE_ISDN
		}
	case 205:
		{
			yyVAL.typ = rr.TYPE_KEY
		}
	case 206:
		{
			yyVAL.typ = rr.TYPE_KX
		}
	case 207:
		{
			yyVAL.typ = rr.TYPE_LOC
		}
	case 208:
		{
			yyVAL.typ = rr.TYPE_MB
		}
	case 209:
		{
			yyVAL.typ = rr.TYPE_MD
		}
	case 210:
		{
			yyVAL.typ = rr.TYPE_MF
		}
	case 211:
		{
			yyVAL.typ = rr.TYPE_MR
		}
	case 212:
		{
			yyVAL.typ = rr.TYPE_MX
		}
	case 213:
		{
			yyVAL.typ = rr.TYPE_NAPTR
		}
	case 214:
		{
			yyVAL.typ = rr.TYPE_NIMLOC
		}
	case 215:
		{
			yyVAL.typ = rr.TYPE_NINFO
		}
	case 216:
		{
			yyVAL.typ = rr.TYPE_NS
		}
	case 217:
		{
			yyVAL.typ = rr.TYPE_NSAP
		}
	case 218:
		{
			yyVAL.typ = rr.TYPE_NSAP_PTR
		}
	case 219:
		{
			yyVAL.typ = rr.TYPE_NSEC
		}
	case 220:
		{
			yyVAL.typ = rr.TYPE_NSEC3
		}
	case 221:
		{
			yyVAL.typ = rr.TYPE_NSEC3PARAM
		}
	case 222:
		{
			yyVAL.typ = rr.TYPE_NXT
		}
	case 223:
		{
			yyVAL.typ = rr.TYPE_NULL
		}
	case 224:
		{
			yyVAL.typ = rr.TYPE_PTR
		}
	case 225:
		{
			yyVAL.typ = rr.TYPE_PX
		}
	case 226:
		{
			yyVAL.typ = rr.TYPE_RRSIG
		}
	case 227:
		{
			yyVAL.typ = rr.TYPE_RKEY
		}
	case 228:
		{
			yyVAL.typ = rr.TYPE_RP
		}
	case 229:
		{
			yyVAL.typ = rr.TYPE_RT
		}
	case 230:
		{
			yyVAL.typ = rr.TYPE_SIG
		}
	case 231:
		{
			yyVAL.typ = rr.TYPE_SOA
		}
	case 232:
		{
			yyVAL.typ = rr.TYPE_SPF
		}
	case 233:
		{
			yyVAL.typ = rr.TYPE_SRV
		}
	case 234:
		{
			yyVAL.typ = rr.TYPE_SSHFP
		}
	case 235:
		{
			yyVAL.typ = rr.TYPE_TALINK
		}
	case 236:
		{
			yyVAL.typ = rr.TYPE_TKEY
		}
	case 237:
		{
			yyVAL.typ = rr.TYPE_TSIG
		}
	case 238:
		{
			yyVAL.typ = rr.TYPE_TXT
		}
	case 239:
		{
			yyVAL.typ = rr.TYPE_UID
		}
	case 240:
		{
			yyVAL.typ = rr.TYPE_UINFO
		}
	case 241:
		{
			yyVAL.typ = rr.TYPE_UNSPEC
		}
	case 242:
		{
			yyVAL.typ = rr.TYPE_WKS
		}
	case 243:
		{
			yyVAL.typ = rr.TYPE_X25
		}
	case 244:
		{
			yyVAL.typ = rr.Type(yyS[yypt-0].uint)
		}
	case 245:
		{
			yylex.begin(sc_NUM)
		}
	case 246:
		{
			yylex.begin(sc_DOMAIN)
		}
	case 247:
		{
			yyVAL.rrData = &rr.RT{uint16(yyS[yypt-2].uint), yyS[yypt-0].str}
		}
	case 248:
		{
			yylex.begin(sc_NUM)
		}
	case 249:
		{
			yylex.begin(sc_DOMAIN)
		}
	case 250:
		{
			yyVAL.rrData = &rr.SIG{yyS[yypt-10].typ, yyS[yypt-8].alg, byte(yyS[yypt-7].uint), int32(yyS[yypt-6].int), uint32(yyS[yypt-5].uint), uint32(yyS[yypt-4].uint), uint16(yyS[yypt-3].uint), yyS[yypt-1].str, yyS[yypt-0].data}
		}
	case 251:
		{
			yylex.begin(sc_DOMAIN)
		}
	case 252:
		{
			yylex.begin(sc_NUM)
		}
	case 253:
		{
			yyVAL.rrData = &rr.SOA{yyS[yypt-7].str, yyS[yypt-6].str, uint32(yyS[yypt-4].uint), uint32(yyS[yypt-3].uint), uint32(yyS[yypt-2].uint), uint32(yyS[yypt-1].uint), uint32(yyS[yypt-0].uint)}
		}
	case 254:
		{
			yylex.begin(sc_NUM)
		}
	case 255:
		{
			yylex.begin(sc_DOMAIN)
		}
	case 256:
		{
			yyVAL.rrData = &rr.SRV{uint16(yyS[yypt-4].uint), uint16(yyS[yypt-3].uint), uint16(yyS[yypt-2].uint), yyS[yypt-0].str}
		}
	case 257:
		{
			yylex.begin(sc_NUM)
		}
	case 258:
		{
			yyVAL.rrData = &rr.SSHFP{rr.SSHFPAlgorithm(yyS[yypt-2].uint), rr.SSHFPType(yyS[yypt-1].uint), yyS[yypt-0].data}
		}
	case 259:
		yyVAL.int = yyS[yypt-0].int
	case 260:
		{
			yyVAL.rrData = &rr.TXT{yyS[yypt-0].str}
		}
	case 261:
		{
			yyVAL.str = ""
		}
	case 262:
		{
			yyVAL.str += yyS[yypt-0].str
		}
	case 263:
		{
			yylex.begin(sc_FLOAT)
		}
	case 264:
		{
			yyVAL.rrData = &rr.GPOS{yyS[yypt-2].float, yyS[yypt-1].float, yyS[yypt-0].float}
		}
	case 265:
		{
			yyVAL.rrData = &rr.HINFO{yyS[yypt-1].str, yyS[yypt-0].str}
		}
	case 266:
		{
			yyVAL.rrData = &rr.ISDN{yyS[yypt-0].str, ""}
		}
	case 267:
		{
			yyVAL.rrData = &rr.ISDN{yyS[yypt-1].str, yyS[yypt-0].str}
		}
	case 268:
		{
			if yyS[yypt-0].u64 > math.MaxUint8 {
				yylex.Error("number out of range")
				yyVAL.uint = math.MaxUint8
			} else {
				yyVAL.uint = uint(yyS[yypt-0].u64)
			}
		}
	case 269:
		{
			if yyS[yypt-0].u64 > math.MaxUint16 {
				yylex.Error("number out of range")
				yyVAL.uint = math.MaxUint16
			} else {
				yyVAL.uint = uint(yyS[yypt-0].u64)
			}
		}
	case 270:
		{
			if yyS[yypt-0].u64 > math.MaxInt32 {
				yylex.Error("number out of range")
				yyVAL.int = math.MaxInt32
			} else {
				yyVAL.int = int(yyS[yypt-0].u64)
			}
		}
	case 271:
		{
			if yyS[yypt-0].u64 > math.MaxUint32 {
				yylex.Error("number out of range")
				yyVAL.uint = math.MaxUint32
			} else {
				yyVAL.uint = uint(yyS[yypt-0].u64)
			}
		}
	case 272:
		{
			yylex.begin(sc_IPV4)
		}
	case 273:
		{
			yylex.begin(sc_PROTO)
		}
	case 274:
		{
			yylex.begin(sc_PORT)
		}
	case 275:
		{
			x := &rr.WKS{yyS[yypt-4].ip, rr.IP_Protocol(yyS[yypt-2].int), map[rr.IP_Port]struct{}{}}
			for i, v := range yyS[yypt-0].data {
				for j := 8 * i; v != 0; j, v = j+1, v>>1 {
					if v&1 != 0 {
						x.Ports[rr.IP_Port(j)] = struct{}{}
					}
				}
			}
			yyVAL.rrData = x
		}
	case 280:
		{
			yyVAL.data = make([]byte, 128)
		}
	case 281:
		{
			i := rr.IP_Port(yyS[yypt-0].int)
			yyVAL.data[i>>3] |= 1 << uint(i&7)
		}
	case 282:
		{
			yyVAL.rrData = &rr.X25{yyS[yypt-0].str}
		}
	}
	goto yystack /* stack new state and value */
}
