// Copyright (c) 2011 CZ.NIC z.s.p.o. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// blame: jnml, labs.nic.cz

// WARNING: If this file is parser.go then DO NOT EDIT.
// parser.go is generated by goyacc from parser.y (see the Makefile).


package zone

import (
	"github.com/cznic/dns"
	"github.com/cznic/dns/rr"
	"github.com/cznic/strutil"
	"fmt"
	"math"
	"net"
)

type rrHead struct {
	ttl   int32
	class rr.Class
}

type yySymType struct {
	yys    int
	alg    rr.AlgorithmType
	class  rr.Class
	data   []byte
	str    string
	u64    uint64
	int    int
	uint   uint
	ip     net.IP
	rrh    rrHead
	rrData dns.Wirer
	rr     *rr.RR
	typ    rr.Type
	types  []rr.Type
}

const tDLR_TTL = 57346
const tBLANK_START = 57347
const tA = 57348
const tAAAA = 57349
const tA6 = 57350
const tAFSDB = 57351
const tAPL = 57352
const tCERT = 57353
const tCNAME = 57354
const tDHCID = 57355
const tDNAME = 57356
const tDNSKEY = 57357
const tDS = 57358
const tGPOS = 57359
const tHINFO = 57360
const tIPSECKEY = 57361
const tISDN = 57362
const tKEY = 57363
const tKX = 57364
const tLOC = 57365
const tMX = 57366
const tNAPTR = 57367
const tNSAP = 57368
const tNS = 57369
const tNSEC = 57370
const tNSEC3 = 57371
const tNSEC3PARAM = 57372
const tNXT = 57373
const tPTR = 57374
const tPX = 57375
const tRP = 57376
const tRRSIG = 57377
const tRT = 57378
const tSIG = 57379
const tSOA = 57380
const tSPF = 57381
const tSRV = 57382
const tSSHFP = 57383
const tTXT = 57384
const tWKS = 57385
const tX25 = 57386
const tHEX = 57387
const tBASE32EXT = 57388
const tBASE64 = 57389
const tDOMAIN_NAME = 57390
const tQSTR = 57391
const tCLASS = 57392
const tIPV4 = 57393
const tIPV6 = 57394
const tDECADIC = 57395
const notQSTR = 57396

var yyToknames = []string{
	"tDLR_TTL",
	"tBLANK_START",
	"tA",
	"tAAAA",
	"tA6",
	"tAFSDB",
	"tAPL",
	"tCERT",
	"tCNAME",
	"tDHCID",
	"tDNAME",
	"tDNSKEY",
	"tDS",
	"tGPOS",
	"tHINFO",
	"tIPSECKEY",
	"tISDN",
	"tKEY",
	"tKX",
	"tLOC",
	"tMX",
	"tNAPTR",
	"tNSAP",
	"tNS",
	"tNSEC",
	"tNSEC3",
	"tNSEC3PARAM",
	"tNXT",
	"tPTR",
	"tPX",
	"tRP",
	"tRRSIG",
	"tRT",
	"tSIG",
	"tSOA",
	"tSPF",
	"tSRV",
	"tSSHFP",
	"tTXT",
	"tWKS",
	"tX25",
	"tHEX",
	"tBASE32EXT",
	"tBASE64",
	"tDOMAIN_NAME",
	"tQSTR",
	"tCLASS",
	"tIPV4",
	"tIPV6",
	"tDECADIC",
	"notQSTR",
}
var yyStatenames = []string{}

const yyEofCode = 1
const yyErrCode = 2
const yyMaxDepth = 200

var yyExca = []int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 136,
	1, 38,
	4, 38,
	5, 38,
	48, 38,
	55, 38,
	56, 38,
	-2, 65,
}

const yyNprod = 98
const yyPrivate = 57344

var yyTokenNames []string
var yyStates []string

const yyLast = 146

var yyAct = []int{

	112, 120, 61, 53, 14, 128, 97, 98, 115, 79,
	80, 4, 6, 137, 123, 81, 121, 20, 82, 83,
	21, 84, 122, 16, 54, 130, 49, 85, 16, 70,
	86, 87, 88, 89, 67, 90, 66, 48, 91, 96,
	65, 92, 144, 107, 104, 93, 94, 95, 76, 73,
	68, 124, 133, 125, 2, 5, 8, 111, 63, 71,
	72, 69, 3, 7, 11, 62, 74, 75, 35, 36,
	142, 77, 13, 12, 37, 17, 60, 38, 39, 99,
	59, 132, 101, 102, 103, 58, 40, 57, 100, 41,
	56, 42, 43, 10, 44, 9, 116, 45, 55, 105,
	46, 52, 114, 127, 47, 108, 109, 106, 51, 50,
	1, 110, 129, 136, 78, 119, 64, 117, 118, 113,
	19, 18, 131, 34, 33, 32, 31, 30, 29, 28,
	27, 26, 25, 135, 134, 138, 24, 140, 139, 141,
	23, 22, 143, 15, 126, 145,
}
var yyPact = []int{

	7, 7, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -25,
	-1000, -1000, -30, -1000, -1000, -1000, -1000, -1000, -1000, 62,
	-13, -25, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -29, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -9, -1000, -1000,
	-15, -18, 2, -24, -1000, -29, -29, 1, -24, -24,
	0, -1000, 3, -1, -10, -1000, -1000, -1000, -1000, -24,
	-1000, -24, -1000, -1000, -24, -24, -1000, -24, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -4, -1000, -1000, -1000, -24,
	-5, -29, -29, -24, -1000, -1000, -1000, -1000, -1000, -1000,
	-25, -37, -1000, -33, 4, -1000, 8, -1000, -1000, -28,
	-37, -1000, -1000, -1000, -1000, -1000, -1000, 6, -28, -1000,
	-1000, -37, -42, -1000, -29, -37, -1000, -1000, -1000, -1000,
	-37, -1000, -6, -1000, -1000, -1000,
}
var yyPgo = []int{

	0, 6, 144, 0, 8, 4, 143, 141, 140, 136,
	132, 131, 130, 129, 128, 127, 126, 125, 124, 123,
	64, 121, 120, 119, 116, 2, 114, 113, 112, 5,
	7, 3, 1, 110, 54, 109, 108, 103, 102, 101,
	99, 98, 96, 95, 93, 90, 88, 87, 85, 81,
	80, 76, 73, 71, 70, 65, 58, 57,
}
var yyR1 = []int{

	0, 33, 33, 35, 7, 36, 8, 1, 37, 2,
	3, 38, 23, 23, 39, 9, 40, 10, 41, 11,
	28, 29, 42, 4, 34, 43, 34, 44, 34, 34,
	34, 45, 46, 12, 47, 13, 48, 49, 14, 50,
	15, 51, 16, 52, 20, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 22, 22,
	22, 22, 53, 54, 17, 55, 25, 27, 27, 27,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 56, 57, 18, 5,
	19, 24, 24, 24, 30, 31, 6, 32,
}
var yyR2 = []int{

	0, 1, 2, 0, 3, 0, 3, 1, 0, 2,
	2, 0, 2, 2, 0, 3, 0, 6, 0, 6,
	1, 1, 0, 2, 1, 0, 3, 0, 3, 2,
	2, 0, 0, 5, 0, 3, 0, 0, 9, 0,
	6, 0, 3, 0, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	1, 1, 0, 0, 12, 0, 2, 1, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 0, 0, 10, 1,
	2, 0, 1, 2, 1, 1, 1, 1,
}
var yyChk = []int{

	-1000, -33, -34, 55, 4, 48, 5, 56, -34, -43,
	-44, -20, -52, -20, -5, -6, 53, -20, -21, -22,
	-5, 50, -7, -8, -9, -10, -11, -12, -13, -14,
	-15, -16, -17, -18, -19, 6, 7, 12, 15, 16,
	24, 27, 29, 30, 32, 35, 38, 42, 50, -5,
	-35, -36, -39, -31, 53, -41, -45, -47, -48, -50,
	-51, -25, -55, -56, -24, 49, 51, 52, 48, -30,
	53, -31, -31, 48, -30, -30, 48, -53, -26, 6,
	7, 12, 15, 16, 18, 24, 27, 28, 29, 30,
	32, 35, 38, 42, 43, 48, 49, -1, -30, -30,
	-46, -30, -30, -1, 48, -40, -30, 48, -31, -31,
	-30, -57, -3, -23, -38, -4, -42, -4, -4, -5,
	-32, 53, 55, 47, 47, 45, -2, -37, -29, -28,
	53, -32, -49, 46, -29, -32, -27, 55, -25, -31,
	-32, -25, -54, -32, 48, -3,
}
var yyDef = []int{

	0, -2, 1, 24, 25, 27, 43, 43, 2, 0,
	43, 29, 0, 30, 26, 89, 96, 28, 44, 0,
	60, 61, 45, 46, 47, 48, 49, 50, 51, 52,
	53, 54, 55, 56, 57, 3, 5, 14, 0, 18,
	31, 34, 36, 39, 41, 65, 86, 91, 58, 59,
	0, 0, 0, 0, 95, 0, 0, 0, 0, 0,
	0, 62, 0, 0, 90, 92, 4, 6, 15, 0,
	94, 0, 32, 35, 0, 0, 42, 0, 66, 70,
	71, 72, 73, 74, 75, 76, 77, 78, 79, 80,
	81, 82, 83, 84, 85, 0, 93, 16, 7, 0,
	0, 0, 0, 0, 87, 11, 22, 33, 22, 22,
	0, 0, 17, 0, 0, 19, 0, 8, 40, 0,
	0, 97, 10, 13, 12, 23, 37, 0, 0, 21,
	20, 0, 65, 9, 0, 0, -2, 67, 68, 63,
	0, 69, 0, 88, 11, 64,
}
var yyTok1 = []int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	55, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 56,
}
var yyTok2 = []int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54,
}
var yyTok3 = []int{
	0,
}

/*	parser for yacc output	*/

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c > 0 && c <= len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return fmt.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return fmt.Sprintf("state-%v", s)
}

func yylex1(lex yyLexer, lval *yySymType) int {
	c := 0
	char := lex.Lex(lval)
	if char <= 0 {
		c = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		c = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			c = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		c = yyTok3[i+0]
		if c == char {
			c = yyTok3[i+1]
			goto out
		}
	}

out:
	if c == 0 {
		c = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		fmt.Printf("lex %U %s\n", uint(char), yyTokname(c))
	}
	return c
}

func yyParse(yylex *lex) int {
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, yyMaxDepth)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yychar := -1
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		fmt.Printf("char %v in %v\n", yyTokname(yychar), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yychar < 0 {
		yychar = yylex1(yylex, &yylval)
	}
	yyn += yychar
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yychar { /* valid shift */
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yychar < 0 {
			yychar = yylex1(yylex, &yylval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yychar {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error("syntax error")
			Nerrs++
			if yyDebug >= 1 {
				fmt.Printf("%s", yyStatname(yystate))
				fmt.Printf("saw %s\n", yyTokname(yychar))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift onn "error", pop stack */
				if yyDebug >= 2 {
					fmt.Printf("error recovery pops state %d, uncovers %d\n",
						yyS[yyp].yys, yyS[yyp-1].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				fmt.Printf("error recovery discards %s\n", yyTokname(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}
			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		fmt.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 3:
		{
			yylex.begin(sc_IPV4)
		}
	case 4:
		{
			yyVAL.rrData = &rr.A{yyS[yypt-0].ip}
		}
	case 5:
		{
			yylex.begin(sc_IPV6)
		}
	case 6:
		{
			yyVAL.rrData = &rr.AAAA{yyS[yypt-0].ip}
		}
	case 7:
		{
			yyVAL.alg = rr.AlgorithmType(yyS[yypt-0].uint)
		}
	case 8:
		{
			yylex.begin(sc_BASE32EXT)
		}
	case 9:
		{
			yylex.begin(sc_INITIAL)
			if data, err := strutil.Base32ExtDecode([]byte(yyS[yypt-0].str)); err != nil {
				yylex.Error(err.String())
			} else {
				yyVAL.data = data
			}
		}
	case 10:
		{
			yylex.begin(sc_INITIAL)
			if data, err := strutil.Base64Decode([]byte(yyS[yypt-1].str)); err != nil {
				yylex.Error(err.String())
			} else {
				yyVAL.data = data
			}
		}
	case 11:
		{
			yylex.begin(sc_BASE64)
		}
	case 12:
		{
			yyVAL.str = yyS[yypt-0].str
		}
	case 13:
		{
			yyVAL.str += yyS[yypt-0].str
		}
	case 14:
		{
			yylex.begin(sc_DOMAIN)
		}
	case 15:
		{
			yyVAL.rrData = &rr.CNAME{yyS[yypt-0].str}
		}
	case 16:
		{
			if yyS[yypt-1].uint != 3 {
				yylex.Error(`protocol must be "3"`)
			}
		}
	case 17:
		{
			yyVAL.rrData = &rr.DNSKEY{uint16(yyS[yypt-4].uint), byte(yyS[yypt-3].uint), yyS[yypt-2].alg, yyS[yypt-0].data}
		}
	case 18:
		{
			yylex.begin(sc_NUM)
		}
	case 19:
		{
			if yyS[yypt-1].uint != 1 || len(yyS[yypt-0].data) != 20 {
				yylex.Error(`digest type must be "1" and digest must be exactly 20 bytes (40 hex chars)`)
			} else {
				yyVAL.rrData = &rr.DS{uint16(yyS[yypt-3].uint), rr.AlgorithmType(yyS[yypt-2].uint), rr.HashAlgorithm(yyS[yypt-1].uint), yyS[yypt-0].data}
			}
		}
	case 20:
		{
			if t, err := dns.String2Seconds(yyS[yypt-0].str); err != nil {
				yylex.Error(err.String())
			} else {
				yyVAL.u64 = uint64(t)
			}
		}
	case 21:
		{
			yyVAL.uint = uint(yyS[yypt-0].u64)
		}
	case 22:
		{
			yylex.begin(sc_HEX)
		}
	case 23:
		{
			yyVAL.data = yyS[yypt-0].data
		}
	case 24:
		{
			yylex.begin(sc_INITIAL)
		}
	case 25:
		{
			yylex.begin(sc_NUM)
		}
	case 27:
		{
			yylex.begin(sc_RRHEAD)
		}
	case 28:
		{
			yyS[yypt-0].rr.Name = yyS[yypt-2].str
			if !yylex.rrHandler(yyS[yypt-0].rr) {
				goto ret0
			}
		}
	case 29:
		{
			if !yylex.rrHandler(yyS[yypt-0].rr) {
				goto ret0
			}
		}
	case 30:
		{
			yyS[yypt-0].rr.Name = "@"
			if !yylex.rrHandler(yyS[yypt-0].rr) {
				goto ret0
			}
		}
	case 31:
		{
			yylex.begin(sc_NUM)
		}
	case 32:
		{
			yylex.begin(sc_DOMAIN)
		}
	case 33:
		{
			yyVAL.rrData = &rr.MX{uint16(yyS[yypt-2].uint), yyS[yypt-0].str}
		}
	case 34:
		{
			yylex.begin(sc_DOMAIN)
		}
	case 35:
		{
			yyVAL.rrData = &rr.NS{yyS[yypt-0].str}
		}
	case 36:
		{
			yylex.begin(sc_NUM)
		}
	case 37:
		{
			yylex.begin(sc_TYPE)
		}
	case 38:
		{
			yyVAL.rrData = &rr.NSEC3{rr.NSEC3PARAM{rr.HashAlgorithm(yyS[yypt-6].uint), byte(yyS[yypt-5].uint), uint16(yyS[yypt-4].uint), yyS[yypt-3].data}, yyS[yypt-2].data, rr.TypesEncode(yyS[yypt-0].types)}
		}
	case 39:
		{
			yylex.begin(sc_NUM)
		}
	case 40:
		{
			yyVAL.rrData = &rr.NSEC3PARAM{rr.HashAlgorithm(yyS[yypt-3].uint), byte(yyS[yypt-2].uint), uint16(yyS[yypt-1].uint), yyS[yypt-0].data}
		}
	case 41:
		{
			yylex.begin(sc_DOMAIN)
		}
	case 42:
		{
			yyVAL.rrData = &rr.PTR{yyS[yypt-0].str}
		}
	case 43:
		{
			yylex.begin(sc_RRHEAD)
		}
	case 44:
		{
			yyVAL.rr = yyS[yypt-0].rr
		}
	case 45:
		{
			yyVAL.rr = &rr.RR{"", rr.TYPE_A, yyS[yypt-1].rrh.class, yyS[yypt-1].rrh.ttl, yyS[yypt-0].rrData}
		}
	case 46:
		{
			yyVAL.rr = &rr.RR{"", rr.TYPE_AAAA, yyS[yypt-1].rrh.class, yyS[yypt-1].rrh.ttl, yyS[yypt-0].rrData}
		}
	case 47:
		{
			yyVAL.rr = &rr.RR{"", rr.TYPE_CNAME, yyS[yypt-1].rrh.class, yyS[yypt-1].rrh.ttl, yyS[yypt-0].rrData}
		}
	case 48:
		{
			yyVAL.rr = &rr.RR{"", rr.TYPE_DNSKEY, yyS[yypt-1].rrh.class, yyS[yypt-1].rrh.ttl, yyS[yypt-0].rrData}
		}
	case 49:
		{
			yyVAL.rr = &rr.RR{"", rr.TYPE_DS, yyS[yypt-1].rrh.class, yyS[yypt-1].rrh.ttl, yyS[yypt-0].rrData}
		}
	case 50:
		{
			yyVAL.rr = &rr.RR{"", rr.TYPE_MX, yyS[yypt-1].rrh.class, yyS[yypt-1].rrh.ttl, yyS[yypt-0].rrData}
		}
	case 51:
		{
			yyVAL.rr = &rr.RR{"", rr.TYPE_NS, yyS[yypt-1].rrh.class, yyS[yypt-1].rrh.ttl, yyS[yypt-0].rrData}
		}
	case 52:
		{
			yyVAL.rr = &rr.RR{"", rr.TYPE_NSEC3, yyS[yypt-1].rrh.class, yyS[yypt-1].rrh.ttl, yyS[yypt-0].rrData}
		}
	case 53:
		{
			yyVAL.rr = &rr.RR{"", rr.TYPE_NSEC3PARAM, yyS[yypt-1].rrh.class, yyS[yypt-1].rrh.ttl, yyS[yypt-0].rrData}
		}
	case 54:
		{
			yyVAL.rr = &rr.RR{"", rr.TYPE_PTR, yyS[yypt-1].rrh.class, yyS[yypt-1].rrh.ttl, yyS[yypt-0].rrData}
		}
	case 55:
		{
			yyVAL.rr = &rr.RR{"", rr.TYPE_RRSIG, yyS[yypt-1].rrh.class, yyS[yypt-1].rrh.ttl, yyS[yypt-0].rrData}
		}
	case 56:
		{
			yyVAL.rr = &rr.RR{"", rr.TYPE_SOA, yyS[yypt-1].rrh.class, yyS[yypt-1].rrh.ttl, yyS[yypt-0].rrData}
		}
	case 57:
		{
			yyVAL.rr = &rr.RR{"", rr.TYPE_TXT, yyS[yypt-1].rrh.class, yyS[yypt-1].rrh.ttl, yyS[yypt-0].rrData}
		}
	case 58:
		{
			yyVAL.rrh = rrHead{int32(yyS[yypt-1].int), yyS[yypt-0].class}
		}
	case 59:
		{
			yyVAL.rrh = rrHead{int32(yyS[yypt-0].int), yyS[yypt-1].class}
		}
	case 60:
		{
			yyVAL.rrh = rrHead{int32(yyS[yypt-0].int), 0}
		}
	case 61:
		{
			yyVAL.rrh = rrHead{-1, yyS[yypt-0].class}
		}
	case 62:
		{
			yylex.begin(sc_NUM)
		}
	case 63:
		{
			yylex.begin(sc_DOMAIN)
		}
	case 64:
		{
			yyVAL.rrData = &rr.RRSIG{yyS[yypt-10].typ, yyS[yypt-8].alg, byte(yyS[yypt-7].uint), int32(yyS[yypt-6].int), uint32(yyS[yypt-5].uint), uint32(yyS[yypt-4].uint), uint16(yyS[yypt-3].uint), yyS[yypt-1].str, yyS[yypt-0].data}
		}
	case 65:
		{
			yylex.begin(sc_TYPE)
		}
	case 66:
		{
			yyVAL.typ = yyS[yypt-0].typ
		}
	case 67:
		{
			yyVAL.types = nil
			yylex.begin(sc_INITIAL)
		}
	case 68:
		{
			yyVAL.types = []rr.Type{yyS[yypt-0].typ}
		}
	case 69:
		{
			yyVAL.types = append(yyVAL.types, yyS[yypt-0].typ)
		}
	case 70:
		{
			yyVAL.typ = rr.TYPE_A
		}
	case 71:
		{
			yyVAL.typ = rr.TYPE_AAAA
		}
	case 72:
		{
			yyVAL.typ = rr.TYPE_CNAME
		}
	case 73:
		{
			yyVAL.typ = rr.TYPE_DNSKEY
		}
	case 74:
		{
			yyVAL.typ = rr.TYPE_DS
		}
	case 75:
		{
			yyVAL.typ = rr.TYPE_HINFO
		}
	case 76:
		{
			yyVAL.typ = rr.TYPE_MX
		}
	case 77:
		{
			yyVAL.typ = rr.TYPE_NS
		}
	case 78:
		{
			yyVAL.typ = rr.TYPE_NSEC
		}
	case 79:
		{
			yyVAL.typ = rr.TYPE_NSEC3
		}
	case 80:
		{
			yyVAL.typ = rr.TYPE_NSEC3PARAM
		}
	case 81:
		{
			yyVAL.typ = rr.TYPE_PTR
		}
	case 82:
		{
			yyVAL.typ = rr.TYPE_RRSIG
		}
	case 83:
		{
			yyVAL.typ = rr.TYPE_SOA
		}
	case 84:
		{
			yyVAL.typ = rr.TYPE_TXT
		}
	case 85:
		{
			yyVAL.typ = rr.TYPE_WKS
		}
	case 86:
		{
			yylex.begin(sc_DOMAIN)
		}
	case 87:
		{
			yylex.begin(sc_NUM)
		}
	case 88:
		{
			yyVAL.rrData = &rr.SOA{yyS[yypt-7].str, yyS[yypt-6].str, uint32(yyS[yypt-4].uint), uint32(yyS[yypt-3].uint), uint32(yyS[yypt-2].uint), uint32(yyS[yypt-1].uint), uint32(yyS[yypt-0].uint)}
		}
	case 89:
		yyVAL.int = yyS[yypt-0].int
	case 90:
		{
			yyVAL.rrData = &rr.TXT{yyS[yypt-0].str}
		}
	case 91:
		{
			yyVAL.str = ""
		}
	case 92:
		{
			yyVAL.str = yyS[yypt-0].str
		}
	case 93:
		{
			yyVAL.str += yyS[yypt-0].str
		}
	case 94:
		{
			if yyS[yypt-0].u64 > math.MaxUint8 {
				yylex.Error("number out of range")
				yyVAL.uint = math.MaxUint8
			} else {
				yyVAL.uint = uint(yyS[yypt-0].u64)
			}
		}
	case 95:
		{
			if yyS[yypt-0].u64 > math.MaxUint16 {
				yylex.Error("number out of range")
				yyVAL.uint = math.MaxUint16
			} else {
				yyVAL.uint = uint(yyS[yypt-0].u64)
			}
		}
	case 96:
		{
			if yyS[yypt-0].u64 > math.MaxInt32 {
				yylex.Error("number out of range")
				yyVAL.int = math.MaxInt32
			} else {
				yyVAL.int = int(yyS[yypt-0].u64)
			}
		}
	case 97:
		{
			if yyS[yypt-0].u64 > math.MaxUint32 {
				yylex.Error("number out of range")
				yyVAL.uint = math.MaxUint32
			} else {
				yyVAL.uint = uint(yyS[yypt-0].u64)
			}
		}
	}
	goto yystack /* stack new state and value */
}
