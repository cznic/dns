// Copyright (c) 2011 CZ.NIC z.s.p.o. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// blame: jnml, labs.nic.cz

// WARNING: If this file is parser.go then DO NOT EDIT.
// parser.go is generated by goyacc from parser.y (see the Makefile).

package zone

import __yyfmt__ "fmt"

import (
	"fmt"
	"github.com/cznic/dns"
	"github.com/cznic/dns/rr"
	"github.com/cznic/strutil"
	"math"
	"net"
)

type rrHead struct {
	ttl   int32
	class rr.Class
}

type yySymType struct {
	yys   int
	alg   rr.AlgorithmType
	class rr.Class
	data  []byte
	str   string
	u64   uint64
	int   int
	float float64
	uint  uint
	ip    net.IP
	rrh   rrHead
	rrd   dns.Wirer
	rr    *rr.RR
	typ   rr.Type
	types []rr.Type
	strs  []string
}

const tA = 57346
const tA6 = 57347
const tAAAA = 57348
const tAFSDB = 57349
const tAPL = 57350
const tATMA = 57351
const tBACKSLASH_HASH = 57352
const tBLANK_START = 57353
const tCDS = 57354
const tCERT = 57355
const tCNAME = 57356
const tDHCID = 57357
const tDLR_TTL = 57358
const tDLV = 57359
const tDNAME = 57360
const tDNSKEY = 57361
const tDNS_PORT = 57362
const tDS = 57363
const tEID = 57364
const tGID = 57365
const tGPOS = 57366
const tHINFO = 57367
const tHIP = 57368
const tIPSECKEY = 57369
const tISDN = 57370
const tKEY = 57371
const tKX = 57372
const tLOC = 57373
const tMB = 57374
const tMD = 57375
const tMF = 57376
const tMG = 57377
const tMINFO = 57378
const tMR = 57379
const tMX = 57380
const tNAPTR = 57381
const tNIMLOC = 57382
const tNINFO = 57383
const tNS = 57384
const tNSAP = 57385
const tNSAP_PTR = 57386
const tNSEC = 57387
const tNSEC3 = 57388
const tNSEC3PARAM = 57389
const tNULL = 57390
const tNXT = 57391
const tPTR = 57392
const tPX = 57393
const tRKEY = 57394
const tRP = 57395
const tRRSIG = 57396
const tRT = 57397
const tSIG = 57398
const tSMTP_PORT = 57399
const tSOA = 57400
const tSPF = 57401
const tSRV = 57402
const tSSHFP = 57403
const tTA = 57404
const tTALINK = 57405
const tTCP_PROTO = 57406
const tTKEY = 57407
const tTLSA = 57408
const tTSIG = 57409
const tTXT = 57410
const tTYPE_X = 57411
const tUDP_PROTO = 57412
const tUID = 57413
const tUINFO = 57414
const tUNSPEC = 57415
const tURI = 57416
const tWKS = 57417
const tX25 = 57418
const tCLASS = 57419
const tHEX = 57420
const t0xHEX = 57421
const tFLOAT = 57422
const tIPV4 = 57423
const tIPV6 = 57424
const tBASE32EXT = 57425
const tBASE64 = 57426
const tDOMAIN_NAME = 57427
const tDOMAIN_NAME2 = 57428
const tSRV_DOMAIN = 57429
const tQSTR = 57430
const tDECADIC = 57431

var yyToknames = []string{
	"tA",
	"tA6",
	"tAAAA",
	"tAFSDB",
	"tAPL",
	"tATMA",
	"tBACKSLASH_HASH",
	"tBLANK_START",
	"tCDS",
	"tCERT",
	"tCNAME",
	"tDHCID",
	"tDLR_TTL",
	"tDLV",
	"tDNAME",
	"tDNSKEY",
	"tDNS_PORT",
	"tDS",
	"tEID",
	"tGID",
	"tGPOS",
	"tHINFO",
	"tHIP",
	"tIPSECKEY",
	"tISDN",
	"tKEY",
	"tKX",
	"tLOC",
	"tMB",
	"tMD",
	"tMF",
	"tMG",
	"tMINFO",
	"tMR",
	"tMX",
	"tNAPTR",
	"tNIMLOC",
	"tNINFO",
	"tNS",
	"tNSAP",
	"tNSAP_PTR",
	"tNSEC",
	"tNSEC3",
	"tNSEC3PARAM",
	"tNULL",
	"tNXT",
	"tPTR",
	"tPX",
	"tRKEY",
	"tRP",
	"tRRSIG",
	"tRT",
	"tSIG",
	"tSMTP_PORT",
	"tSOA",
	"tSPF",
	"tSRV",
	"tSSHFP",
	"tTA",
	"tTALINK",
	"tTCP_PROTO",
	"tTKEY",
	"tTLSA",
	"tTSIG",
	"tTXT",
	"tTYPE_X",
	"tUDP_PROTO",
	"tUID",
	"tUINFO",
	"tUNSPEC",
	"tURI",
	"tWKS",
	"tX25",
	"tCLASS",
	"tHEX",
	"t0xHEX",
	"tFLOAT",
	"tIPV4",
	"tIPV6",
	"tBASE32EXT",
	"tBASE64",
	"tDOMAIN_NAME",
	"tDOMAIN_NAME2",
	"tSRV_DOMAIN",
	"tQSTR",
	"tDECADIC",
}
var yyStatenames = []string{}

const yyEofCode = 1
const yyErrCode = 2
const yyMaxDepth = 200

var yyExca = []int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 351,
	78, 36,
	-2, 40,
	-1, 371,
	1, 118,
	11, 118,
	16, 118,
	85, 118,
	90, 118,
	92, 118,
	-2, 197,
	-1, 397,
	78, 36,
	-2, 41,
	-1, 429,
	78, 36,
	-2, 288,
	-1, 462,
	1, 121,
	11, 121,
	16, 121,
	85, 121,
	90, 121,
	92, 121,
	-2, 197,
}

const yyNprod = 319
const yyPrivate = 57344

var yyTokenNames []string
var yyStates []string

const yyLast = 546

var yyAct = []int{

	137, 132, 422, 373, 371, 443, 397, 434, 360, 398,
	325, 14, 171, 315, 15, 411, 412, 365, 366, 322,
	323, 141, 142, 435, 20, 143, 414, 409, 407, 193,
	423, 140, 372, 125, 21, 192, 138, 445, 198, 361,
	16, 440, 6, 298, 415, 457, 16, 4, 73, 370,
	74, 75, 316, 304, 302, 184, 177, 76, 77, 78,
	175, 79, 80, 81, 470, 82, 469, 461, 112, 113,
	114, 123, 115, 84, 85, 86, 87, 88, 89, 90,
	91, 92, 93, 94, 448, 144, 95, 96, 97, 98,
	99, 100, 101, 419, 102, 103, 379, 104, 105, 106,
	107, 377, 108, 109, 110, 111, 116, 117, 369, 166,
	118, 169, 119, 72, 358, 352, 5, 346, 120, 121,
	122, 3, 339, 7, 335, 327, 306, 297, 227, 427,
	189, 190, 181, 225, 220, 219, 195, 217, 214, 213,
	199, 212, 200, 201, 202, 203, 205, 211, 210, 209,
	196, 191, 426, 194, 453, 215, 216, 188, 309, 187,
	384, 342, 301, 218, 388, 226, 124, 460, 393, 295,
	11, 224, 126, 299, 394, 2, 458, 8, 13, 305,
	430, 17, 392, 308, 349, 183, 425, 311, 176, 174,
	197, 313, 182, 180, 179, 178, 173, 204, 424, 172,
	208, 381, 170, 467, 459, 296, 337, 168, 167, 466,
	228, 351, 186, 221, 222, 12, 165, 329, 318, 334,
	164, 163, 162, 161, 452, 333, 300, 160, 330, 303,
	159, 158, 157, 307, 156, 451, 155, 328, 310, 154,
	153, 152, 336, 151, 150, 149, 148, 207, 314, 147,
	10, 9, 317, 319, 145, 357, 185, 344, 139, 355,
	324, 326, 136, 135, 131, 130, 387, 134, 442, 312,
	129, 128, 127, 1, 331, 332, 432, 404, 359, 406,
	408, 320, 413, 367, 206, 146, 444, 229, 449, 386,
	133, 19, 71, 70, 69, 68, 67, 66, 65, 60,
	340, 59, 58, 57, 56, 55, 54, 53, 52, 348,
	338, 51, 223, 343, 50, 49, 48, 47, 46, 45,
	44, 43, 42, 41, 40, 39, 38, 353, 37, 36,
	35, 34, 374, 375, 33, 363, 362, 64, 83, 32,
	63, 382, 62, 376, 61, 31, 30, 29, 28, 27,
	26, 383, 25, 341, 24, 399, 23, 401, 345, 403,
	347, 391, 22, 350, 400, 18, 402, 354, 321, 405,
	356, 410, 364, 450, 396, 416, 385, 326, 441, 368,
	0, 0, 0, 0, 417, 418, 0, 0, 0, 378,
	420, 380, 421, 0, 0, 0, 0, 429, 389, 428,
	390, 0, 0, 395, 0, 0, 0, 431, 0, 0,
	0, 0, 0, 0, 433, 439, 437, 0, 0, 0,
	0, 0, 0, 0, 0, 447, 0, 446, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 431,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 454,
	456, 0, 455, 0, 0, 463, 464, 462, 0, 465,
	436, 0, 438, 0, 0, 0, 416, 0, 468, 0,
	0, 471, 472, 230, 231, 232, 233, 235, 234, 0,
	0, 236, 237, 238, 239, 0, 240, 241, 242, 0,
	243, 244, 245, 246, 247, 249, 250, 251, 252, 253,
	254, 255, 256, 257, 0, 248, 258, 259, 260, 261,
	262, 263, 264, 265, 266, 267, 268, 270, 269, 271,
	272, 274, 275, 273, 276, 277, 0, 278, 279, 280,
	281, 282, 283, 0, 284, 285, 286, 287, 294, 0,
	288, 289, 290, 291, 292, 293,
}
var yyPact = []int{

	31, 31, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -49,
	-1000, -1000, -43, -1000, -1000, -1000, -1000, -1000, -1000, 44,
	89, -49, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 162, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -53, -1000, -60, -53, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -28, -1000, -32, -1000, -1000, -1000, -1000,
	-1000, -1000, -33, -1000, -1000, -1000, -1000, 78, 75, -53,
	-53, 66, -1000, -55, 69, -53, 65, -51, -1000, -53,
	-1000, -1000, -1000, -1000, -51, -53, -1000, -51, 64, 63,
	62, 56, 54, 53, -53, -53, 52, 84, 50, 49,
	-51, -51, 161, 48, -53, 43, -1000, 469, -53, -1000,
	42, -45, -53, -51, 82, -34, -51, -35, -53, 41,
	-51, -45, -53, 77, -1000, -51, -53, -1000, -1000, -1000,
	-53, -1000, -1000, -1000, -1000, -51, -1000, -51, -1000, -51,
	-1000, -1000, -1000, -1000, -51, -1000, -75, -51, -51, -1000,
	-1000, -1000, -1000, 40, -1000, -1000, -53, -1000, -1000, -1000,
	-1000, -51, -51, -1000, -53, -1000, -1000, 39, -51, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -51, 37, -1000, -53,
	-51, 81, -1000, -1000, -1000, -51, 32, -51, -53, -1000,
	-51, -1000, 30, -51, -51, -1000, -1000, -51, -1000, 29,
	-50, -49, -1000, -1000, -51, -79, -51, -1000, 23, -39,
	-58, -53, -53, -1000, 16, -1000, -51, 11, -51, -1000,
	-53, -1000, 80, -1000, 86, -51, -1000, -51, -1000, 104,
	-51, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-50, -63, -64, -83, -1000, -1000, -1000, -1000, -65, -1000,
	-44, -1000, -1000, -1000, -1000, -1000, -1000, 8, -49, -1000,
	-49, -59, -1000, -1000, -1000, -1000, 68, 45, -1000, -1000,
	-1000, -45, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -50, -70, -51, -70, -51,
	-1000, -1000, -1000, -1000, -53, -47, -1000, -1000, -1000, -1000,
	-52, -52, -59, -1000, -1, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 71, -52, -1000, -1000, -52, -59, -1000, -41,
	147, -18, -58, -1000, -53, -53, -59, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -59, -19, -21, -1000, -1000,
	-1000, -1000, -1000,
}
var yyPgo = []int{

	0, 13, 378, 1, 376, 9, 6, 374, 373, 11,
	14, 372, 371, 368, 170, 365, 362, 356, 354, 352,
	350, 349, 348, 347, 346, 345, 344, 342, 340, 339,
	338, 337, 334, 331, 330, 329, 328, 326, 325, 324,
	323, 322, 321, 320, 319, 318, 317, 316, 315, 314,
	312, 311, 308, 307, 306, 305, 304, 303, 302, 301,
	299, 298, 297, 296, 295, 294, 293, 292, 291, 290,
	289, 12, 288, 3, 287, 4, 286, 285, 284, 10,
	283, 282, 281, 280, 279, 8, 5, 52, 0, 2,
	278, 277, 276, 273, 175, 272, 271, 270, 269, 268,
	267, 266, 265, 264, 263, 262, 259, 258, 257, 256,
	255, 254, 253, 251, 250, 7, 249, 247, 246, 245,
	244, 243, 241, 240, 239, 237, 236, 235, 234, 232,
	231, 230, 228, 227, 224, 223, 222, 221, 220, 219,
	216, 215, 212, 211, 210, 209, 208, 207, 206, 205,
	203, 202, 201, 199, 198, 196, 195, 194, 193, 192,
	189, 188, 186, 185, 184, 182, 180, 176,
}
var yyR1 = []int{

	0, 93, 93, 95, 16, 96, 17, 97, 98, 18,
	1, 99, 2, 3, 100, 69, 69, 4, 101, 70,
	70, 102, 19, 103, 20, 21, 104, 22, 105, 23,
	106, 24, 107, 25, 76, 86, 108, 5, 6, 6,
	7, 7, 109, 30, 29, 29, 29, 29, 110, 32,
	111, 112, 33, 94, 113, 94, 114, 94, 94, 94,
	34, 90, 90, 91, 91, 92, 92, 85, 84, 84,
	82, 115, 115, 83, 83, 13, 13, 13, 116, 77,
	117, 78, 11, 11, 12, 12, 79, 79, 80, 80,
	81, 81, 118, 35, 119, 36, 120, 37, 121, 38,
	122, 39, 123, 40, 124, 125, 41, 126, 127, 42,
	128, 43, 129, 44, 130, 45, 131, 132, 46, 133,
	134, 47, 135, 48, 136, 49, 50, 50, 137, 51,
	138, 139, 52, 140, 53, 141, 14, 15, 15, 15,
	15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
	15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
	15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
	15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
	15, 15, 15, 15, 15, 15, 15, 142, 143, 15,
	68, 68, 68, 68, 144, 145, 54, 146, 73, 75,
	75, 75, 74, 74, 74, 74, 74, 74, 74, 74,
	74, 74, 74, 74, 74, 74, 74, 74, 74, 74,
	74, 74, 74, 74, 74, 74, 74, 74, 74, 74,
	74, 74, 74, 74, 74, 74, 74, 74, 74, 74,
	74, 74, 74, 74, 74, 74, 74, 74, 74, 74,
	74, 74, 74, 74, 74, 74, 74, 74, 74, 74,
	74, 74, 74, 74, 74, 74, 74, 147, 148, 55,
	149, 150, 56, 151, 152, 57, 58, 153, 154, 59,
	155, 60, 156, 61, 157, 62, 9, 158, 63, 64,
	71, 71, 159, 65, 160, 26, 27, 161, 162, 28,
	72, 72, 31, 31, 87, 88, 10, 89, 163, 164,
	166, 66, 165, 165, 167, 167, 8, 8, 67,
}
var yyR2 = []int{

	0, 1, 2, 0, 3, 0, 3, 0, 0, 5,
	1, 0, 2, 2, 0, 2, 2, 1, 0, 2,
	2, 0, 6, 0, 3, 2, 0, 6, 0, 3,
	0, 6, 0, 6, 1, 1, 0, 2, 1, 2,
	0, 1, 0, 5, 3, 3, 3, 3, 0, 6,
	0, 0, 5, 1, 0, 3, 0, 3, 2, 2,
	5, 0, 2, 0, 2, 0, 1, 3, 0, 2,
	4, 0, 1, 0, 2, 0, 1, 1, 0, 4,
	0, 4, 1, 1, 1, 1, 0, 2, 0, 2,
	0, 2, 0, 3, 0, 3, 0, 3, 0, 3,
	0, 4, 0, 3, 0, 0, 5, 0, 0, 9,
	0, 3, 0, 3, 0, 3, 0, 0, 5, 0,
	0, 9, 0, 6, 0, 3, 3, 1, 0, 3,
	0, 0, 6, 0, 4, 0, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 0, 0, 7,
	2, 2, 1, 1, 0, 0, 12, 0, 2, 1,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 0, 5,
	0, 0, 12, 0, 0, 10, 2, 0, 0, 7,
	0, 5, 0, 6, 0, 4, 1, 0, 6, 2,
	0, 2, 0, 5, 0, 5, 3, 0, 0, 7,
	0, 2, 2, 3, 1, 1, 1, 1, 0, 0,
	0, 7, 1, 1, 1, 1, 0, 2, 2,
}
var yyChk = []int{

	-1000, -93, -94, 90, 16, 85, 11, 92, -94, -113,
	-114, -14, -141, -14, -9, -10, 89, -14, -15, -68,
	-9, 77, -16, -17, -18, -19, -20, -21, -22, -23,
	-24, -25, -29, -32, -33, -34, -35, -36, -37, -38,
	-39, -40, -41, -42, -43, -44, -45, -46, -47, -48,
	-49, -51, -52, -53, -54, -55, -56, -57, -58, -59,
	-60, -26, -27, -28, -31, -61, -62, -63, -64, -65,
	-66, -67, 69, 4, 6, 7, 13, 14, 15, 17,
	18, 19, 21, -30, 29, 30, 31, 32, 33, 34,
	35, 36, 37, 38, 39, 42, 43, 44, 45, 46,
	47, 48, 50, 51, 53, 54, 55, 56, 58, 59,
	60, 61, 24, 25, 26, 28, 62, 63, 66, 68,
	74, 75, 76, 27, 77, -9, 10, -95, -96, -97,
	-102, -103, -3, -69, -100, -104, -105, -88, 89, -107,
	91, 81, 82, 85, -88, -111, -77, -116, -118, -119,
	-120, -121, -122, -123, -124, -126, -128, -129, -130, -131,
	-133, -135, -136, -137, -138, -140, -73, -146, -147, -73,
	-151, -71, -153, -155, -160, 88, -161, 88, -156, -157,
	-158, -71, -159, -163, 88, -109, -142, 81, 82, -88,
	-88, 85, 90, 84, 84, -88, 85, -87, 89, -88,
	-3, -3, -3, -3, -87, -88, -78, -117, -87, 85,
	85, 85, 85, 85, 85, -88, -88, 85, 79, 85,
	85, -87, -87, -50, 10, 85, -88, 85, -144, -74,
	4, 5, 6, 7, 9, 8, 12, 13, 14, 15,
	17, 18, 19, 21, 22, 23, 24, 25, 36, 26,
	27, 28, 29, 30, 31, 32, 33, 34, 37, 38,
	39, 40, 41, 42, 43, 44, 45, 46, 47, 49,
	48, 50, 51, 54, 52, 53, 55, 56, 58, 59,
	60, 61, 62, 63, 65, 66, 67, 68, 71, 72,
	73, 74, 75, 76, 69, -88, -149, 85, 88, -88,
	-87, 80, 88, -87, 88, -88, 85, -87, -88, 81,
	-87, -88, -98, -88, -87, -1, -87, -87, -1, -112,
	-82, -13, 94, 95, -87, -79, -87, 85, -125, -88,
	-132, -87, -87, -88, -139, 85, -1, -148, -1, 85,
	-88, -87, 80, -5, -108, -87, 85, -87, -88, -164,
	-87, -143, 85, -1, -87, -106, -87, -110, 85, -90,
	-85, 89, -10, -79, -11, 96, 97, -80, -87, 85,
	88, -75, 90, -73, -88, -88, -5, 85, -87, 85,
	-87, -152, -88, -5, 80, -4, -70, -101, 78, -87,
	-87, -71, -165, 64, 70, -87, -7, -6, -5, -3,
	-5, -3, -5, -3, -91, -85, -84, 91, -83, 91,
	-12, 98, 99, -81, 91, 88, -73, -5, -5, 85,
	-9, -9, -89, 89, -154, -162, 84, 84, -5, -6,
	-166, -5, -92, -85, -115, 93, -87, -115, -87, -88,
	88, -2, -99, -86, -76, 89, -86, -89, 85, -72,
	-8, -127, -134, 83, -86, -86, -89, 86, -167, 57,
	20, 85, -75, -88, -88, -89, -145, -150, -89, 85,
	85, -3, -3,
}
var yyDef = []int{

	0, -2, 1, 53, 54, 56, 135, 135, 2, 0,
	135, 58, 0, 59, 55, 286, 306, 57, 136, 0,
	192, 193, 137, 138, 139, 140, 141, 142, 143, 144,
	145, 146, 147, 148, 149, 150, 151, 152, 153, 154,
	155, 156, 157, 158, 159, 160, 161, 162, 163, 164,
	165, 166, 167, 168, 169, 170, 171, 172, 173, 174,
	175, 176, 177, 178, 179, 180, 181, 182, 183, 184,
	185, 186, 0, 3, 5, 7, 21, 23, 14, 26,
	28, 0, 32, 0, 0, 50, 78, 92, 94, 96,
	98, 100, 102, 104, 107, 110, 112, 114, 116, 119,
	122, 124, 128, 130, 133, 197, 267, 197, 273, 290,
	277, 280, 294, 0, 297, 0, 282, 284, 287, 290,
	292, 308, 0, 42, 190, 191, 187, 0, 0, 0,
	0, 0, 25, 0, 0, 0, 0, 0, 305, 0,
	14, 14, 14, 14, 0, 0, 80, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 194, 0, 0, 270,
	0, 276, 0, 0, 0, 0, 0, 302, 0, 0,
	0, 289, 0, 0, 318, 0, 0, 4, 6, 8,
	0, 24, 13, 16, 15, 0, 29, 0, 304, 0,
	44, 45, 46, 47, 0, 51, 75, 0, 86, 93,
	95, 97, 99, 0, 103, 105, 0, 111, 113, 115,
	117, 0, 0, 125, 127, 129, 131, 0, 0, 198,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257, 258, 259, 260, 261,
	262, 263, 264, 265, 266, 268, 0, 0, 291, 0,
	0, 0, 296, 36, 303, 0, 0, 0, 0, 309,
	0, 188, 0, 0, 0, 30, 10, 0, 48, 0,
	61, 0, 76, 77, 86, 0, 88, 101, 0, 0,
	197, 0, 0, 36, 0, 134, 0, 0, 0, 274,
	0, 36, 0, 18, 0, 0, 285, 0, 290, 0,
	0, -2, 9, 14, 36, 14, 36, 14, 52, 60,
	63, 68, 73, 0, 79, 82, 83, 87, 90, 106,
	0, -2, 199, 200, 36, 36, 126, 0, 0, 269,
	0, 0, 278, 281, 295, 298, 17, 0, 37, 36,
	36, 293, 310, 312, 313, 43, 189, -2, 38, 22,
	27, 31, 33, 49, 62, 65, 71, 0, 71, 0,
	81, 84, 85, 89, 0, 0, 201, 11, 123, 132,
	0, 0, 0, 307, 0, 300, 20, 19, 283, -2,
	316, 39, 64, 66, 67, 72, 69, 70, 74, 91,
	108, 120, 0, 0, 35, 34, 0, 0, 279, 299,
	311, 0, 197, 12, 0, 0, 0, 301, 317, 314,
	315, 109, -2, 195, 271, 0, 0, 0, 275, 14,
	14, 196, 272,
}
var yyTok1 = []int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	90, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 94, 3, 95, 91, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 92, 3, 3, 3, 3, 98,
	3, 3, 3, 3, 3, 3, 3, 3, 96, 3,
	3, 3, 3, 97, 3, 3, 3, 99, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 93,
}
var yyTok2 = []int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89,
}
var yyTok3 = []int{
	0,
}

/*	parser for yacc output	*/

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c > 0 && c <= len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yylex1(lex yyLexer, lval *yySymType) int {
	c := 0
	char := lex.Lex(lval)
	if char <= 0 {
		c = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		c = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			c = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		c = yyTok3[i+0]
		if c == char {
			c = yyTok3[i+1]
			goto out
		}
	}

out:
	if c == 0 {
		c = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %U %s\n", uint(char), yyTokname(c))
	}
	return c
}

func yyParse(yylex *lex) int {
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, yyMaxDepth)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yychar := -1
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yychar), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yychar < 0 {
		yychar = yylex1(yylex, &yylval)
	}
	yyn += yychar
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yychar { /* valid shift */
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yychar < 0 {
			yychar = yylex1(yylex, &yylval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yychar {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error("syntax error")
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf("saw %s\n", yyTokname(yychar))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}
			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 3:
		{
			yylex.begin(sc_IPV4)
		}
	case 4:
		{
			yyVAL.rrd = &rr.A{yyS[yypt-0].ip}
		}
	case 5:
		{
			yylex.begin(sc_IPV6)
		}
	case 6:
		{
			yyVAL.rrd = &rr.AAAA{yyS[yypt-0].ip}
		}
	case 7:
		{
			yylex.begin(sc_NUM)
		}
	case 8:
		{
			yylex.begin(sc_DOMAIN)
		}
	case 9:
		{
			yyVAL.rrd = &rr.AFSDB{uint16(yyS[yypt-2].uint), yyS[yypt-0].str}
		}
	case 10:
		{
			yyVAL.alg = rr.AlgorithmType(yyS[yypt-0].uint)
		}
	case 11:
		{
			yylex.begin(sc_BASE32EXT)
		}
	case 12:
		{
			yylex.begin(sc_INITIAL)
			if data, err := strutil.Base32ExtDecode([]byte(yyS[yypt-0].str)); err != nil {
				yylex.Error(err.Error())
			} else {
				yyVAL.data = data
			}
		}
	case 13:
		{
			yylex.begin(sc_INITIAL)
			if data, err := strutil.Base64Decode([]byte(yyS[yypt-1].str)); err != nil {
				yylex.Error(err.Error())
			} else {
				yyVAL.data = data
			}
		}
	case 14:
		{
			yylex.begin(sc_BASE64)
		}
	case 15:
		{
			yyVAL.str = yyS[yypt-0].str
		}
	case 16:
		{
			yyVAL.str = yyS[yypt-1].str + yyS[yypt-0].str
		}
	case 17:
		{
			yylex.begin(sc_INITIAL)
			if data, err := strutil.Base64Decode([]byte(yyS[yypt-0].str)); err != nil {
				yylex.Error(err.Error())
			} else {
				yyVAL.data = data
			}
		}
	case 18:
		{
			yylex.begin(sc_DOMAIN2)
		}
	case 19:
		{
			yyVAL.str = yyS[yypt-0].str
		}
	case 20:
		{
			yyVAL.str = yyS[yypt-1].str + yyS[yypt-0].str
		}
	case 21:
		{
			yylex.begin(sc_NUM)
		}
	case 22:
		{
			yyVAL.rrd = &rr.CERT{rr.CertType(yyS[yypt-3].uint), uint16(yyS[yypt-2].uint), yyS[yypt-1].alg, yyS[yypt-0].data}
		}
	case 23:
		{
			yylex.begin(sc_DOMAIN)
		}
	case 24:
		{
			yyVAL.rrd = &rr.CNAME{yyS[yypt-0].str}
		}
	case 25:
		{
			yyVAL.rrd = &rr.DHCID{yyS[yypt-0].data}
		}
	case 26:
		{
			yylex.begin(sc_NUM)
		}
	case 27:
		{
			if yyS[yypt-1].uint != 1 || len(yyS[yypt-0].data) != 20 {
				yylex.Error(`digest type must be "1" and digest must be exactly 20 bytes (40 hex chars)`)
			} else {
				yyVAL.rrd = &rr.DLV{uint16(yyS[yypt-3].uint), rr.AlgorithmType(yyS[yypt-2].uint), rr.HashAlgorithm(yyS[yypt-1].uint), yyS[yypt-0].data}
			}
		}
	case 28:
		{
			yylex.begin(sc_DOMAIN)
		}
	case 29:
		{
			yyVAL.rrd = &rr.DNAME{yyS[yypt-0].str}
		}
	case 30:
		{
			if yyS[yypt-1].uint != 3 {
				yylex.Error(`protocol must be "3"`)
			}
		}
	case 31:
		{
			yyVAL.rrd = &rr.DNSKEY{uint16(yyS[yypt-4].uint), byte(yyS[yypt-3].uint), yyS[yypt-2].alg, yyS[yypt-0].data}
		}
	case 32:
		{
			yylex.begin(sc_NUM)
		}
	case 33:
		{
			if yyS[yypt-1].uint != 1 || len(yyS[yypt-0].data) != 20 {
				yylex.Error(`digest type must be "1" and digest must be exactly 20 bytes (40 hex chars)`)
			} else {
				yyVAL.rrd = &rr.DS{uint16(yyS[yypt-3].uint), rr.AlgorithmType(yyS[yypt-2].uint), rr.HashAlgorithm(yyS[yypt-1].uint), yyS[yypt-0].data}
			}
		}
	case 34:
		{
			if t, err := dns.String2Seconds(yyS[yypt-0].str); err != nil {
				yylex.Error(err.Error())
			} else {
				yyVAL.u64 = uint64(t)
			}
		}
	case 35:
		{
			yyVAL.uint = uint(yyS[yypt-0].u64)
		}
	case 36:
		{
			yylex.begin(sc_HEX)
		}
	case 37:
		{
			yyVAL.data = yyS[yypt-0].data
		}
	case 38:
		yyVAL.data = yyS[yypt-0].data
	case 39:
		{
			yyVAL.data = append(yyS[yypt-1].data, yyS[yypt-0].data...)
		}
	case 40:
		{
			yyVAL.data = nil
		}
	case 41:
		yyVAL.data = yyS[yypt-0].data
	case 42:
		{
			yylex.begin(sc_NUM)
		}
	case 43:
		{
			x := &rr.IPSECKEY{Precedence: byte(yyS[yypt-2].uint), GatewayType: rr.GatewayType(yyS[yypt-1].uint), Algorithm: rr.IPSECKEYAlgorithm(yyS[yypt-0].uint)}
			yyVAL.rrd = x
			switch x.GatewayType {
			default:
				yylex.Error("Unknown gateway type")
			case rr.GatewayNone, rr.GatewayIPV4, rr.GatewayIPV6, rr.GatewayDomain:
				// OK
			}

			switch x.Algorithm {
			default:
				yylex.Error("Unknown algorithm")
			case rr.IPSECKEYAlgorithmDSA, rr.IPSECKEYAlgorithmRSA:
				// OK
			}

			yylex.begin(sc_IPSSECKEY)
		}
	case 44:
		{
			x := yyS[yypt-2].rrd.(*rr.IPSECKEY)
			x.PublicKey = yyS[yypt-0].data
			yyVAL.rrd = x
			switch x.GatewayType {
			case rr.GatewayNone:
				// OK
			case rr.GatewayIPV4:
				yylex.Error("missing gateway IPv4 address")
			case rr.GatewayIPV6:
				yylex.Error("missing gateway IPv6 address")
			case rr.GatewayDomain:
				yylex.Error("missing gateway <domain-name>")
			}
		}
	case 45:
		{
			x := yyS[yypt-2].rrd.(*rr.IPSECKEY)
			x.Gateway = yyS[yypt-1].ip
			x.PublicKey = yyS[yypt-0].data
			yyVAL.rrd = x
			if x.GatewayType != rr.GatewayIPV4 {
				yylex.Error("expected IPv4 gateway")
			}
		}
	case 46:
		{
			x := yyS[yypt-2].rrd.(*rr.IPSECKEY)
			x.Gateway = yyS[yypt-1].ip
			x.PublicKey = yyS[yypt-0].data
			yyVAL.rrd = x
			if x.GatewayType != rr.GatewayIPV6 {
				yylex.Error("expected IPv6 gateway")
			}
		}
	case 47:
		{
			x := yyS[yypt-2].rrd.(*rr.IPSECKEY)
			x.PublicKey = yyS[yypt-0].data
			switch x.GatewayType {
			default:
				yylex.Error("unexpected <domain-name> gateway")
			case rr.GatewayIPV4:
				ip := net.ParseIP(yyS[yypt-1].str)
				if ip == nil {
					ip = errIP
					yylex.Error("expected IPv4 gateway")
				}
				x.Gateway = ip
			case rr.GatewayDomain:
				x.Gateway = yyS[yypt-1].str
			}
			yyVAL.rrd = x
		}
	case 48:
		{
			if yyS[yypt-1].uint != 3 {
				yylex.Error(`protocol must be "3"`)
			}
		}
	case 49:
		{
			yyVAL.rrd = &rr.KEY{uint16(yyS[yypt-4].uint), byte(yyS[yypt-3].uint), yyS[yypt-2].alg, yyS[yypt-0].data}
		}
	case 50:
		{
			yylex.begin(sc_NUM)
		}
	case 51:
		{
			yylex.begin(sc_DOMAIN)
		}
	case 52:
		{
			yyVAL.rrd = &rr.KX{uint16(yyS[yypt-2].uint), yyS[yypt-0].str}
		}
	case 53:
		{
			yylex.begin(sc_INITIAL)
		}
	case 54:
		{
			yylex.begin(sc_NUM)
		}
	case 56:
		{
			yylex.begin(sc_RRHEAD)
		}
	case 57:
		{
			yyS[yypt-0].rr.Name = yyS[yypt-2].str
			if !yylex.rrHandler(yyS[yypt-0].rr) {
				goto ret0
			}
		}
	case 58:
		{
			if !yylex.rrHandler(yyS[yypt-0].rr) {
				goto ret0
			}
		}
	case 59:
		{
			yyS[yypt-0].rr.Name = "@"
			if !yylex.rrHandler(yyS[yypt-0].rr) {
				goto ret0
			}
		}
	case 60:
		{
			yyVAL.rrd = &rr.LOC{0, byte(yyS[yypt-0].uint >> 16), byte(yyS[yypt-0].uint >> 8), byte(yyS[yypt-0].uint), uint32(yyS[yypt-3].u64), uint32(yyS[yypt-2].u64), uint32(yyS[yypt-1].u64)}
		}
	case 61:
		{
			yyVAL.uint = uint((*rr.LOC)(nil).EncPrec(100))<<16 | uint((*rr.LOC)(nil).EncPrec(1000000))<<8 | uint((*rr.LOC)(nil).EncPrec(1000))

		}
	case 62:
		{
			yyVAL.uint = uint((*rr.LOC)(nil).EncPrec(yyS[yypt-1].u64))<<16 | yyS[yypt-0].uint
		}
	case 63:
		{
			yyVAL.uint = uint((*rr.LOC)(nil).EncPrec(1000000))<<8 | uint((*rr.LOC)(nil).EncPrec(1000))
		}
	case 64:
		{
			yyVAL.uint = uint((*rr.LOC)(nil).EncPrec(yyS[yypt-1].u64))<<8 | yyS[yypt-0].uint
		}
	case 65:
		{
			yyVAL.uint = uint((*rr.LOC)(nil).EncPrec(1000))
		}
	case 66:
		{
			yyVAL.uint = uint((*rr.LOC)(nil).EncPrec(yyS[yypt-0].u64))
		}
	case 67:
		{
			yyVAL.u64 = 100*yyS[yypt-2].u64 + yyS[yypt-1].u64
		}
	case 68:
		{
			yyVAL.u64 = 0
		}
	case 69:
		{

			x := yyS[yypt-0].uint
			for ; x != 0 && x < 10; x *= 10 {
			}
			yyVAL.u64 = uint64(x)
		}
	case 70:
		{
			x := (int64(yyS[yypt-1].u64) + 100*int64(yyS[yypt-2].int)) * int64(yyS[yypt-3].int)
			yyVAL.u64 = uint64(x + 10000000)
		}
	case 73:
		{
			yyVAL.u64 = 0
		}
	case 74:
		{
			x := yyS[yypt-0].uint
			for ; x != 0 && x < 10; x *= 10 {
			}
			yyVAL.u64 = uint64(x)
		}
	case 75:
		{
			yyVAL.int = 1
		}
	case 76:
		{
			yyVAL.int = 1
		}
	case 77:
		{
			yyVAL.int = -1
		}
	case 78:
		{
			yylex.begin(sc_NUM)
		}
	case 79:
		{
			ts := yyS[yypt-1].u64 % 60000
			m := (yyS[yypt-1].u64 / 60000) % 60
			yyVAL.u64 = uint64((*rr.LOC)(nil).EncDMTS(int(yyS[yypt-2].uint), int(m), int(ts), yyS[yypt-0].int != 0))
		}
	case 80:
		{
			yylex.begin(sc_NUM)
		}
	case 81:
		{
			ts := yyS[yypt-1].u64 % 60000
			m := (yyS[yypt-1].u64 / 60000) % 60
			yyVAL.u64 = uint64((*rr.LOC)(nil).EncDMTS(int(yyS[yypt-2].uint), int(m), int(ts), yyS[yypt-0].int != 0))
		}
	case 82:
		{
			yyVAL.int = 1
		}
	case 83:
		{
			yyVAL.int = 0
		}
	case 84:
		{
			yyVAL.int = 1
		}
	case 85:
		{
			yyVAL.int = 0
		}
	case 86:
		{
			yyVAL.u64 = 0
		}
	case 87:
		{
			yyVAL.u64 = 60000*uint64(yyS[yypt-1].uint) + yyS[yypt-0].u64
		}
	case 88:
		{
			yyVAL.u64 = 0
		}
	case 89:
		{
			yyVAL.u64 = 1000*uint64(yyS[yypt-1].uint) + yyS[yypt-0].u64
		}
	case 90:
		{
			yyVAL.u64 = 0
		}
	case 91:
		{
			x := yyS[yypt-0].uint
			for ; x != 0 && x < 100; x *= 10 {
			}
			yyVAL.u64 = uint64(x)
		}
	case 92:
		{
			yylex.begin(sc_DOMAIN)
		}
	case 93:
		{
			yyVAL.rrd = &rr.MB{yyS[yypt-0].str}
		}
	case 94:
		{
			yylex.begin(sc_DOMAIN)
		}
	case 95:
		{
			yyVAL.rrd = &rr.MD{yyS[yypt-0].str}
		}
	case 96:
		{
			yylex.begin(sc_DOMAIN)
		}
	case 97:
		{
			yyVAL.rrd = &rr.MF{yyS[yypt-0].str}
		}
	case 98:
		{
			yylex.begin(sc_DOMAIN)
		}
	case 99:
		{
			yyVAL.rrd = &rr.MG{yyS[yypt-0].str}
		}
	case 100:
		{
			yylex.begin(sc_DOMAIN)
		}
	case 101:
		{
			yyVAL.rrd = &rr.MINFO{yyS[yypt-1].str, yyS[yypt-0].str}
		}
	case 102:
		{
			yylex.begin(sc_DOMAIN)
		}
	case 103:
		{
			yyVAL.rrd = &rr.MR{yyS[yypt-0].str}
		}
	case 104:
		{
			yylex.begin(sc_NUM)
		}
	case 105:
		{
			yylex.begin(sc_DOMAIN)
		}
	case 106:
		{
			yyVAL.rrd = &rr.MX{uint16(yyS[yypt-2].uint), yyS[yypt-0].str}
		}
	case 107:
		{
			yylex.begin(sc_NUM)
		}
	case 108:
		{
			yylex.begin(sc_DOMAIN)
		}
	case 109:
		{
			yyVAL.rrd = &rr.NAPTR{uint16(yyS[yypt-6].uint), uint16(yyS[yypt-5].uint), yyS[yypt-4].str, yyS[yypt-3].str, yyS[yypt-2].str, yyS[yypt-0].str}
		}
	case 110:
		{
			yylex.begin(sc_DOMAIN)
		}
	case 111:
		{
			yyVAL.rrd = &rr.NS{yyS[yypt-0].str}
		}
	case 112:
		{
			yylex.begin(sc_0XHEX)
		}
	case 113:
		{
			yyVAL.rrd = &rr.NSAP{yyS[yypt-0].data}
		}
	case 114:
		{
			yylex.begin(sc_DOMAIN)
		}
	case 115:
		{
			yyVAL.rrd = &rr.NSAP_PTR{yyS[yypt-0].str}
		}
	case 116:
		{
			yylex.begin(sc_DOMAIN)
		}
	case 117:
		{
			yylex.begin(sc_TYPE)
		}
	case 118:
		{
			yyVAL.rrd = &rr.NSEC{yyS[yypt-2].str, rr.TypesEncode(yyS[yypt-0].types)}
		}
	case 119:
		{
			yylex.begin(sc_NUM)
		}
	case 120:
		{
			yylex.begin(sc_TYPE)
		}
	case 121:
		{
			yyVAL.rrd = &rr.NSEC3{rr.NSEC3PARAM{rr.HashAlgorithm(yyS[yypt-6].uint), byte(yyS[yypt-5].uint), uint16(yyS[yypt-4].uint), yyS[yypt-3].data}, yyS[yypt-2].data, rr.TypesEncode(yyS[yypt-0].types)}
		}
	case 122:
		{
			yylex.begin(sc_NUM)
		}
	case 123:
		{
			yyVAL.rrd = &rr.NSEC3PARAM{rr.HashAlgorithm(yyS[yypt-3].uint), byte(yyS[yypt-2].uint), uint16(yyS[yypt-1].uint), yyS[yypt-0].data}
		}
	case 124:
		{
			yylex.begin(sc_NUM)
		}
	case 125:
		{
			yyVAL.rrd = yyS[yypt-0].rrd
		}
	case 126:
		{
			if int(yyS[yypt-1].uint) != len(yyS[yypt-0].data) {
				yylex.Error(fmt.Sprintf("mismatched data len: %d != %d", yyS[yypt-1].uint, len(yyS[yypt-0].data)))
			}
			yyVAL.rrd = &rr.NULL{yyS[yypt-0].data}
		}
	case 127:
		{
			yyVAL.rrd = &rr.NULL{[]byte{}}
		}
	case 128:
		{
			yylex.begin(sc_DOMAIN)
		}
	case 129:
		{
			yyVAL.rrd = &rr.PTR{yyS[yypt-0].str}
		}
	case 130:
		{
			yylex.begin(sc_NUM)
		}
	case 131:
		{
			yylex.begin(sc_DOMAIN)
		}
	case 132:
		{
			yyVAL.rrd = &rr.PX{uint16(yyS[yypt-3].uint), yyS[yypt-1].str, yyS[yypt-0].str}
		}
	case 133:
		{
			yylex.begin(sc_DOMAIN)
		}
	case 134:
		{
			yyVAL.rrd = &rr.RP{yyS[yypt-1].str, yyS[yypt-0].str}
		}
	case 135:
		{
			yylex.begin(sc_RRHEAD)
		}
	case 136:
		{
			yyVAL.rr = yyS[yypt-0].rr
		}
	case 137:
		{
			yyVAL.rr = &rr.RR{"", rr.TYPE_A, yyS[yypt-1].rrh.class, yyS[yypt-1].rrh.ttl, yyS[yypt-0].rrd}
		}
	case 138:
		{
			yyVAL.rr = &rr.RR{"", rr.TYPE_AAAA, yyS[yypt-1].rrh.class, yyS[yypt-1].rrh.ttl, yyS[yypt-0].rrd}
		}
	case 139:
		{
			yyVAL.rr = &rr.RR{"", rr.TYPE_AFSDB, yyS[yypt-1].rrh.class, yyS[yypt-1].rrh.ttl, yyS[yypt-0].rrd}
		}
	case 140:
		{
			yyVAL.rr = &rr.RR{"", rr.TYPE_CERT, yyS[yypt-1].rrh.class, yyS[yypt-1].rrh.ttl, yyS[yypt-0].rrd}
		}
	case 141:
		{
			yyVAL.rr = &rr.RR{"", rr.TYPE_CNAME, yyS[yypt-1].rrh.class, yyS[yypt-1].rrh.ttl, yyS[yypt-0].rrd}
		}
	case 142:
		{
			yyVAL.rr = &rr.RR{"", rr.TYPE_DHCID, yyS[yypt-1].rrh.class, yyS[yypt-1].rrh.ttl, yyS[yypt-0].rrd}
		}
	case 143:
		{
			yyVAL.rr = &rr.RR{"", rr.TYPE_DLV, yyS[yypt-1].rrh.class, yyS[yypt-1].rrh.ttl, yyS[yypt-0].rrd}
		}
	case 144:
		{
			yyVAL.rr = &rr.RR{"", rr.TYPE_DNAME, yyS[yypt-1].rrh.class, yyS[yypt-1].rrh.ttl, yyS[yypt-0].rrd}
		}
	case 145:
		{
			yyVAL.rr = &rr.RR{"", rr.TYPE_DNSKEY, yyS[yypt-1].rrh.class, yyS[yypt-1].rrh.ttl, yyS[yypt-0].rrd}
		}
	case 146:
		{
			yyVAL.rr = &rr.RR{"", rr.TYPE_DS, yyS[yypt-1].rrh.class, yyS[yypt-1].rrh.ttl, yyS[yypt-0].rrd}
		}
	case 147:
		{
			yyVAL.rr = &rr.RR{"", rr.TYPE_IPSECKEY, yyS[yypt-1].rrh.class, yyS[yypt-1].rrh.ttl, yyS[yypt-0].rrd}
		}
	case 148:
		{
			yyVAL.rr = &rr.RR{"", rr.TYPE_KEY, yyS[yypt-1].rrh.class, yyS[yypt-1].rrh.ttl, yyS[yypt-0].rrd}
		}
	case 149:
		{
			yyVAL.rr = &rr.RR{"", rr.TYPE_KX, yyS[yypt-1].rrh.class, yyS[yypt-1].rrh.ttl, yyS[yypt-0].rrd}
		}
	case 150:
		{
			yyVAL.rr = &rr.RR{"", rr.TYPE_LOC, yyS[yypt-1].rrh.class, yyS[yypt-1].rrh.ttl, yyS[yypt-0].rrd}
		}
	case 151:
		{
			yyVAL.rr = &rr.RR{"", rr.TYPE_MB, yyS[yypt-1].rrh.class, yyS[yypt-1].rrh.ttl, yyS[yypt-0].rrd}
		}
	case 152:
		{
			yyVAL.rr = &rr.RR{"", rr.TYPE_MD, yyS[yypt-1].rrh.class, yyS[yypt-1].rrh.ttl, yyS[yypt-0].rrd}
		}
	case 153:
		{
			yyVAL.rr = &rr.RR{"", rr.TYPE_MF, yyS[yypt-1].rrh.class, yyS[yypt-1].rrh.ttl, yyS[yypt-0].rrd}
		}
	case 154:
		{
			yyVAL.rr = &rr.RR{"", rr.TYPE_MG, yyS[yypt-1].rrh.class, yyS[yypt-1].rrh.ttl, yyS[yypt-0].rrd}
		}
	case 155:
		{
			yyVAL.rr = &rr.RR{"", rr.TYPE_MINFO, yyS[yypt-1].rrh.class, yyS[yypt-1].rrh.ttl, yyS[yypt-0].rrd}
		}
	case 156:
		{
			yyVAL.rr = &rr.RR{"", rr.TYPE_MR, yyS[yypt-1].rrh.class, yyS[yypt-1].rrh.ttl, yyS[yypt-0].rrd}
		}
	case 157:
		{
			yyVAL.rr = &rr.RR{"", rr.TYPE_MX, yyS[yypt-1].rrh.class, yyS[yypt-1].rrh.ttl, yyS[yypt-0].rrd}
		}
	case 158:
		{
			yyVAL.rr = &rr.RR{"", rr.TYPE_NAPTR, yyS[yypt-1].rrh.class, yyS[yypt-1].rrh.ttl, yyS[yypt-0].rrd}
		}
	case 159:
		{
			yyVAL.rr = &rr.RR{"", rr.TYPE_NS, yyS[yypt-1].rrh.class, yyS[yypt-1].rrh.ttl, yyS[yypt-0].rrd}
		}
	case 160:
		{
			yyVAL.rr = &rr.RR{"", rr.TYPE_NSAP, yyS[yypt-1].rrh.class, yyS[yypt-1].rrh.ttl, yyS[yypt-0].rrd}
		}
	case 161:
		{
			yyVAL.rr = &rr.RR{"", rr.TYPE_NSAP_PTR, yyS[yypt-1].rrh.class, yyS[yypt-1].rrh.ttl, yyS[yypt-0].rrd}
		}
	case 162:
		{
			yyVAL.rr = &rr.RR{"", rr.TYPE_NSEC, yyS[yypt-1].rrh.class, yyS[yypt-1].rrh.ttl, yyS[yypt-0].rrd}
		}
	case 163:
		{
			yyVAL.rr = &rr.RR{"", rr.TYPE_NSEC3, yyS[yypt-1].rrh.class, yyS[yypt-1].rrh.ttl, yyS[yypt-0].rrd}
		}
	case 164:
		{
			yyVAL.rr = &rr.RR{"", rr.TYPE_NSEC3PARAM, yyS[yypt-1].rrh.class, yyS[yypt-1].rrh.ttl, yyS[yypt-0].rrd}
		}
	case 165:
		{
			yyVAL.rr = &rr.RR{"", rr.TYPE_NULL, yyS[yypt-1].rrh.class, yyS[yypt-1].rrh.ttl, yyS[yypt-0].rrd}
		}
	case 166:
		{
			yyVAL.rr = &rr.RR{"", rr.TYPE_PTR, yyS[yypt-1].rrh.class, yyS[yypt-1].rrh.ttl, yyS[yypt-0].rrd}
		}
	case 167:
		{
			yyVAL.rr = &rr.RR{"", rr.TYPE_PX, yyS[yypt-1].rrh.class, yyS[yypt-1].rrh.ttl, yyS[yypt-0].rrd}
		}
	case 168:
		{
			yyVAL.rr = &rr.RR{"", rr.TYPE_RP, yyS[yypt-1].rrh.class, yyS[yypt-1].rrh.ttl, yyS[yypt-0].rrd}
		}
	case 169:
		{
			yyVAL.rr = &rr.RR{"", rr.TYPE_RRSIG, yyS[yypt-1].rrh.class, yyS[yypt-1].rrh.ttl, yyS[yypt-0].rrd}
		}
	case 170:
		{
			yyVAL.rr = &rr.RR{"", rr.TYPE_RT, yyS[yypt-1].rrh.class, yyS[yypt-1].rrh.ttl, yyS[yypt-0].rrd}
		}
	case 171:
		{
			yyVAL.rr = &rr.RR{"", rr.TYPE_SIG, yyS[yypt-1].rrh.class, yyS[yypt-1].rrh.ttl, yyS[yypt-0].rrd}
		}
	case 172:
		{
			yyVAL.rr = &rr.RR{"", rr.TYPE_SOA, yyS[yypt-1].rrh.class, yyS[yypt-1].rrh.ttl, yyS[yypt-0].rrd}
		}
	case 173:
		{
			yyVAL.rr = &rr.RR{"", rr.TYPE_SPF, yyS[yypt-1].rrh.class, yyS[yypt-1].rrh.ttl, yyS[yypt-0].rrd}
		}
	case 174:
		{
			yyVAL.rr = &rr.RR{"", rr.TYPE_SRV, yyS[yypt-1].rrh.class, yyS[yypt-1].rrh.ttl, yyS[yypt-0].rrd}
		}
	case 175:
		{
			yyVAL.rr = &rr.RR{"", rr.TYPE_SSHFP, yyS[yypt-1].rrh.class, yyS[yypt-1].rrh.ttl, yyS[yypt-0].rrd}
		}
	case 176:
		{
			yyVAL.rr = &rr.RR{"", rr.TYPE_GPOS, yyS[yypt-1].rrh.class, yyS[yypt-1].rrh.ttl, yyS[yypt-0].rrd}
		}
	case 177:
		{
			yyVAL.rr = &rr.RR{"", rr.TYPE_HINFO, yyS[yypt-1].rrh.class, yyS[yypt-1].rrh.ttl, yyS[yypt-0].rrd}
		}
	case 178:
		{
			yyVAL.rr = &rr.RR{"", rr.TYPE_HIP, yyS[yypt-1].rrh.class, yyS[yypt-1].rrh.ttl, yyS[yypt-0].rrd}
		}
	case 179:
		{
			yyVAL.rr = &rr.RR{"", rr.TYPE_ISDN, yyS[yypt-1].rrh.class, yyS[yypt-1].rrh.ttl, yyS[yypt-0].rrd}
		}
	case 180:
		{
			yyVAL.rr = &rr.RR{"", rr.TYPE_TA, yyS[yypt-1].rrh.class, yyS[yypt-1].rrh.ttl, yyS[yypt-0].rrd}
		}
	case 181:
		{
			yyVAL.rr = &rr.RR{"", rr.TYPE_TALINK, yyS[yypt-1].rrh.class, yyS[yypt-1].rrh.ttl, yyS[yypt-0].rrd}
		}
	case 182:
		{
			yyVAL.rr = &rr.RR{"", rr.TYPE_TLSA, yyS[yypt-1].rrh.class, yyS[yypt-1].rrh.ttl, yyS[yypt-0].rrd}
		}
	case 183:
		{
			yyVAL.rr = &rr.RR{"", rr.TYPE_TXT, yyS[yypt-1].rrh.class, yyS[yypt-1].rrh.ttl, yyS[yypt-0].rrd}
		}
	case 184:
		{
			yyVAL.rr = &rr.RR{"", rr.TYPE_URI, yyS[yypt-1].rrh.class, yyS[yypt-1].rrh.ttl, yyS[yypt-0].rrd}
		}
	case 185:
		{
			yyVAL.rr = &rr.RR{"", rr.TYPE_WKS, yyS[yypt-1].rrh.class, yyS[yypt-1].rrh.ttl, yyS[yypt-0].rrd}
		}
	case 186:
		{
			yyVAL.rr = &rr.RR{"", rr.TYPE_X25, yyS[yypt-1].rrh.class, yyS[yypt-1].rrh.ttl, yyS[yypt-0].rrd}
		}
	case 187:
		{
			yylex.begin(sc_NUM)
		}
	case 188:
		{
			yylex.begin(sc_HEX)
		}
	case 189:
		{
			rdata := rr.RDATA(yyS[yypt-0].data)
			yyVAL.rr = &rr.RR{"", yyS[yypt-5].typ, yyS[yypt-6].rrh.class, yyS[yypt-6].rrh.ttl, &rdata}
			if len(yyS[yypt-0].data) != int(yyS[yypt-2].uint) {
				yylex.Error(fmt.Sprintf("mismatched rdata len: %d != %d", yyS[yypt-2].uint, len(yyS[yypt-0].data)))
			}
		}
	case 190:
		{
			yyVAL.rrh = rrHead{int32(yyS[yypt-1].int), yyS[yypt-0].class}
		}
	case 191:
		{
			yyVAL.rrh = rrHead{int32(yyS[yypt-0].int), yyS[yypt-1].class}
		}
	case 192:
		{
			yyVAL.rrh = rrHead{int32(yyS[yypt-0].int), 0}
		}
	case 193:
		{
			yyVAL.rrh = rrHead{-1, yyS[yypt-0].class}
		}
	case 194:
		{
			yylex.begin(sc_NUM)
		}
	case 195:
		{
			yylex.begin(sc_DOMAIN)
		}
	case 196:
		{
			yyVAL.rrd = &rr.RRSIG{yyS[yypt-10].typ, yyS[yypt-8].alg, byte(yyS[yypt-7].uint), int32(yyS[yypt-6].int), uint32(yyS[yypt-5].uint), uint32(yyS[yypt-4].uint), uint16(yyS[yypt-3].uint), yyS[yypt-1].str, yyS[yypt-0].data}
		}
	case 197:
		{
			yylex.begin(sc_TYPE)
		}
	case 198:
		{
			yyVAL.typ = yyS[yypt-0].typ
		}
	case 199:
		{
			yyVAL.types = nil
			yylex.begin(sc_INITIAL)
		}
	case 200:
		{
			yyVAL.types = []rr.Type{yyS[yypt-0].typ}
		}
	case 201:
		{
			yyVAL.types = append(yyS[yypt-1].types, yyS[yypt-0].typ)
		}
	case 202:
		{
			yyVAL.typ = rr.TYPE_A
		}
	case 203:
		{
			yyVAL.typ = rr.TYPE_A6
		}
	case 204:
		{
			yyVAL.typ = rr.TYPE_AAAA
		}
	case 205:
		{
			yyVAL.typ = rr.TYPE_AFSDB
		}
	case 206:
		{
			yyVAL.typ = rr.TYPE_ATMA
		}
	case 207:
		{
			yyVAL.typ = rr.TYPE_APL
		}
	case 208:
		{
			yyVAL.typ = rr.TYPE_CDS
		}
	case 209:
		{
			yyVAL.typ = rr.TYPE_CERT
		}
	case 210:
		{
			yyVAL.typ = rr.TYPE_CNAME
		}
	case 211:
		{
			yyVAL.typ = rr.TYPE_DHCID
		}
	case 212:
		{
			yyVAL.typ = rr.TYPE_DLV
		}
	case 213:
		{
			yyVAL.typ = rr.TYPE_DNAME
		}
	case 214:
		{
			yyVAL.typ = rr.TYPE_DNSKEY
		}
	case 215:
		{
			yyVAL.typ = rr.TYPE_DS
		}
	case 216:
		{
			yyVAL.typ = rr.TYPE_EID
		}
	case 217:
		{
			yyVAL.typ = rr.TYPE_GID
		}
	case 218:
		{
			yyVAL.typ = rr.TYPE_GPOS
		}
	case 219:
		{
			yyVAL.typ = rr.TYPE_HINFO
		}
	case 220:
		{
			yyVAL.typ = rr.TYPE_MINFO
		}
	case 221:
		{
			yyVAL.typ = rr.TYPE_HIP
		}
	case 222:
		{
			yyVAL.typ = rr.TYPE_IPSECKEY
		}
	case 223:
		{
			yyVAL.typ = rr.TYPE_ISDN
		}
	case 224:
		{
			yyVAL.typ = rr.TYPE_KEY
		}
	case 225:
		{
			yyVAL.typ = rr.TYPE_KX
		}
	case 226:
		{
			yyVAL.typ = rr.TYPE_LOC
		}
	case 227:
		{
			yyVAL.typ = rr.TYPE_MB
		}
	case 228:
		{
			yyVAL.typ = rr.TYPE_MD
		}
	case 229:
		{
			yyVAL.typ = rr.TYPE_MF
		}
	case 230:
		{
			yyVAL.typ = rr.TYPE_MR
		}
	case 231:
		{
			yyVAL.typ = rr.TYPE_MX
		}
	case 232:
		{
			yyVAL.typ = rr.TYPE_NAPTR
		}
	case 233:
		{
			yyVAL.typ = rr.TYPE_NIMLOC
		}
	case 234:
		{
			yyVAL.typ = rr.TYPE_NINFO
		}
	case 235:
		{
			yyVAL.typ = rr.TYPE_NS
		}
	case 236:
		{
			yyVAL.typ = rr.TYPE_NSAP
		}
	case 237:
		{
			yyVAL.typ = rr.TYPE_NSAP_PTR
		}
	case 238:
		{
			yyVAL.typ = rr.TYPE_NSEC
		}
	case 239:
		{
			yyVAL.typ = rr.TYPE_NSEC3
		}
	case 240:
		{
			yyVAL.typ = rr.TYPE_NSEC3PARAM
		}
	case 241:
		{
			yyVAL.typ = rr.TYPE_NXT
		}
	case 242:
		{
			yyVAL.typ = rr.TYPE_NULL
		}
	case 243:
		{
			yyVAL.typ = rr.TYPE_PTR
		}
	case 244:
		{
			yyVAL.typ = rr.TYPE_PX
		}
	case 245:
		{
			yyVAL.typ = rr.TYPE_RRSIG
		}
	case 246:
		{
			yyVAL.typ = rr.TYPE_RKEY
		}
	case 247:
		{
			yyVAL.typ = rr.TYPE_RP
		}
	case 248:
		{
			yyVAL.typ = rr.TYPE_RT
		}
	case 249:
		{
			yyVAL.typ = rr.TYPE_SIG
		}
	case 250:
		{
			yyVAL.typ = rr.TYPE_SOA
		}
	case 251:
		{
			yyVAL.typ = rr.TYPE_SPF
		}
	case 252:
		{
			yyVAL.typ = rr.TYPE_SRV
		}
	case 253:
		{
			yyVAL.typ = rr.TYPE_SSHFP
		}
	case 254:
		{
			yyVAL.typ = rr.TYPE_DS
		}
	case 255:
		{
			yyVAL.typ = rr.TYPE_TALINK
		}
	case 256:
		{
			yyVAL.typ = rr.TYPE_TKEY
		}
	case 257:
		{
			yyVAL.typ = rr.TYPE_TLSA
		}
	case 258:
		{
			yyVAL.typ = rr.TYPE_TSIG
		}
	case 259:
		{
			yyVAL.typ = rr.TYPE_TXT
		}
	case 260:
		{
			yyVAL.typ = rr.TYPE_UID
		}
	case 261:
		{
			yyVAL.typ = rr.TYPE_UINFO
		}
	case 262:
		{
			yyVAL.typ = rr.TYPE_UNSPEC
		}
	case 263:
		{
			yyVAL.typ = rr.TYPE_URI
		}
	case 264:
		{
			yyVAL.typ = rr.TYPE_WKS
		}
	case 265:
		{
			yyVAL.typ = rr.TYPE_X25
		}
	case 266:
		yyVAL.typ = yyS[yypt-0].typ
	case 267:
		{
			yylex.begin(sc_NUM)
		}
	case 268:
		{
			yylex.begin(sc_DOMAIN)
		}
	case 269:
		{
			yyVAL.rrd = &rr.RT{uint16(yyS[yypt-2].uint), yyS[yypt-0].str}
		}
	case 270:
		{
			yylex.begin(sc_NUM)
		}
	case 271:
		{
			yylex.begin(sc_DOMAIN)
		}
	case 272:
		{
			yyVAL.rrd = &rr.SIG{yyS[yypt-10].typ, yyS[yypt-8].alg, byte(yyS[yypt-7].uint), int32(yyS[yypt-6].int), uint32(yyS[yypt-5].uint), uint32(yyS[yypt-4].uint), uint16(yyS[yypt-3].uint), yyS[yypt-1].str, yyS[yypt-0].data}
		}
	case 273:
		{
			yylex.begin(sc_DOMAIN)
		}
	case 274:
		{
			yylex.begin(sc_NUM)
		}
	case 275:
		{
			yyVAL.rrd = &rr.SOA{yyS[yypt-7].str, yyS[yypt-6].str, uint32(yyS[yypt-4].uint), uint32(yyS[yypt-3].uint), uint32(yyS[yypt-2].uint), uint32(yyS[yypt-1].uint), uint32(yyS[yypt-0].uint)}
		}
	case 276:
		{
			yyVAL.rrd = &rr.SPF{yyS[yypt-0].strs}
		}
	case 277:
		{
			yylex.begin(sc_NUM)
		}
	case 278:
		{
			yylex.begin(sc_DOMAIN)
		}
	case 279:
		{
			yyVAL.rrd = &rr.SRV{uint16(yyS[yypt-4].uint), uint16(yyS[yypt-3].uint), uint16(yyS[yypt-2].uint), yyS[yypt-0].str}
		}
	case 280:
		{
			yylex.begin(sc_NUM)
		}
	case 281:
		{
			yyVAL.rrd = &rr.SSHFP{rr.SSHFPAlgorithm(yyS[yypt-2].uint), rr.SSHFPType(yyS[yypt-1].uint), yyS[yypt-0].data}
		}
	case 282:
		{
			yylex.begin(sc_NUM)
		}
	case 283:
		{
			if yyS[yypt-1].uint != 1 || len(yyS[yypt-0].data) != 20 {
				yylex.Error(`digest type must be "1" and digest must be exactly 20 bytes (40 hex chars)`)
			} else {
				yyVAL.rrd = &rr.TA{uint16(yyS[yypt-3].uint), rr.AlgorithmType(yyS[yypt-2].uint), rr.HashAlgorithm(yyS[yypt-1].uint), yyS[yypt-0].data}
			}
		}
	case 284:
		{
			yylex.begin(sc_DOMAIN)
		}
	case 285:
		{
			yyVAL.rrd = &rr.TALINK{yyS[yypt-1].str, yyS[yypt-0].str}
		}
	case 286:
		yyVAL.int = yyS[yypt-0].int
	case 287:
		{
			yylex.begin(sc_NUM)
		}
	case 288:
		{
			yyVAL.rrd = &rr.TLSA{rr.TLSAUsage(yyS[yypt-3].uint), rr.TLSASelector(yyS[yypt-2].uint), rr.TLSAMatchingType(yyS[yypt-1].uint), yyS[yypt-0].data}
		}
	case 289:
		{
			yyVAL.rrd = &rr.TXT{yyS[yypt-0].strs}
		}
	case 290:
		{
			yyVAL.strs = nil
		}
	case 291:
		{
			yyVAL.strs = append(yyS[yypt-1].strs, yyS[yypt-0].str)
		}
	case 292:
		{
			yylex.begin(sc_NUM)
		}
	case 293:
		{
			yyVAL.rrd = &rr.URI{uint16(yyS[yypt-2].uint), uint16(yyS[yypt-1].uint), yyS[yypt-0].strs}
		}
	case 294:
		{
			yylex.begin(sc_FLOAT)
		}
	case 295:
		{
			yyVAL.rrd = &rr.GPOS{yyS[yypt-2].float, yyS[yypt-1].float, yyS[yypt-0].float}
		}
	case 296:
		{
			yyVAL.rrd = &rr.HINFO{yyS[yypt-1].str, yyS[yypt-0].str}
		}
	case 297:
		{
			yylex.begin(sc_NUM)
		}
	case 298:
		{
			yylex.begin(sc_DOMAIN2)
		}
	case 299:
		{
			yyVAL.rrd = &rr.HIP{rr.IPSECKEYAlgorithm(yyS[yypt-4].uint), yyS[yypt-3].data, yyS[yypt-2].data, yyS[yypt-0].strs}
		}
	case 300:
		{
			yyVAL.strs = nil
		}
	case 301:
		{
			yyVAL.strs = append(yyS[yypt-1].strs, yyS[yypt-0].str)
		}
	case 302:
		{
			yyVAL.rrd = &rr.ISDN{yyS[yypt-0].str, ""}
		}
	case 303:
		{
			yyVAL.rrd = &rr.ISDN{yyS[yypt-1].str, yyS[yypt-0].str}
		}
	case 304:
		{
			if yyS[yypt-0].u64 > math.MaxUint8 {
				yylex.Error("number out of range")
				yyVAL.uint = math.MaxUint8
			} else {
				yyVAL.uint = uint(yyS[yypt-0].u64)
			}
		}
	case 305:
		{
			if yyS[yypt-0].u64 > math.MaxUint16 {
				yylex.Error("number out of range")
				yyVAL.uint = math.MaxUint16
			} else {
				yyVAL.uint = uint(yyS[yypt-0].u64)
			}
		}
	case 306:
		{
			if yyS[yypt-0].u64 > math.MaxInt32 {
				yylex.Error("number out of range")
				yyVAL.int = math.MaxInt32
			} else {
				yyVAL.int = int(yyS[yypt-0].u64)
			}
		}
	case 307:
		{
			if yyS[yypt-0].u64 > math.MaxUint32 {
				yylex.Error("number out of range")
				yyVAL.uint = math.MaxUint32
			} else {
				yyVAL.uint = uint(yyS[yypt-0].u64)
			}
		}
	case 308:
		{
			yylex.begin(sc_IPV4)
		}
	case 309:
		{
			yylex.begin(sc_PROTO)
		}
	case 310:
		{
			yylex.begin(sc_PORT)
		}
	case 311:
		{
			x := &rr.WKS{yyS[yypt-4].ip, rr.IP_Protocol(yyS[yypt-2].int), map[rr.IP_Port]struct{}{}}
			for i, v := range yyS[yypt-0].data {
				for j := 8 * i; v != 0; j, v = j+1, v>>1 {
					if v&1 != 0 {
						x.Ports[rr.IP_Port(j)] = struct{}{}
					}
				}
			}
			yyVAL.rrd = x
		}
	case 316:
		{
			yyVAL.data = make([]byte, 128)
		}
	case 317:
		{
			i := rr.IP_Port(yyS[yypt-0].int)
			yyVAL.data[i>>3] = yyS[yypt-1].data[i>>3] | 1<<uint(i&7)
		}
	case 318:
		{
			yyVAL.rrd = &rr.X25{yyS[yypt-0].str}
		}
	}
	goto yystack /* stack new state and value */
}
