%{
// Copyright (c) 2011 CZ.NIC z.s.p.o. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// blame: jnml, labs.nic.cz


// WARNING: If this file is scanner.go then DO NOT EDIT.
// scanner.go is generated by golex from scanner.l (see the Makefile).


package pcat

import (
	"encoding/hex"
	"errors"
	"fmt"
	"strconv"
)

func (l *lex) scan() (r *Record, err error) {
	const (
		INITIAL = iota
		ID
		QUERY
		REPLY
	)
	var sc int
	c := l.current
	r = &Record{}
%}

DD	[0-9]
HD	{DD}|[A-Fa-f]
HEX	{HD}{HD}

%yyc c
%yyn if c, err = l.getc(); err != nil { return }
%yyt sc

%x ID QUERY REPLY

%%
	l.buf = l.buf[:0]

<INITIAL>\n*\x00
	return nil, nil

<INITIAL>\n*
	sc = ID

<ID>{DD}+
	if r.Id, err = strconv.Atoi(string(l.buf)); err != nil {
		return
	}

	sc = QUERY

<QUERY>\n{HEX}+
	if r.Query, err = hex.DecodeString(string(l.buf[1:])); err != nil {
		return
	}

	sc = REPLY

<REPLY>\n{HEX}*
	r.Reply, err = hex.DecodeString(string(l.buf[1:]))
	return


%%
	return nil, errors.New(fmt.Sprintf("Unexpected char %q", string(int(c))))
}
